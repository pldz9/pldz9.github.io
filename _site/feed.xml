<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-11-23T17:20:01+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Blogs</title><subtitle>Build Jekyll site with the GitBook style.
</subtitle><author><name>pldz9</name></author><entry><title type="html">2 通过 Turtlebot3 案例了解 NAVI2</title><link href="http://localhost:4000/ros2_car/2023-06-02-2_1_%E9%80%9A%E8%BF%87Turtlebot3%E6%A1%88%E4%BE%8B%E4%BA%86%E8%A7%A3NAVI2.html" rel="alternate" type="text/html" title="2 通过 Turtlebot3 案例了解 NAVI2" /><published>2023-06-02T00:00:00+08:00</published><updated>2023-06-02T00:00:00+08:00</updated><id>http://localhost:4000/ros2_car/2_1_%E9%80%9A%E8%BF%87Turtlebot3%E6%A1%88%E4%BE%8B%E4%BA%86%E8%A7%A3NAVI2</id><content type="html" xml:base="http://localhost:4000/ros2_car/2023-06-02-2_1_%E9%80%9A%E8%BF%87Turtlebot3%E6%A1%88%E4%BE%8B%E4%BA%86%E8%A7%A3NAVI2.html"><![CDATA[<h1 id="11-ubuntu2004-安装-ros2foxy">1.1 Ubuntu20.04 安装 ROS2(Foxy)</h1>

<blockquote>
  <p>参考内容：</p>

  <p><a href="https://docs.ros.org/en/foxy/Installation/Ubuntu-Install-Debians.html">官网给出的教程</a></p>
</blockquote>

<ol>
  <li>换源，输入<code class="language-plaintext highlighter-rouge">sudo gedit /etc/apt/sources.list</code>这里选择的是中科大的源，如果你是在 Ubuntu 内部选择的软件源，笔者遇到过安装 ROS2 时候提示没有 depends 的情况，于是这里手动换源，将文件源更改如下：</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deb https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse
deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse
deb https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse
deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse
deb https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse
deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse
deb https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse
deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse
deb https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse
deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse
</code></pre></div></div>

<ol>
  <li>
    <p>更新源和软件：<code class="language-plaintext highlighter-rouge">sudo apt-get update &amp;&amp; sudo apt-get upgrade</code></p>
  </li>
  <li>
    <p>配置语言，需要支撑<code class="language-plaintext highlighter-rouge">UTF-8</code>：</p>
  </li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pldz@pldz-pc:~<span class="nv">$ </span>locale
<span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8
<span class="nv">LANGUAGE</span><span class="o">=</span>
<span class="nv">LC_CTYPE</span><span class="o">=</span><span class="s2">"en_US.UTF-8"</span>
<span class="nv">LC_NUMERIC</span><span class="o">=</span>zh_CN.UTF-8
<span class="nv">LC_TIME</span><span class="o">=</span>zh_CN.UTF-8
<span class="nv">LC_COLLATE</span><span class="o">=</span><span class="s2">"en_US.UTF-8"</span>
<span class="nv">LC_MONETARY</span><span class="o">=</span>zh_CN.UTF-8
<span class="nv">LC_MESSAGES</span><span class="o">=</span><span class="s2">"en_US.UTF-8"</span>
<span class="nv">LC_PAPER</span><span class="o">=</span>zh_CN.UTF-8
<span class="nv">LC_NAME</span><span class="o">=</span>zh_CN.UTF-8
<span class="nv">LC_ADDRESS</span><span class="o">=</span>zh_CN.UTF-8
<span class="nv">LC_TELEPHONE</span><span class="o">=</span>zh_CN.UTF-8
<span class="nv">LC_MEASUREMENT</span><span class="o">=</span>zh_CN.UTF-8
<span class="nv">LC_IDENTIFICATION</span><span class="o">=</span>zh_CN.UTF-8
<span class="nv">LC_ALL</span><span class="o">=</span>
pldz@pldz-pc:~<span class="err">$</span>
</code></pre></div></div>

<ol>
  <li>获取 GPG 秘钥：<code class="language-plaintext highlighter-rouge">sudo apt update &amp;&amp; sudo apt install curl -y</code>然后<code class="language-plaintext highlighter-rouge">sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg</code>，此时如果提示无法访问到网站，则添加 host：</li>
</ol>

<ul>
  <li>
    <ol>
      <li>访问 <code class="language-plaintext highlighter-rouge">https://tool.lu/ip/</code> 并输入域名 <code class="language-plaintext highlighter-rouge">raw.githubusercontent.com</code>，查询 ip 地址，这里查询到的是 <code class="language-plaintext highlighter-rouge">185.199.108.133</code></li>
    </ol>
  </li>
</ul>

<p><img src="/assets/pics/ROS2_CAR/2_get_ip_address.png" alt="IP地址查询" /></p>

<ul>
  <li>
    <ol>
      <li>修改 <code class="language-plaintext highlighter-rouge">sudo gedit /etc/hosts</code>文件,并手动添加 DNS 解析：</li>
    </ol>
  </li>
</ul>

<p><img src="/assets/pics/ROS2_CAR/2_add_ip_into_linux_host.png" alt="手动添加IP" /></p>

<ol>
  <li>
    <p>添加 ROS2 的仓库：<code class="language-plaintext highlighter-rouge">echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null</code></p>
  </li>
  <li>
    <p>更新源和软件：<code class="language-plaintext highlighter-rouge">sudo apt-get update &amp;&amp; sudo apt-get upgrade</code></p>
  </li>
  <li>
    <p>下载 ROS2 Foxy：<code class="language-plaintext highlighter-rouge">sudo apt install ros-foxy-desktop python3-argcomplete</code></p>
  </li>
  <li>
    <p>下载完成后下载 ROS2 开发工具：<code class="language-plaintext highlighter-rouge">sudo apt install ros-dev-tools</code></p>
  </li>
  <li>
    <p>将 ROS2 添加到环境变量：<code class="language-plaintext highlighter-rouge">sudo echo "source /opt/ros/foxy/setup.bash" &gt;&gt; ~/.bashrc</code></p>
  </li>
  <li>
    <p>激活环境变量验证安装：<code class="language-plaintext highlighter-rouge">source ~/.bashrc</code>，然后输入<code class="language-plaintext highlighter-rouge">ros2 run turtlesim turtlesim_node</code>如果能够看到小乌龟则代表成功</p>
  </li>
</ol>

<p><img src="/assets/pics/ROS2_CAR/2_ros2_turtlesim_demo.png" alt="ROS2 小乌龟例子" /></p>

<h1 id="12-运行-ros2-navi-例子">1.2 运行 ROS2 NAVI 例子</h1>

<h2 id="121-安装仿真的依赖项和软件">1.2.1 安装仿真的依赖项和软件</h2>

<blockquote>
  <p>参考内容</p>

  <p><a href="https://fishros.org.cn/forum/topic/303/ros2-%E5%9F%BA%E7%A1%80-navigation2%E5%AF%BC%E8%88%AA%E7%B3%BB%E7%BB%9F">[ROS2 基础] Navigation2 导航系统</a></p>

  <p><a href="https://zhuanlan.zhihu.com/p/526385552">《动手学 ROS2》10.10 通过 Nav2API 进行导航</a></p>

  <p><a href="https://www.ncnynl.com/archives/202110/4702.html">ROS2 与 Navigation2 入门教程-构建和安装 Nav2</a></p>
</blockquote>

<ol>
  <li>下载功能包：需要的功能包包括<code class="language-plaintext highlighter-rouge">turtlebot3</code>的模型和<code class="language-plaintext highlighter-rouge">cartographer</code>,以及<code class="language-plaintext highlighter-rouge">rviz2</code>和<code class="language-plaintext highlighter-rouge">gazebo</code>环境，其中的<code class="language-plaintext highlighter-rouge">gazebo</code>主要用于模拟真实的物理环境，<code class="language-plaintext highlighter-rouge">rviz2</code>是<code class="language-plaintext highlighter-rouge">ROS2</code>通讯的可视化工具</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>ros-foxy-turtlebot3<span class="k">*</span>
<span class="nb">sudo </span>apt <span class="nb">install </span>ros-foxy-cartographer

<span class="c"># 如果没有gazebo和rviz2的需要再次安装这两个软件</span>
<span class="nb">sudo </span>apt <span class="nb">install </span>ros-foxy-rviz2
<span class="nb">sudo </span>apt <span class="nb">install </span>ros-foxy-gazebo<span class="k">*</span>
</code></pre></div></div>

<ol>
  <li>
    <p>在运行仿真环境的时候，有时候会卡住在 gazebo 打开的界面，gazebo 初始化打开时候是会连接网络下载模型库,否则可能会出现<strong>打开了环境，但是机器人一直在缩小的情况</strong></p>
  </li>
  <li>
    <p>到 gazebo 的 github 官方网页: <a href="https://github.com/osrf/gazebo_models">osrf/gazebo_models</a>，下载全部模型为 zip 文件</p>
  </li>
</ol>

<p><img src="/assets/pics/ROS2_CAR/2_gazebo_models_repo.png" alt="gazebo模型仓库" /></p>

<ol>
  <li>解压 zip 文件夹并重命名为<code class="language-plaintext highlighter-rouge">models</code>，然后拷贝到<code class="language-plaintext highlighter-rouge">~/.gazebo</code>的目录下</li>
</ol>

<p><img src="/assets/pics/ROS2_CAR/2_put_gazebo_models.png" alt="移动gazebo模型" /></p>

<h2 id="122-建立导航的地图mapping">1.2.2 建立导航的地图(Mapping)</h2>

<ol>
  <li>启动导航的物理仿真环境：创建一个启动 gazebo 物理仿真环境的脚本，比方说这里的<code class="language-plaintext highlighter-rouge">naviWorld.sh</code>（赋予可执行权限）</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># naviWorld.sh</span>
<span class="nb">export </span><span class="nv">TURTLEBOT3_MODEL</span><span class="o">=</span>burger
ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py
</code></pre></div></div>

<p><img src="/assets/pics/ROS2_CAR/2_run_gazebo.png" alt="启动trutlebot3的gazebo物理环境" /></p>

<p>第一次启动，可能会出现一直在等待的状态，并且提示<code class="language-plaintext highlighter-rouge">Spawn service failed. Exiting.</code>， 错误的解决办法可以参考 1.3.1 的内容，杀死 gazebo 再次启动即可</p>

<ol>
  <li>启动建图指令：创建一个<code class="language-plaintext highlighter-rouge">RVIZ2</code>环境用于显示小车的状态，并建立起导航的地图，例如这里的<code class="language-plaintext highlighter-rouge">mapping.sh</code>（赋予可执行权限）：</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># mapping.sh</span>
<span class="nb">export </span><span class="nv">TURTLEBOT3_MODEL</span><span class="o">=</span>burger
ros2 launch turtlebot3_cartographer cartographer.launch.py use_sim_time:<span class="o">=</span>True
</code></pre></div></div>

<p>启动成功之后，会出现 rviz2 的界面：</p>

<p><img src="/assets/pics/ROS2_CAR/2_gazebo_rviz2_map.png" alt="建图的rviz2画面" /></p>

<ol>
  <li>控制机器人移动生成地图文件，输入命令：<code class="language-plaintext highlighter-rouge">ros2 run turtlebot3_teleop teleop_keyboard</code>启动键盘控制小车运动的节点，在此之前可以指定小车的类型：<code class="language-plaintext highlighter-rouge">export TURTLEBOT3_MODEL=burger</code>，例如下面的 telep.sh</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># telep.sh</span>
<span class="nb">export </span><span class="nv">TURTLEBOT3_MODEL</span><span class="o">=</span>burger
ros2 run turtlebot3_teleop teleop_keyboard
</code></pre></div></div>

<p><img src="/assets/pics/ROS2_CAR/2_generate_map.png" alt="控制机器人运动生成大概的地图文件" /></p>

<ol>
  <li>完成建图，生成导航的地图文件和信息，通过<code class="language-plaintext highlighter-rouge">teleop_keyboard</code>打开的终端控制机器人移动，等待图片大部分被扫描成功后，输入命令行调用<code class="language-plaintext highlighter-rouge">map_server</code>存储地图，其中的地图名称为 test，之后会生成以该名字命名的<code class="language-plaintext highlighter-rouge">.pgm</code>/<code class="language-plaintext highlighter-rouge">yaml</code>等文件：<code class="language-plaintext highlighter-rouge">ros2 run nav2_map_server map_saver_cli -f testMap</code></li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pldz@pldz-pc:/mnt/hgfs/VMware/ROS2_NAVI/1_Chapter/code<span class="nv">$ </span>ros2 run nav2_map_server map_saver_cli <span class="nt">-f</span> testMap
<span class="o">[</span>INFO] <span class="o">[</span>1684547384.636100069] <span class="o">[</span>map_saver]:
	map_saver lifecycle node launched.
	Waiting on external lifecycle transitions to activate
	See https://design.ros2.org/articles/node_lifecycle.html <span class="k">for </span>more information.
<span class="o">[</span>INFO] <span class="o">[</span>1684547384.636296866] <span class="o">[</span>map_saver]: Creating
<span class="o">[</span>INFO] <span class="o">[</span>1684547384.636480318] <span class="o">[</span>map_saver]: Configuring
<span class="o">[</span>INFO] <span class="o">[</span>1684547384.638094058] <span class="o">[</span>map_saver]: Saving map from <span class="s1">'map'</span> topic to <span class="s1">'testMap'</span> file
<span class="o">[</span>WARN] <span class="o">[</span>1684547384.638189556] <span class="o">[</span>map_saver]: Free threshold unspecified. Setting it to default value: 0.250000
<span class="o">[</span>WARN] <span class="o">[</span>1684547384.638247635] <span class="o">[</span>map_saver]: Occupied threshold unspecified. Setting it to default value: 0.650000
<span class="o">[</span>WARN] <span class="o">[</span>map_io]: Image format unspecified. Setting it to: pgm
<span class="o">[</span>INFO] <span class="o">[</span>map_io]: Received a 125 X 119 map @ 0.05 m/pix
<span class="o">[</span>INFO] <span class="o">[</span>map_io]: Writing map occupancy data to testMap.pgm
<span class="o">[</span>INFO] <span class="o">[</span>map_io]: Writing map metadata to testMap.yaml
<span class="o">[</span>INFO] <span class="o">[</span>map_io]: Map saved
<span class="o">[</span>INFO] <span class="o">[</span>1684547384.984216612] <span class="o">[</span>map_saver]: Map saved successfully
<span class="o">[</span>INFO] <span class="o">[</span>1684547384.985701952] <span class="o">[</span>map_saver]: Destroying
pldz@pldz-pc:/mnt/hgfs/VMware/ROS2_NAVI/1_Chapter/code<span class="nv">$ </span><span class="nb">ls
</span>mapping.sh  naviWorld.sh  simNavi2.sh  telep.sh  testMap.pgm  testMap.yaml
</code></pre></div></div>

<h2 id="123-使用地图文件进行导航">1.2.3 使用地图文件进行导航</h2>

<ol>
  <li>当有了地图文件之后，就可以根据地图文件，进行小车的导航仿真，这里启动<code class="language-plaintext highlighter-rouge">turtlebot3</code>的物理仿真环境，也就是建图时候的<code class="language-plaintext highlighter-rouge">gazebo</code>，实际上也就是之前的<code class="language-plaintext highlighter-rouge">naviWorld.sh</code>：</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">TURTLEBOT3_MODEL</span><span class="o">=</span>burger
ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py
</code></pre></div></div>

<ol>
  <li>有了物理仿真环境之后，再加载地图进行导航的仿真，<strong>其中的<code class="language-plaintext highlighter-rouge">map:</code>后面的参数为之前的<code class="language-plaintext highlighter-rouge">map_server</code>生成的地图文件位置</strong>，创建导航的脚本<code class="language-plaintext highlighter-rouge">simNavi2.sh</code>，此时会提示<code class="language-plaintext highlighter-rouge">Frame map does not exit.</code>是因为没有给出起始的位置建立<code class="language-plaintext highlighter-rouge">odom</code>和<code class="language-plaintext highlighter-rouge">map</code>直接的计算:</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">TURTLEBOT3_MODEL</span><span class="o">=</span>burger
ros2 launch turtlebot3_navigation2 navigation2.launch.py use_sim_time:<span class="o">=</span><span class="nb">true </span>map:<span class="o">=</span>testMap.yaml
</code></pre></div></div>

<p><img src="/assets/pics/ROS2_CAR/2_run_navi.png" alt="启动RVIZ导航" /></p>

<ol>
  <li>给出起始点：在<code class="language-plaintext highlighter-rouge">rviz2</code>工具上拖动<code class="language-plaintext highlighter-rouge">2D Pose Estimate</code>，给出小车位置，完成坐标的变换：</li>
</ol>

<p><img src="/assets/pics/ROS2_CAR/2_navi_demo.gif" alt="RVIZ2启动导航仿真" /></p>

<h2 id="124-可能出现的问题汇总持续更新">1.2.4 可能出现的问题汇总（持续更新）</h2>

<h2 id="1241-ros2-gazebospawn-service-failed-exiting">1.2.4.1 ROS2 gazebo：Spawn service failed. Exiting.</h2>

<ul>
  <li>错误的提示如下：</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>spawn_entity.py-4] <span class="o">[</span>INFO] <span class="o">[</span>1684419460.753634677] <span class="o">[</span>spawn_entity]: Loading entity XML from file /opt/ros/foxy/share/turtlebot3_gazebo/models/turtlebot3_burger/model.sdf
<span class="o">[</span>spawn_entity.py-4] <span class="o">[</span>INFO] <span class="o">[</span>1684419460.755174212] <span class="o">[</span>spawn_entity]: Waiting <span class="k">for </span>service /spawn_entity, <span class="nb">timeout</span> <span class="o">=</span> 30
<span class="o">[</span>spawn_entity.py-4] <span class="o">[</span>INFO] <span class="o">[</span>1684419460.755469679] <span class="o">[</span>spawn_entity]: Waiting <span class="k">for </span>service /spawn_entity
<span class="o">[</span>spawn_entity.py-4] <span class="o">[</span>ERROR] <span class="o">[</span>1684419490.844590431] <span class="o">[</span>spawn_entity]: Service %s/spawn_entity unavailable. Was Gazebo started with GazeboRosFactory?
<span class="o">[</span>spawn_entity.py-4] <span class="o">[</span>ERROR] <span class="o">[</span>1684419490.844908061] <span class="o">[</span>spawn_entity]: Spawn service failed. Exiting.
<span class="o">[</span>ERROR] <span class="o">[</span>spawn_entity.py-4]: process has died <span class="o">[</span>pid 8128, <span class="nb">exit </span>code 1, cmd <span class="s1">'/opt/ros/foxy/lib/gazebo_ros/spawn_entity.py -entity burger -file /opt/ros/foxy/share/turtlebot3_gazebo/models/turtlebot3_burger/model.sdf -x -2.0 -y -0.5 -z 0.01 --ros-args'</span><span class="o">]</span><span class="nb">.</span>
</code></pre></div></div>

<ul>
  <li>尝试解决办法：</li>
</ul>

<ol>
  <li>
    <p>杀死全部的<code class="language-plaintext highlighter-rouge">gazebo server</code>在命令行输入：<code class="language-plaintext highlighter-rouge">lsof -i</code>查看是否还有在运行的<code class="language-plaintext highlighter-rouge">gzserver</code>，记录程序的 PID 号，对输入<code class="language-plaintext highlighter-rouge">kill -9 &lt;pid号&gt;</code>杀死程序</p>
  </li>
  <li>
    <p>再次输入脚本指令打开<code class="language-plaintext highlighter-rouge">gazebo</code></p>
  </li>
</ol>

<h2 id="1242-map_saver-failed-to-spin-map-subscription">1.2.4.2 [map_saver]: Failed to spin map subscription</h2>

<ul>
  <li>错误的提示如下：</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pldz@pldz-pc:/mnt/hgfs/VMware/ROS2_NAVI/1_Chapter/code<span class="nv">$ </span>rerver map_saver_cli <span class="nt">-os2</span> run nav2_map_server map_saver_cli <span class="nt">-f</span> testMap
<span class="o">[</span>INFO] <span class="o">[</span>1684547337.249208762] <span class="o">[</span>map_saver]:
	map_saver lifecycle node launched.
	Waiting on external lifecycle transitions to activate
	See https://design.ros2.org/articles/node_lifecycle.html <span class="k">for </span>more information.
<span class="o">[</span>INFO] <span class="o">[</span>1684547337.249693695] <span class="o">[</span>map_saver]: Creating
<span class="o">[</span>INFO] <span class="o">[</span>1684547337.250079483] <span class="o">[</span>map_saver]: Configuring
<span class="o">[</span>INFO] <span class="o">[</span>1684547337.256994454] <span class="o">[</span>map_saver]: Saving map from <span class="s1">'map'</span> topic to <span class="s1">'testMap'</span> file
<span class="o">[</span>WARN] <span class="o">[</span>1684547337.257098278] <span class="o">[</span>map_saver]: Free threshold unspecified. Setting it to default value: 0.250000
<span class="o">[</span>WARN] <span class="o">[</span>1684547337.257179799] <span class="o">[</span>map_saver]: Occupied threshold unspecified. Setting it to default value: 0.650000
<span class="o">[</span>ERROR] <span class="o">[</span>1684547339.261336746] <span class="o">[</span>map_saver]: Failed to spin map subscription
<span class="o">[</span>INFO] <span class="o">[</span>1684547339.262984556] <span class="o">[</span>map_saver]: Destroying
</code></pre></div></div>

<ul>
  <li>尝试解决办法，造成的原因是因为<code class="language-plaintext highlighter-rouge">map_server</code>没有办法找到<code class="language-plaintext highlighter-rouge">/map</code>的话题来订阅，可能是之前你在打开<code class="language-plaintext highlighter-rouge">RVIZ2</code>或者其他内容时，没有启动完全，尝试退出终端，再次启动，其中之后输入<code class="language-plaintext highlighter-rouge">ros2 topic list | grep map</code>查看是否有<code class="language-plaintext highlighter-rouge">/map</code>的话题，有则可以再次输入保存地图文件的命令。</li>
</ul>]]></content><author><name>pldz9</name></author><category term="ROS2_CAR" /><summary type="html"><![CDATA[1.1 Ubuntu20.04 安装 ROS2(Foxy)]]></summary></entry><entry><title type="html">1 Docker 搭建 ROS2 嵌入式运行环境</title><link href="http://localhost:4000/ros2_car/2023-06-01-1_1_docker%E5%91%BD%E4%BB%A4%E7%86%9F%E6%82%89.html" rel="alternate" type="text/html" title="1 Docker 搭建 ROS2 嵌入式运行环境" /><published>2023-06-01T00:00:00+08:00</published><updated>2023-06-01T00:00:00+08:00</updated><id>http://localhost:4000/ros2_car/1_1_docker%E5%91%BD%E4%BB%A4%E7%86%9F%E6%82%89</id><content type="html" xml:base="http://localhost:4000/ros2_car/2023-06-01-1_1_docker%E5%91%BD%E4%BB%A4%E7%86%9F%E6%82%89.html"><![CDATA[<h1 id="11-安装-docker">1.1 安装 docker</h1>

<h1 id="12-docker-安装并配置-ubuntu20">1.2 docker 安装并配置 ubuntu20</h1>

<ol>
  <li>
    <p>拉取 docker 镜像：<code class="language-plaintext highlighter-rouge">sudo docker pull ubuntu:20.04</code></p>
  </li>
  <li>
    <p>启动镜像： <code class="language-plaintext highlighter-rouge">docker run --rm -it --network=host ubuntu:20.04</code></p>
  </li>
</ol>

<blockquote>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">docker run</code> 是用于运行容器的 Docker 命令。</li>
    <li><code class="language-plaintext highlighter-rouge">--rm</code> 标志用于在容器停止后自动删除容器。这可以确保每次运行容器时都会清理掉容器，以避免产生无用的容器。</li>
    <li><code class="language-plaintext highlighter-rouge">-it</code> 是两个标志的结合。<code class="language-plaintext highlighter-rouge">-i</code> 标志表示保持标准输入(stdin)打开，使得你可以与容器进行交互。<code class="language-plaintext highlighter-rouge">-t</code> 标志表示为容器分配一个伪终端(pseudo-TTY)，以便你可以在命令行中与容器进行交互。</li>
    <li><code class="language-plaintext highlighter-rouge">--network=host</code> 标志用于将容器与主机共享网络命名空间。这意味着容器将与主机共享网络接口，可以访问主机上的网络资源。</li>
    <li><code class="language-plaintext highlighter-rouge">ubuntu:20.04</code> 是指定要运行的容器镜像。在这个例子中，使用的是基于 Ubuntu 20.04 的镜像</li>
  </ul>
</blockquote>

<ol>
  <li>docker 内更新这样才能使用 apt-get 安装软件:<code class="language-plaintext highlighter-rouge">apt-get update</code></li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jeston@jeston-desktop:~<span class="nv">$ </span><span class="nb">sudo </span>docker run <span class="nt">--rm</span> <span class="nt">-it</span> <span class="nt">--network</span><span class="o">=</span>host ubuntu:20.04
root@jeston-desktop:/# <span class="nb">uname</span> <span class="nt">-a</span>
Linux jeston-desktop 4.9.253-tegra <span class="c">#1 SMP PREEMPT Sat Feb 19 08:59:22 PST 2022 aarch64 aarch64 aarch64 GNU/Linux</span>
root@jeston-desktop:/# apt-get update
</code></pre></div></div>

<ol>
  <li>
    <p>安装基本软件：<code class="language-plaintext highlighter-rouge">apt-get install vim net-tools iputils-ping lsof</code></p>
  </li>
  <li>
    <p>学会保存 docker 的状态：<a href="https://www.docker.org.cn/book/docker/docer-save-changes-10.html">保存对容器的修改</a></p>
  </li>
</ol>

<ul>
  <li>新开一个终端获取 docker 的 id:</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker ps <span class="nt">-l</span>
</code></pre></div></div>

<p><img src="/assets/pics/ROS2_CAR/1_get_docker_container_id.png" alt="1_查看docker容器的id" /></p>

<ul>
  <li>根据 id 进行 commit, 如果 commit 的内容和原来的 docker 的 tag 一致，那么会替换掉之前 docker 的内容，达到保存的效果</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker commit &lt;commit <span class="nb">id</span><span class="o">&gt;</span> &lt;tag&gt;
</code></pre></div></div>

<p><img src="/assets/pics/ROS2_CAR/1_save_docker_image.png" alt="1_保存docker镜像" /></p>

<h1 id="13-docker-内-ubuntu2004-安装-ros2-foxy">1.3 docker 内 Ubuntu20.04 安装 ros2-foxy</h1>

<ol>
  <li>启动 docker 内的 Ubuntu20.04:</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--rm</span> <span class="nt">-it</span> <span class="nt">--network</span><span class="o">=</span>host ubuntu:20.04
</code></pre></div></div>

<ol>
  <li>输入 locale 查看是否支持 utf-8, 如果不支持要安装:</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt update <span class="o">&amp;&amp;</span> apt <span class="nb">install </span>locales <span class="o">&amp;&amp;</span> locale-gen en_US en_US.UTF-8 <span class="o">&amp;&amp;</span> update-locale <span class="nv">LC_ALL</span><span class="o">=</span>en_US.UTF-8 <span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8 <span class="o">&amp;&amp;</span> <span class="nb">export </span><span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8
</code></pre></div></div>

<ol>
  <li>添加 ROS2 GPG 密钥：如果出现 403 问题 查看<a href="https://blog.csdn.net/qq_42727752/article/details/130277029">1 ROS2 介绍安装与快速体验</a></li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt update <span class="o">&amp;&amp;</span> apt <span class="nb">install </span>curl <span class="nt">-y</span> <span class="o">&amp;&amp;</span> curl <span class="nt">-sSL</span> https://raw.githubusercontent.com/ros/rosdistro/master/ros.key <span class="nt">-o</span> /usr/share/keyrings/ros-archive-keyring.gpg
</code></pre></div></div>

<ol>
  <li>添加 ros 源：</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"deb [arch=</span><span class="si">$(</span>dpkg <span class="nt">--print-architecture</span><span class="si">)</span><span class="s2"> signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu </span><span class="si">$(</span><span class="nb">.</span> /etc/os-release <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="nv">$UBUNTU_CODENAME</span><span class="si">)</span><span class="s2"> main"</span> | <span class="nb">tee</span> /etc/apt/sources.list.d/ros2.list <span class="o">&gt;</span> /dev/null
</code></pre></div></div>

<ol>
  <li>开始安装 ros2-foxy:</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apt-get update <span class="o">&amp;&amp;</span> apt-get upgrade <span class="o">&amp;&amp;</span> apt-get <span class="nb">install </span>ros-foxy-desktop
</code></pre></div></div>

<ol>
  <li>安装完成之后, 新建一个终端，找到当前 docker 的 id 之后，保存 docker 镜像状态</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>]]></content><author><name>pldz9</name></author><category term="ROS2_CAR" /><summary type="html"><![CDATA[1.1 安装 docker 1.2 docker 安装并配置 ubuntu20 拉取 docker 镜像：sudo docker pull ubuntu:20.04 启动镜像： docker run --rm -it --network=host ubuntu:20.04 docker run 是用于运行容器的 Docker 命令。 --rm 标志用于在容器停止后自动删除容器。这可以确保每次运行容器时都会清理掉容器，以避免产生无用的容器。 -it 是两个标志的结合。-i 标志表示保持标准输入(stdin)打开，使得你可以与容器进行交互。-t 标志表示为容器分配一个伪终端(pseudo-TTY)，以便你可以在命令行中与容器进行交互。 --network=host 标志用于将容器与主机共享网络命名空间。这意味着容器将与主机共享网络接口，可以访问主机上的网络资源。 ubuntu:20.04 是指定要运行的容器镜像。在这个例子中，使用的是基于 Ubuntu 20.04 的镜像 docker 内更新这样才能使用 apt-get 安装软件:apt-get update jeston@jeston-desktop:~$ sudo docker run --rm -it --network=host ubuntu:20.04 root@jeston-desktop:/# uname -a Linux jeston-desktop 4.9.253-tegra #1 SMP PREEMPT Sat Feb 19 08:59:22 PST 2022 aarch64 aarch64 aarch64 GNU/Linux root@jeston-desktop:/# apt-get update 安装基本软件：apt-get install vim net-tools iputils-ping lsof 学会保存 docker 的状态：保存对容器的修改 新开一个终端获取 docker 的 id: sudo docker ps -l 根据 id 进行 commit, 如果 commit 的内容和原来的 docker 的 tag 一致，那么会替换掉之前 docker 的内容，达到保存的效果 sudo docker commit &lt;commit id&gt; &lt;tag&gt; 1.3 docker 内 Ubuntu20.04 安装 ros2-foxy 启动 docker 内的 Ubuntu20.04: docker run --rm -it --network=host ubuntu:20.04 输入 locale 查看是否支持 utf-8, 如果不支持要安装: apt update &amp;&amp; apt install locales &amp;&amp; locale-gen en_US en_US.UTF-8 &amp;&amp; update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 &amp;&amp; export LANG=en_US.UTF-8 添加 ROS2 GPG 密钥：如果出现 403 问题 查看1 ROS2 介绍安装与快速体验 apt update &amp;&amp; apt install curl -y &amp;&amp; curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg 添加 ros 源： echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null 开始安装 ros2-foxy: apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get install ros-foxy-desktop 安装完成之后, 新建一个终端，找到当前 docker 的 id 之后，保存 docker 镜像状态]]></summary></entry><entry><title type="html">4 MircoROS 初步体验</title><link href="http://localhost:4000/ros2_micro/2023-04-04-4_1_MicroROS%E5%88%9D%E6%AD%A5%E4%BD%93%E9%AA%8C.html" rel="alternate" type="text/html" title="4 MircoROS 初步体验" /><published>2023-04-04T00:00:00+08:00</published><updated>2023-04-04T00:00:00+08:00</updated><id>http://localhost:4000/ros2_micro/4_1_MicroROS%E5%88%9D%E6%AD%A5%E4%BD%93%E9%AA%8C</id><content type="html" xml:base="http://localhost:4000/ros2_micro/2023-04-04-4_1_MicroROS%E5%88%9D%E6%AD%A5%E4%BD%93%E9%AA%8C.html"><![CDATA[<blockquote>
  <p>这里还是强烈推荐使用 ros2 humble 也就是 Ubuntu22.04 的默认版本，如果大家是其他版本的，建议使用 docker 来模拟 micro ros 环境<code class="language-plaintext highlighter-rouge">sudo docker run -it --net=host -v /dev:/dev --privileged ros:humble</code></p>
</blockquote>

<blockquote>
  <p>参考内容
<a href="https://micro.ros.org/docs/tutorials/core/overview/">micro-ROS 官网教程</a></p>
</blockquote>

<p>从第一个例子来看，应该提前了解的一些基础概念</p>

<p>microROS： microROS 是一个适配于微控制器的 ROS 2 版本，它实现了 ROS 2 的一些核心功能，但是专门为内存和存储资源非常有限的环境优化。它支持多种微控制器架构和 RTOS（实时操作系统），允许这些设备能够在更广泛的 ROS 2 生态系统中进行通信和协作。</p>

<p>microROS Firmware： microROS Firmware 指的是安装在微控制器上的具体固件，这固件包含了 microROS 的客户端库以及为特定微控制器或硬件平台定制的配置。这个固件使得微控制器能够运行 microROS 应用程序，处理如传感器数据收集、执行器控制等任务，并通过 microROS Agent 与 ROS 2 网络中的其他节点进行交互。</p>

<p>microROS Agent： microROS Agent 是一个桥接软件，它允许微控制器（运行 microROS）与运行标凈 ROS 2 的更大的计算系统进行通信。这种通信通常通过网络如串行端口、UDP 或其他通信协议实现。microROS Agent 在较大的系统上运行，作为一个节点接收和发送消息，充当微控制器和其他 ROS 2 实体之间的中介。</p>

<h1 id="41-在-linux-平台上快速体验-mircoros">4.1 在 Linux 平台上快速体验 MircoROS</h1>

<p>Tips: 如果你的 rosdep 是有效的话 这个例子是很好跑的, 科学上网很重要，或者采用国内大神的<code class="language-plaintext highlighter-rouge">rosdepc</code> <a href="https://www.guyuehome.com/35408">参考</a></p>

<blockquote>
  <p>参考内容
<a href="https://micro.ros.org/docs/tutorials/core/first_application_linux/">First micro-ROS Application on Linux</a>&gt;</p>
</blockquote>

<h2 id="411-下载官网的代码">4.1.1 下载官网的代码</h2>

<p>跟着官网一起来(截止 2024.04.18 这些步骤都是有效的)</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Source the ROS 2 installation
</span>
<span class="n">source</span> <span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="n">ros</span><span class="o">/</span><span class="err">$</span><span class="n">ROS_DISTRO</span><span class="o">/</span><span class="n">setup</span><span class="p">.</span><span class="n">bash</span>

<span class="c1"># Create a workspace and download the micro-ROS tools
</span>
<span class="n">mkdir</span> <span class="n">microros_ws</span>
<span class="n">cd</span> <span class="n">microros_ws</span>
<span class="n">git</span> <span class="n">clone</span> <span class="o">-</span><span class="n">b</span> <span class="err">$</span><span class="n">ROS_DISTRO</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="p">.</span><span class="n">com</span><span class="o">/</span><span class="n">micro</span><span class="o">-</span><span class="n">ROS</span><span class="o">/</span><span class="n">micro_ros_setup</span><span class="p">.</span><span class="n">git</span> <span class="n">src</span><span class="o">/</span><span class="n">micro_ros_setup</span>



<span class="c1"># Update dependencies using rosdep
# 老版本的ros建议: rosdepc update --include-eol-distros
</span><span class="n">sudo</span> <span class="n">apt</span> <span class="n">update</span> <span class="o">&amp;&amp;</span> <span class="n">rosdep</span> <span class="n">update</span> <span class="o">--</span><span class="n">include</span><span class="o">-</span><span class="n">eol</span><span class="o">-</span><span class="n">distros</span>
<span class="n">rosdep</span> <span class="n">install</span> <span class="o">--</span><span class="k">from</span><span class="o">-</span><span class="n">paths</span> <span class="n">src</span> <span class="o">--</span><span class="n">ignore</span><span class="o">-</span><span class="n">src</span> <span class="o">-</span><span class="n">y</span>

<span class="c1"># 如果说是跑官方例子的话是必须的 不然会出现报错
</span><span class="sh">'''</span><span class="s">
ERROR: your rosdep installation has not been initialized yet.  Please run:

    sudo rosdep init
    rosdep update
</span><span class="sh">'''</span>

<span class="c1"># Install pip
# sudo apt-get install python3-pip
</span>
<span class="c1"># Build micro-ROS tools and source them
</span><span class="n">colcon</span> <span class="n">build</span>
<span class="n">source</span> <span class="n">install</span><span class="o">/</span><span class="n">local_setup</span><span class="p">.</span><span class="n">bash</span>
</code></pre></div></div>

<p><img src="/assets/pics/ROS2_MICRO/4_mirco_ros_project.png" alt="快速项目" /></p>

<ul>
  <li>如果出现下面的错误，就手动安装依赖性，例如下下面的<code class="language-plaintext highlighter-rouge">sudo apt-get install ros-$ROS_DISTRO-xxx</code></li>
  <li>如果手动安装还是解决不了，很大可能你不是<code class="language-plaintext highlighter-rouge">ros-humble</code>造成的，因为在<code class="language-plaintext highlighter-rouge">rosdep update</code>时候可能被<code class="language-plaintext highlighter-rouge">Skip end-of-life distro "foxy"</code>或者是其他版本那么，需要<code class="language-plaintext highlighter-rouge">rosdepc update --include-eol-distros</code>了</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ERROR: the following packages/stacks could not have their rosdep keys resolved
to system dependencies:
rclc_lifecycle: Cannot locate rosdep definition <span class="k">for</span> <span class="o">[</span>osrf_testing_tools_cpp]
test_msgs: Cannot locate rosdep definition <span class="k">for</span> <span class="o">[</span>test_interface_files]
rclc_parameter: Cannot locate rosdep definition <span class="k">for</span> <span class="o">[</span>osrf_testing_tools_cpp]
rclc: Cannot locate rosdep definition <span class="k">for</span> <span class="o">[</span>osrf_testing_tools_cpp]
Continuing to <span class="nb">install </span>resolvable dependencies...
</code></pre></div></div>

<p><img src="/assets/pics/ROS2_MICRO/4_fix_rosdep_issue.jpg" alt="rosdep问题解决" /></p>

<h2 id="411-创建-mirco-ros-fireware-workspace">4.1.1 创建 mirco-ros fireware workspace</h2>

<ul>
  <li>
    <p>fireware workspace 是做什么的，我在这一步能不能跳过啊？ 问问万能的 GPT： firmware workspace 是一个特殊的目录结构和工作区，用于开发和构建特定于微控制器的固件。这个工作区包括了所有必要的组件来创建和配置微控制器固件，以便它能与 ROS 2 系统兼容和交互。</p>

    <ul>
      <li>
        <p>在这个工作区中，Micro-ROS 的客户端库被配置和编译为固件。这包括生成必要的通信接口和适应层，使微控制器能够通过适当的通信协议（如 UART、TCP/IP 等）与 ROS 2 系统通信。</p>
      </li>
      <li>
        <p>包含 Micro-ROS 客户端库：
Micro-ROS 客户端库是一个适配层，它提供了与 ROS 2 兼容的 API，但优化了内存和处理能力的限制，适用于微控制器。</p>
      </li>
      <li>
        <p>集成外部库和驱动程序：允许开发者集成硬件特定的驱动程序和中间件，例如用于传感器数据获取和执行器控制的库。</p>
      </li>
      <li>
        <p>构建和部署工具：提供工具和脚本来构建和部署固件到目标硬件，这些工具通常与微控制器的编程环境（如 ARM Mbed、ESP-IDF 等）集成。</p>
      </li>
      <li>
        <p>调试和测试：这个工作区也支持固件的调试和测试，这对于确保在资源受限的环境中运行正常至关重要。</p>
      </li>
      <li>
        <p>这一步是不能够省略的</p>
      </li>
    </ul>
  </li>
  <li>
    <p>动手就是干：</p>
  </li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source install</span>/local_setup.bash <span class="o">&amp;&amp;</span> ros2 run micro_ros_setup create_firmware_ws.sh host
</code></pre></div></div>

<p>当命令执行完毕后，工作区中应该存在一个名为 firmware 的文件夹，并且 这个步骤的目的是下载一组 micro-ROS 应用程序，到 src/uros/micro-ROS-demos/rclc 路径下，这个 repo 再 GitHub 也是有的，如果你没有出现这两个文件夹 那说明 你这一步操作失败了，用<code class="language-plaintext highlighter-rouge">tree -L 2 -I 'install|log'</code>查看</p>

<p><img src="/assets/pics/ROS2_MICRO/4_build_fireware_ws.png" alt="build_fireware_ws" /></p>

<p>如果你已经有了上面这些文件夹的内容，那么可以开始构建这个 mirco-ros 的全部依赖项了</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source install</span>/local_setup.bash <span class="o">&amp;&amp;</span> ros2 run micro_ros_setup build_firmware.sh
</code></pre></div></div>

<p>如果 build 成功后大概是有 38 个功能包安装好了的:</p>

<p><img src="/assets/pics/ROS2_MICRO/4_build_fireware_deps.png" alt="build_fireware_deps" /></p>

<blockquote>
  <p>解释一下这个 micro-ROS-demos，里面的代码都包括两个文件：</p>

  <ul>
    <li>main.c：应用程序的逻辑。</li>
    <li>CMakeLists.txt：编译应用程序的脚本。
如果我们想创建自定义应用程序，就在这个文件夹下创建一个叫<my_app>的文件夹，其中包含上述两个文件。然后还需要跑到 `src/uros/micro-ROS-demos/rclc/CMakeLists.txt` 中注册，通过添加以下行：`export_executable(<my_app>)`这样注册进来，好了 废话不多说用到再看</my_app></my_app></li>
  </ul>
</blockquote>

<h2 id="413-体验-microros-的发布和订阅">4.1.3 体验 MicroROS 的发布和订阅</h2>

<p>做完上面两步，是时候来体验<code class="language-plaintext highlighter-rouge">mirco-ros</code>的发布和订阅了，其实也就是顺着官网的教程继续往下走,但是官网的<code class="language-plaintext highlighter-rouge">ping_pong</code>的例子太麻烦了，我们这之间上后续的发布和订阅的的例子，<strong>但是这个例子的条件是你已经走完了上面那一步，有了那些依赖项</strong></p>

<blockquote>
  <p>参考内容
<a href="https://micro.ros.org/docs/tutorials/programming_rcl_rclc/pub_sub/">Publishers and subscribers</a></p>
</blockquote>

<ol>
  <li>创建两个 demo 的源文件夹, 然后就朝着里面的文件进行填内容</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir mkdir </span>src/demo_pub <span class="o">&amp;&amp;</span> <span class="nb">touch </span>src/demo_pub/main.c <span class="o">&amp;&amp;</span> <span class="nb">touch </span>src/demo_pub/CMakeLists.txt <span class="o">&amp;&amp;</span> <span class="nb">mkdir </span>src/demo_sub <span class="o">&amp;&amp;</span> <span class="nb">touch </span>src/demo_sub/main.c <span class="o">&amp;&amp;</span> <span class="nb">touch </span>src/demo_sub/CMakeLists.txt
</code></pre></div></div>

<p><img src="/assets/pics/ROS2_MICRO/4_create_mirco_ros_linux_demo.png" alt="1_创建Linux发布订阅demo" /></p>

<ol>
  <li>直接上能跑的发布者代码，注释在代码里，了解基本的内容即可，不得不说现在的 GPT 太强了：</li>
</ol>

<ul>
  <li>发布者的 main.c <a href="https://github.com/micro-ROS/micro-ROS-demos/blob/humble/rclc/int32_publisher/main.c">demo_pub/main.c</a></li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;rcl/rcl.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;rcl/error_handling.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;rclc/rclc.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;rclc/executor.h&gt;</span><span class="cp">
</span>
<span class="cp">#include</span> <span class="cpf">&lt;std_msgs/msg/int32.h&gt;</span><span class="cp">
</span>
<span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span>
<span class="c1">// 宏定义用于错误检查，如果发生错误则输出并退出或继续</span>
<span class="cp">#define RCCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){printf("Failed status on line %d: %d. Aborting.\n",__LINE__,(int)temp_rc); return 1;}}
#define RCSOFTCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){printf("Failed status on line %d: %d. Continuing.\n",__LINE__,(int)temp_rc);}}
</span>
<span class="n">rcl_publisher_t</span> <span class="n">publisher</span><span class="p">;</span> <span class="c1">// 全局发布者对象</span>
<span class="n">std_msgs__msg__Int32</span> <span class="n">msg</span><span class="p">;</span> <span class="c1">// 整数类型的消息</span>

<span class="c1">// 定时器回调函数，每次调用时发布一个消息，并增加计数</span>
<span class="kt">void</span> <span class="nf">timer_callback</span><span class="p">(</span><span class="n">rcl_timer_t</span> <span class="o">*</span> <span class="n">timer</span><span class="p">,</span> <span class="kt">int64_t</span> <span class="n">last_call_time</span><span class="p">)</span>
<span class="p">{</span>
    <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">last_call_time</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">timer</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">RCSOFTCHECK</span><span class="p">(</span><span class="n">rcl_publish</span><span class="p">(</span><span class="o">&amp;</span><span class="n">publisher</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">msg</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">));</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Sent: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">msg</span><span class="p">.</span><span class="n">data</span><span class="p">);</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">data</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">rcl_allocator_t</span> <span class="n">allocator</span> <span class="o">=</span> <span class="n">rcl_get_default_allocator</span><span class="p">();</span> <span class="c1">// 获取默认分配器</span>
    <span class="n">rclc_support_t</span> <span class="n">support</span><span class="p">;</span>

    <span class="c1">// 初始化支持结构</span>
    <span class="n">RCCHECK</span><span class="p">(</span><span class="n">rclc_support_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">support</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">allocator</span><span class="p">));</span>

    <span class="c1">// 创建节点</span>
    <span class="n">rcl_node_t</span> <span class="n">node</span><span class="p">;</span>
    <span class="n">RCCHECK</span><span class="p">(</span><span class="n">rclc_node_init_default</span><span class="p">(</span><span class="o">&amp;</span><span class="n">node</span><span class="p">,</span> <span class="s">"int32_publisher_rclc"</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">support</span><span class="p">));</span>

    <span class="c1">// 创建发布者</span>
    <span class="n">RCCHECK</span><span class="p">(</span><span class="n">rclc_publisher_init_default</span><span class="p">(</span>
        <span class="o">&amp;</span><span class="n">publisher</span><span class="p">,</span>
        <span class="o">&amp;</span><span class="n">node</span><span class="p">,</span>
        <span class="n">ROSIDL_GET_MSG_TYPE_SUPPORT</span><span class="p">(</span><span class="n">std_msgs</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="n">Int32</span><span class="p">),</span>
        <span class="s">"std_msgs_msg_Int32"</span><span class="p">));</span>

    <span class="c1">// 创建定时器</span>
    <span class="n">rcl_timer_t</span> <span class="n">timer</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">timer_timeout</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span> <span class="c1">// 定时器超时时间为1000毫秒</span>
    <span class="n">RCCHECK</span><span class="p">(</span><span class="n">rclc_timer_init_default</span><span class="p">(</span>
        <span class="o">&amp;</span><span class="n">timer</span><span class="p">,</span>
        <span class="o">&amp;</span><span class="n">support</span><span class="p">,</span>
        <span class="n">RCL_MS_TO_NS</span><span class="p">(</span><span class="n">timer_timeout</span><span class="p">),</span>
        <span class="n">timer_callback</span><span class="p">));</span>

    <span class="c1">// 创建执行器</span>
    <span class="n">rclc_executor_t</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">rclc_executor_get_zero_initialized_executor</span><span class="p">();</span>
    <span class="n">RCCHECK</span><span class="p">(</span><span class="n">rclc_executor_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">executor</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">support</span><span class="p">.</span><span class="n">context</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">allocator</span><span class="p">));</span>
    <span class="n">RCCHECK</span><span class="p">(</span><span class="n">rclc_executor_add_timer</span><span class="p">(</span><span class="o">&amp;</span><span class="n">executor</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">timer</span><span class="p">));</span>

    <span class="n">msg</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 初始化消息数据</span>

    <span class="n">rclc_executor_spin</span><span class="p">(</span><span class="o">&amp;</span><span class="n">executor</span><span class="p">);</span> <span class="c1">// 执行器开始执行</span>

    <span class="c1">// 清理资源</span>
    <span class="n">RCCHECK</span><span class="p">(</span><span class="n">rcl_publisher_fini</span><span class="p">(</span><span class="o">&amp;</span><span class="n">publisher</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">node</span><span class="p">));</span>
    <span class="n">RCCHECK</span><span class="p">(</span><span class="n">rcl_node_fini</span><span class="p">(</span><span class="o">&amp;</span><span class="n">node</span><span class="p">));</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>发布者的 CMakeLists.txt 文件内容：(demo_pub/CMakeLists.txt)[https://github.com/micro-ROS/micro-ROS-demos/blob/humble/rclc/int32_publisher/CMakeLists.txt]</li>
</ul>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 设置CMake的最低版本要求为3.5</span>
<span class="nb">cmake_minimum_required</span><span class="p">(</span>VERSION 3.5<span class="p">)</span>

<span class="c1"># 定义项目名称和使用的编程语言</span>
<span class="nb">project</span><span class="p">(</span>demo_pub LANGUAGES C<span class="p">)</span>

<span class="c1"># 寻找CMake的ament包管理工具，这是ROS 2中常用的包管理工具</span>
<span class="nb">find_package</span><span class="p">(</span>ament_cmake REQUIRED<span class="p">)</span>

<span class="c1"># 寻找必要的包，这些包提供ROS 2和microROS的功能</span>
<span class="nb">find_package</span><span class="p">(</span>rcl REQUIRED<span class="p">)</span>          <span class="c1"># ROS 2 client library (rcl)</span>
<span class="nb">find_package</span><span class="p">(</span>rclc REQUIRED<span class="p">)</span>         <span class="c1"># ROS 2 client library for the C language (rclc)</span>
<span class="nb">find_package</span><span class="p">(</span>std_msgs REQUIRED<span class="p">)</span>     <span class="c1"># 标准消息定义，用于ROS 2通信</span>
<span class="nb">find_package</span><span class="p">(</span>rmw_microxrcedds REQUIRED<span class="p">)</span>  <span class="c1"># 为microROS提供的中间件实现</span>

<span class="c1"># 添加一个可执行文件目标，名为项目名称，源代码文件为 main.c</span>
<span class="nb">add_executable</span><span class="p">(</span><span class="si">${</span><span class="nv">PROJECT_NAME</span><span class="si">}</span> main.c<span class="p">)</span>

<span class="c1"># 将上述找到的包作为编译目标的依赖项</span>
<span class="nf">ament_target_dependencies</span><span class="p">(</span><span class="si">${</span><span class="nv">PROJECT_NAME</span><span class="si">}</span>
  rcl
  rclc
  std_msgs
  rmw_microxrcedds
<span class="p">)</span>

<span class="c1"># 安装构建的可执行文件到安装目录下的项目名称文件夹中</span>
<span class="nb">install</span><span class="p">(</span>TARGETS <span class="si">${</span><span class="nv">PROJECT_NAME</span><span class="si">}</span>
  DESTINATION <span class="si">${</span><span class="nv">PROJECT_NAME</span><span class="si">}</span>
<span class="p">)</span>
</code></pre></div></div>

<ol>
  <li>直接上能跑的订阅者的代码，解释全部再注释内，了解过程即可</li>
</ol>

<ul>
  <li>订阅者的 main.c <a href="https://github.com/micro-ROS/micro-ROS-demos/blob/humble/rclc/int32_publisher_subscriber/main.c">int32_publisher_subscriber/main.c</a></li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;rcl/rcl.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;rcl/error_handling.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;rclc/rclc.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;rclc/executor.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;std_msgs/msg/int32.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="c1">// 宏定义用于检查函数返回值，并在出现错误时输出错误信息</span>
<span class="cp">#define RCCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){printf("Failed status on line %d: %d. Aborting.\n",__LINE__,(int)temp_rc); return 1;}}
#define RCSOFTCHECK(fn) { rcl_ret_t temp_rc = fn; if((temp_rc != RCL_RET_OK)){printf("Failed status on line %d: %d. Continuing.\n",__LINE__,(int)temp_rc);}}
</span>
<span class="n">rcl_publisher_t</span> <span class="n">publisher</span><span class="p">;</span> <span class="c1">// 发布者对象</span>
<span class="n">rcl_subscription_t</span> <span class="n">subscriber</span><span class="p">;</span> <span class="c1">// 订阅者对象</span>
<span class="n">std_msgs__msg__Int32</span> <span class="n">send_msg</span><span class="p">;</span> <span class="c1">// 发送的消息</span>
<span class="n">std_msgs__msg__Int32</span> <span class="n">recv_msg</span><span class="p">;</span> <span class="c1">// 接收的消息</span>

<span class="c1">// 定时器回调函数，用于周期性发布消息</span>
<span class="kt">void</span> <span class="nf">timer_callback</span><span class="p">(</span><span class="n">rcl_timer_t</span> <span class="o">*</span> <span class="n">timer</span><span class="p">,</span> <span class="kt">int64_t</span> <span class="n">last_call_time</span><span class="p">)</span>
<span class="p">{</span>
    <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">last_call_time</span><span class="p">;</span> <span class="c1">// 忽略未使用的参数</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">timer</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">RCSOFTCHECK</span><span class="p">(</span><span class="n">rcl_publish</span><span class="p">(</span><span class="o">&amp;</span><span class="n">publisher</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">send_msg</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">));</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Sent: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">send_msg</span><span class="p">.</span><span class="n">data</span><span class="p">);</span>
        <span class="n">send_msg</span><span class="p">.</span><span class="n">data</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 订阅者回调函数，当接收到新消息时被调用</span>
<span class="kt">void</span> <span class="nf">subscription_callback</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span> <span class="n">msgin</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="n">std_msgs__msg__Int32</span> <span class="o">*</span> <span class="n">msg</span> <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="n">std_msgs__msg__Int32</span> <span class="o">*</span><span class="p">)</span><span class="n">msgin</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"Received: %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">msg</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="k">const</span> <span class="o">*</span> <span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">rcl_allocator_t</span> <span class="n">allocator</span> <span class="o">=</span> <span class="n">rcl_get_default_allocator</span><span class="p">();</span> <span class="c1">// 获取默认分配器</span>
    <span class="n">rclc_support_t</span> <span class="n">support</span><span class="p">;</span>

    <span class="c1">// 初始化支持结构，用于配置ROS 2通信</span>
    <span class="n">RCCHECK</span><span class="p">(</span><span class="n">rclc_support_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">support</span><span class="p">,</span> <span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">allocator</span><span class="p">));</span>

    <span class="c1">// 创建节点</span>
    <span class="n">rcl_node_t</span> <span class="n">node</span><span class="p">;</span>
    <span class="n">RCCHECK</span><span class="p">(</span><span class="n">rclc_node_init_default</span><span class="p">(</span><span class="o">&amp;</span><span class="n">node</span><span class="p">,</span> <span class="s">"int32_publisher_subscriber_rclc"</span><span class="p">,</span> <span class="s">""</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">support</span><span class="p">));</span>

    <span class="c1">// 创建发布者</span>
    <span class="n">RCCHECK</span><span class="p">(</span><span class="n">rclc_publisher_init_default</span><span class="p">(</span>
        <span class="o">&amp;</span><span class="n">publisher</span><span class="p">,</span>
        <span class="o">&amp;</span><span class="n">node</span><span class="p">,</span>
        <span class="n">ROSIDL_GET_MSG_TYPE_SUPPORT</span><span class="p">(</span><span class="n">std_msgs</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="n">Int32</span><span class="p">),</span>
        <span class="s">"int32_publisher"</span><span class="p">));</span>

    <span class="c1">// 创建订阅者</span>
    <span class="n">RCCHECK</span><span class="p">(</span><span class="n">rclc_subscription_init_default</span><span class="p">(</span>
        <span class="o">&amp;</span><span class="n">subscriber</span><span class="p">,</span>
        <span class="o">&amp;</span><span class="n">node</span><span class="p">,</span>
        <span class="n">ROSIDL_GET_MSG_TYPE_SUPPORT</span><span class="p">(</span><span class="n">std_msgs</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="n">Int32</span><span class="p">),</span>
        <span class="s">"int32_subscriber"</span><span class="p">));</span>

    <span class="c1">// 创建定时器，设置超时时间为1000毫秒</span>
    <span class="n">rcl_timer_t</span> <span class="n">timer</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">timer_timeout</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
    <span class="n">RCCHECK</span><span class="p">(</span><span class="n">rclc_timer_init_default</span><span class="p">(</span>
        <span class="o">&amp;</span><span class="n">timer</span><span class="p">,</span>
        <span class="o">&amp;</span><span class="n">support</span><span class="p">,</span>
        <span class="n">RCL_MS_TO_NS</span><span class="p">(</span><span class="n">timer_timeout</span><span class="p">),</span>
        <span class="n">timer_callback</span><span class="p">));</span>

    <span class="c1">// 创建执行器，并添加定时器和订阅者</span>
    <span class="n">rclc_executor_t</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">rclc_executor_get_zero_initialized_executor</span><span class="p">();</span>
    <span class="n">RCCHECK</span><span class="p">(</span><span class="n">rclc_executor_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">executor</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">support</span><span class="p">.</span><span class="n">context</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">allocator</span><span class="p">));</span>
    <span class="n">RCCHECK</span><span class="p">(</span><span class="n">rclc_executor_add_timer</span><span class="p">(</span><span class="o">&amp;</span><span class="n">executor</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">timer</span><span class="p">));</span>
    <span class="n">RCCHECK</span><span class="p">(</span><span class="n">rclc_executor_add_subscription</span><span class="p">(</span><span class="o">&amp;</span><span class="n">executor</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">subscriber</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">recv_msg</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">subscription_callback</span><span class="p">,</span> <span class="n">ON_NEW_DATA</span><span class="p">));</span>

    <span class="n">send_msg</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 初始化发送消息的数据</span>

    <span class="c1">// 运行执行器，开始处理事件</span>
    <span class="n">rclc_executor_spin</span><span class="p">(</span><span class="o">&amp;</span><span class="n">executor</span><span class="p">);</span>

    <span class="c1">// 清理资源，销毁发布者、订阅者和节点</span>
    <span class="n">RCCHECK</span><span class="p">(</span><span class="n">rcl_subscription_fini</span><span class="p">(</span><span class="o">&amp;</span><span class="n">subscriber</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">node</span><span class="p">));</span>
    <span class="n">RCCHECK</span><span class="p">(</span><span class="n">rcl_publisher_fini</span><span class="p">(</span><span class="o">&amp;</span><span class="n">publisher</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">node</span><span class="p">));</span>
    <span class="n">RCCHECK</span><span class="p">(</span><span class="n">rcl_node_fini</span><span class="p">(</span><span class="o">&amp;</span><span class="n">node</span><span class="p">));</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>订阅者的 CMakeLists <a href="https://github.com/micro-ROS/micro-ROS-demos/blob/humble/rclc/int32_publisher_subscriber/CMakeLists.txt">int32_publisher_subscriber/CMakeLists.txt</a></li>
</ul>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cmake_minimum_required</span><span class="p">(</span>VERSION 3.5<span class="p">)</span>

<span class="nb">project</span><span class="p">(</span>demo_sub LANGUAGES C<span class="p">)</span>

<span class="nb">find_package</span><span class="p">(</span>ament_cmake REQUIRED<span class="p">)</span>
<span class="nb">find_package</span><span class="p">(</span>rcl REQUIRED<span class="p">)</span>
<span class="nb">find_package</span><span class="p">(</span>rclc REQUIRED<span class="p">)</span>
<span class="nb">find_package</span><span class="p">(</span>std_msgs REQUIRED<span class="p">)</span>
<span class="nb">find_package</span><span class="p">(</span>rmw_microxrcedds REQUIRED<span class="p">)</span>

<span class="nb">add_executable</span><span class="p">(</span><span class="si">${</span><span class="nv">PROJECT_NAME</span><span class="si">}</span> main.c<span class="p">)</span>

<span class="nf">ament_target_dependencies</span><span class="p">(</span><span class="si">${</span><span class="nv">PROJECT_NAME</span><span class="si">}</span>
  rcl
  rclc
  std_msgs
  rmw_microxrcedds
  <span class="p">)</span>

<span class="nb">install</span><span class="p">(</span>TARGETS <span class="si">${</span><span class="nv">PROJECT_NAME</span><span class="si">}</span>
  DESTINATION <span class="si">${</span><span class="nv">PROJECT_NAME</span><span class="si">}</span>
  <span class="p">)</span>
</code></pre></div></div>

<ol>
  <li>编译运行 查看效果</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>colcon build
</code></pre></div></div>

<h1 id="42-使用-esp32-发布话题-体验-mircoros-的通讯">4.2 使用 ESP32 发布话题 体验 MircoROS 的通讯</h1>

<blockquote>
  <p>Tips: 需要完成上面的<code class="language-plaintext highlighter-rouge">micro ros 的 fireware workspace</code>的构建</p>
</blockquote>

<blockquote>
  <p>参考内容
<a href="https://www.ncnynl.com/archives/202012/3988.html">ROS2 与 arduino 入门教程-安装 micro_ros_arduino</a><br />
<a href="https://blog.csdn.net/houzima/article/details/126786365">Arduino 配置 micro-ros</a></p>
</blockquote>

<ol>
  <li>
    <p>安装 <code class="language-plaintext highlighter-rouge">arduino ide</code>并下载<code class="language-plaintext highlighter-rouge">esp32</code>的开发工具包， 网上搜索一大堆</p>
  </li>
  <li>
    <p>添加 <code class="language-plaintext highlighter-rouge">mirco_ros_arduino</code>到库内</p>
  </li>
</ol>

<ul>
  <li>到 GitHub 仓库的 release 下，下载对应 ROS 版本的 zip 包：<a href="https://github.com/micro-ROS/micro_ros_arduino/releases">micro-ROS/micro_ros_arduino</a></li>
</ul>

<p><img src="/assets/pics/ROS2_MICRO/4_arduino_micrros_download.png" alt="1_arduino_micrros下载" /></p>

<ul>
  <li>添加 Zip 包到<code class="language-plaintext highlighter-rouge">arduino-ide</code>内:</li>
</ul>

<p><img src="/assets/pics/ROS2_MICRO/4_add_microros_package.png" alt="1_添加microros包" /></p>

<ol>
  <li>跑 demo 例子</li>
</ol>

<ul>
  <li>
    <p>接入 esp32 板卡</p>
  </li>
  <li>
    <p>需要下载<code class="language-plaintext highlighter-rouge">pyserial</code>: <code class="language-plaintext highlighter-rouge">sudo pip install pyserial</code></p>
  </li>
  <li>
    <p>给板卡端口赋权限<code class="language-plaintext highlighter-rouge">sudo chmod 777 /dev/ttyUSB0</code> 或者是 <code class="language-plaintext highlighter-rouge">sudo chmod 777 /dev/ttyACM0</code>等其他 就看你的开发板端口了</p>
  </li>
  <li>
    <p>选择 <code class="language-plaintext highlighter-rouge">micro-ros-publish</code>例子烧录</p>
  </li>
</ul>

<p><img src="/assets/pics/ROS2_MICRO/4_deploy_esp32_demo.png" alt="烧录esp32demo" /></p>

<ul>
  <li>查看你的板卡烧录情况</li>
</ul>

<p><img src="/assets/pics/ROS2_MICRO/4_esp32_deploy_success.png" alt="esp32烧录完成" /></p>

<ol>
  <li>主机测试连接情况</li>
</ol>

<ul>
  <li>回到上述的<code class="language-plaintext highlighter-rouge">microros_ws</code>下， 构建<code class="language-plaintext highlighter-rouge">micro_ros_agent</code>:</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source install</span>/local_setup.bash <span class="o">&amp;&amp;</span> ros2 run micro_ros_setup build_agent.sh
</code></pre></div></div>

<ul>
  <li>构建完成之后测试</li>
</ul>]]></content><author><name>pldz9</name></author><category term="ROS2_MICRO" /><summary type="html"><![CDATA[这里还是强烈推荐使用 ros2 humble 也就是 Ubuntu22.04 的默认版本，如果大家是其他版本的，建议使用 docker 来模拟 micro ros 环境sudo docker run -it --net=host -v /dev:/dev --privileged ros:humble]]></summary></entry><entry><title type="html">3 ROS2 和 arduino 通讯</title><link href="http://localhost:4000/ros2_micro/2023-04-03-3_1_ROS2_Arduino_demo.html" rel="alternate" type="text/html" title="3 ROS2 和 arduino 通讯" /><published>2023-04-03T00:00:00+08:00</published><updated>2023-04-03T00:00:00+08:00</updated><id>http://localhost:4000/ros2_micro/3_1_ROS2_Arduino_demo</id><content type="html" xml:base="http://localhost:4000/ros2_micro/2023-04-03-3_1_ROS2_Arduino_demo.html"><![CDATA[<h1 id="31-基本介绍">3.1 基本介绍</h1>

<p>在完成了上面两个简单的 arduino 的例子之后 也能用 python 从串口拿到消息，然后做 ROS2 消息的转发</p>

<p><img src="/assets/pics/ROS2_MICRO/3_main_concept.png" alt="main_concept" /></p>

<p>接下来我们就可以对拿到的消息做处理</p>

<p>处理主要:</p>

<ul>
  <li>Python 从串口中读取消息的功能模块</li>
  <li>Python 发送消息给到 ROS2 的节点的格式(Twist)</li>
  <li>有了上面两个辅助的模块，就可以创建一个 ROS2 的节点，在不断的从串口获取数据，然后解析数据转成控制 ROS2 turtlesim 的消息</li>
</ul>

<p><img src="/assets/pics/ROS2_MICRO/3_ros2_arduino_concept.png" alt="ros2_arduino_concept" /></p>

<p>那么 我们的文件夹结构就是这样的</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ros2_arduino_demo/
|-- main.py                 // 主要的控制逻辑和ROS2节点
|-- move_instruction.py     // 辅助生成控制消息的模块，简单的模拟管理机器人是不是要急停
<span class="sb">`</span><span class="nt">--</span> read_serial.py          // 连接串口和读取串口信息

1 directory, 3 files

</code></pre></div></div>

<h1 id="32-实现的效果">3.2 实现的效果</h1>

<p>遥控器控制机器人移动</p>

<p>距离传感器报警之后机器人急停，解除之后恢复</p>

<p><img src="/assets/pics/ROS2_MICRO/3_demo.jpg" alt="demo" /></p>

<h1 id="33-处理串口消息的模块-read_serialpy">3.3 处理串口消息的模块 read_serial.py</h1>

<p>废话不多说 直接看代码 这个比较简单</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sh">'''</span><span class="s">
利用pyserial从串口中获得消息,转成指令
</span><span class="sh">'''</span>

<span class="kn">import</span> <span class="n">serial</span>


<span class="k">class</span> <span class="nc">ReadSerial</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="c1"># 串口的句柄
</span>        <span class="n">self</span><span class="p">.</span><span class="n">ser</span> <span class="o">=</span> <span class="n">serial</span><span class="p">.</span><span class="nc">Serial</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">open_serial</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">baudrate</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="sh">'''</span><span class="s">连接打开串口</span><span class="sh">'''</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># 打开串口
</span>            <span class="n">self</span><span class="p">.</span><span class="n">ser</span> <span class="o">=</span> <span class="n">serial</span><span class="p">.</span><span class="nc">Serial</span><span class="p">(</span><span class="n">port</span><span class="p">,</span> <span class="n">baudrate</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Connected to </span><span class="si">{</span><span class="n">port</span><span class="si">}</span><span class="s"> at </span><span class="si">{</span><span class="n">baudrate</span><span class="si">}</span><span class="s"> baud.</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">except</span> <span class="n">serial</span><span class="p">.</span><span class="n">SerialException</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Error: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">False</span>

    <span class="k">def</span> <span class="nf">read_from_serial</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sh">'''</span><span class="s">读取串口的消息</span><span class="sh">'''</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">line</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">ser</span><span class="p">.</span><span class="nf">readline</span><span class="p">().</span><span class="nf">decode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">line</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
                <span class="c1"># 处理数据
</span>                <span class="k">return</span> <span class="n">line</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Read data from serial error </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="sh">''</span>

</code></pre></div></div>

<h1 id="34-发送-ros2-cmd_vel-运动指令的模块-move_instructionpy">3.4 发送 ROS2 cmd_vel 运动指令的模块 move_instruction.py</h1>

<p>这个也比较简单 直接看代码</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sh">'''</span><span class="s">
接收指令控制机器人移动,也就是根据某个字符发送对应的运动指令
</span><span class="sh">'''</span>

<span class="kn">from</span> <span class="n">geometry_msgs.msg</span> <span class="kn">import</span> <span class="n">Twist</span>


<span class="k">class</span> <span class="nc">MoveInstruction</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 急停的标志
</span>        <span class="n">self</span><span class="p">.</span><span class="n">is_estop</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="c1"># 收到消息要发送的行为
</span>        <span class="n">self</span><span class="p">.</span><span class="n">twist</span> <span class="o">=</span> <span class="nc">Twist</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">move_msg</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Twist</span><span class="p">:</span>
        <span class="c1"># 急停不做任何操作
</span>        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">is_estop</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">e_stop</span><span class="p">()</span>

        <span class="k">if</span> <span class="n">key</span> <span class="o">==</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span> <span class="ow">or</span> <span class="n">key</span> <span class="o">==</span> <span class="sh">'</span><span class="s">2</span><span class="sh">'</span><span class="p">:</span>  <span class="c1"># 向前移动
</span>            <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">linear</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mf">2.0</span>
            <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">angular</span><span class="p">.</span><span class="n">z</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="k">elif</span> <span class="n">key</span> <span class="o">==</span> <span class="sh">'</span><span class="s">x</span><span class="sh">'</span> <span class="ow">or</span> <span class="n">key</span> <span class="o">==</span> <span class="sh">'</span><span class="s">8</span><span class="sh">'</span><span class="p">:</span>  <span class="c1"># 向后移动
</span>            <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">linear</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mf">2.0</span>
            <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">angular</span><span class="p">.</span><span class="n">z</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="k">elif</span> <span class="n">key</span> <span class="o">==</span> <span class="sh">'</span><span class="s">d</span><span class="sh">'</span> <span class="ow">or</span> <span class="n">key</span> <span class="o">==</span> <span class="sh">'</span><span class="s">6</span><span class="sh">'</span><span class="p">:</span>  <span class="c1"># 向右转
</span>            <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">linear</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mf">0.0</span>
            <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">angular</span><span class="p">.</span><span class="n">z</span> <span class="o">=</span> <span class="o">-</span><span class="mf">2.0</span>
        <span class="k">elif</span> <span class="n">key</span> <span class="o">==</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span> <span class="ow">or</span> <span class="n">key</span> <span class="o">==</span> <span class="sh">'</span><span class="s">4</span><span class="sh">'</span><span class="p">:</span>  <span class="c1"># 向左转
</span>            <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">linear</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mf">0.0</span>
            <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">angular</span><span class="p">.</span><span class="n">z</span> <span class="o">=</span> <span class="mf">2.0</span>
        <span class="k">elif</span> <span class="n">key</span> <span class="o">==</span> <span class="sh">'</span><span class="s">q</span><span class="sh">'</span> <span class="ow">or</span> <span class="n">key</span> <span class="o">==</span> <span class="sh">'</span><span class="s">1</span><span class="sh">'</span><span class="p">:</span>  <span class="c1"># 左上旋转
</span>            <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">linear</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mf">2.0</span>
            <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">angular</span><span class="p">.</span><span class="n">z</span> <span class="o">=</span> <span class="mf">2.0</span>
        <span class="k">elif</span> <span class="n">key</span> <span class="o">==</span> <span class="sh">'</span><span class="s">e</span><span class="sh">'</span> <span class="ow">or</span> <span class="n">key</span> <span class="o">==</span> <span class="sh">'</span><span class="s">3</span><span class="sh">'</span><span class="p">:</span>  <span class="c1"># 右上旋转
</span>            <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">linear</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mf">2.0</span>
            <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">angular</span><span class="p">.</span><span class="n">z</span> <span class="o">=</span> <span class="o">-</span><span class="mf">2.0</span>
        <span class="k">elif</span> <span class="n">key</span> <span class="o">==</span> <span class="sh">'</span><span class="s">z</span><span class="sh">'</span> <span class="ow">or</span> <span class="n">key</span> <span class="o">==</span> <span class="sh">'</span><span class="s">7</span><span class="sh">'</span><span class="p">:</span>  <span class="c1"># 左下旋转
</span>            <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">linear</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mf">2.0</span>
            <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">angular</span><span class="p">.</span><span class="n">z</span> <span class="o">=</span> <span class="mf">2.0</span>
        <span class="k">elif</span> <span class="n">key</span> <span class="o">==</span> <span class="sh">'</span><span class="s">c</span><span class="sh">'</span> <span class="ow">or</span> <span class="n">key</span> <span class="o">==</span> <span class="sh">'</span><span class="s">9</span><span class="sh">'</span><span class="p">:</span>  <span class="c1"># 右下旋转
</span>            <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">linear</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mf">2.0</span>
            <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">angular</span><span class="p">.</span><span class="n">z</span> <span class="o">=</span> <span class="o">-</span><span class="mf">2.0</span>
        <span class="k">elif</span> <span class="n">key</span> <span class="o">==</span> <span class="sh">'</span><span class="s">s</span><span class="sh">'</span> <span class="ow">or</span> <span class="n">key</span> <span class="o">==</span> <span class="sh">'</span><span class="s">5</span><span class="sh">'</span><span class="p">:</span>    <span class="c1"># 停止
</span>            <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">linear</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mf">0.0</span>
            <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">angular</span><span class="p">.</span><span class="n">z</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="k">else</span><span class="p">:</span>               <span class="c1"># 无效指令也停止
</span>            <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">linear</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mf">0.0</span>
            <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">angular</span><span class="p">.</span><span class="n">z</span> <span class="o">=</span> <span class="mf">0.0</span>

        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">twist</span>

    <span class="k">def</span> <span class="nf">e_stop</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">'''</span><span class="s">急停状态全置0, 设置flag</span><span class="sh">'''</span>
        <span class="n">self</span><span class="p">.</span><span class="n">is_estop</span> <span class="o">=</span> <span class="bp">True</span>

        <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">linear</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">linear</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">linear</span><span class="p">.</span><span class="n">z</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">angular</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">angular</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">twist</span><span class="p">.</span><span class="n">angular</span><span class="p">.</span><span class="n">z</span> <span class="o">=</span> <span class="mf">0.0</span>

        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">twist</span>

    <span class="k">def</span> <span class="nf">resume</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">'''</span><span class="s">退出estop状态</span><span class="sh">'''</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">is_estop</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">is_estop</span> <span class="o">=</span> <span class="bp">False</span>

</code></pre></div></div>

<p>唯一值得一提的就是 geometry_msgs.msg.Twist 消息是 ROS 中用于表示速度的消息类型，它包含两个主要部分：线速度（linear）和角速度（angular）。这两个部分都是 geometry_msgs.Vector3 类型。Twist 消息包含以下参数：</p>

<ul>
  <li>linear：线速度（geometry_msgs.Vector3 类型）
    <ul>
      <li>x：沿 x 轴的线速度</li>
      <li>y：沿 y 轴的线速度</li>
      <li>z：沿 z 轴的线速度</li>
    </ul>
  </li>
  <li>angular：角速度（geometry_msgs.Vector3 类型）
    <ul>
      <li>x：绕 x 轴的角速度</li>
      <li>y：绕 y 轴的角速度</li>
      <li>z：绕 z 轴的角速度</li>
    </ul>
  </li>
</ul>

<p>在 TurtleSim 通常只会用到 linear.x 和 angular.z，因为乌龟只在 2D 平面上移动。</p>

<h1 id="35-ros2-节点-mainpy">3.5 ROS2 节点 main.py</h1>

<p>这个才是重中之重, 主要的实现也就如下所示</p>

<p><img src="/assets/pics/ROS2_MICRO/3_ros2_arduino_core_graph.png" alt="ros2_arduino_core_graph" /></p>

<p>那么这时候看代码就清楚了</p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sh">'''</span><span class="s">
处理串口消息，增加各种逻辑，创建控制机器人运动的节点
</span><span class="sh">'''</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">rclpy</span>
<span class="kn">from</span> <span class="n">rclpy.node</span> <span class="kn">import</span> <span class="n">Node</span>
<span class="kn">from</span> <span class="n">geometry_msgs.msg</span> <span class="kn">import</span> <span class="n">Twist</span>
<span class="kn">from</span> <span class="n">move_instruction</span> <span class="kn">import</span> <span class="n">MoveInstruction</span>
<span class="kn">from</span> <span class="n">read_serial</span> <span class="kn">import</span> <span class="n">ReadSerial</span>

<span class="c1"># 定义几个常量
</span><span class="n">NODE_NAME</span> <span class="o">=</span> <span class="sh">'</span><span class="s">ros2_arduino_demo</span><span class="sh">'</span>
<span class="n">PUB_TOPIC</span> <span class="o">=</span> <span class="sh">'</span><span class="s">/turtle1/cmd_vel</span><span class="sh">'</span>
<span class="n">SER_PORT_NAME</span> <span class="o">=</span> <span class="sh">'</span><span class="s">/dev/ttyUSB0</span><span class="sh">'</span>
<span class="n">SER_BAUD_RATE</span> <span class="o">=</span> <span class="mi">57600</span>

<span class="c1"># 约定的串口消息的分隔符
</span><span class="n">SPLIT_SYMBOL</span> <span class="o">=</span> <span class="sh">'</span><span class="s">=</span><span class="sh">'</span>
<span class="c1"># 红外传感器串口消息的关键字
</span><span class="n">IRREMOTE_KEY</span> <span class="o">=</span> <span class="sh">'</span><span class="s">MOVE</span><span class="sh">'</span>
<span class="c1"># 声波传感器的关键字
</span><span class="n">ESTOP_KEY</span> <span class="o">=</span> <span class="sh">'</span><span class="s">ESTOP</span><span class="sh">'</span>


<span class="k">class</span> <span class="nc">ROS2ArduinoDemo</span><span class="p">(</span><span class="n">Node</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># ROS2的基本节点信息
</span>        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="n">NODE_NAME</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">publisher_</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">create_publisher</span><span class="p">(</span><span class="n">Twist</span><span class="p">,</span> <span class="n">PUB_TOPIC</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>

        <span class="c1"># 读取传感器和发送消息的句柄
</span>        <span class="n">self</span><span class="p">.</span><span class="n">ins_handler</span> <span class="o">=</span> <span class="nc">MoveInstruction</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">ser_handler</span> <span class="o">=</span> <span class="nc">ReadSerial</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="sh">'''</span><span class="s">开始执行ROS2节点</span><span class="sh">'''</span>
        <span class="c1"># 连接串口
</span>        <span class="n">flag</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">ser_handler</span><span class="p">.</span><span class="nf">open_serial</span><span class="p">(</span><span class="n">SER_PORT_NAME</span><span class="p">,</span> <span class="n">SER_BAUD_RATE</span><span class="p">)</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">flag</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">exit ... ...</span><span class="sh">"</span><span class="p">)</span>
            <span class="nf">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

        <span class="c1"># 要发送的控制消息
</span>        <span class="n">twist</span> <span class="o">=</span> <span class="nc">Twist</span><span class="p">()</span>

        <span class="c1"># 开始循环接收串口消息，用串口的消息来控制机器人
</span>        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">ser_data_str</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">ser_handler</span><span class="p">.</span><span class="nf">read_from_serial</span><span class="p">()</span>

            <span class="c1"># 无效信息
</span>            <span class="k">if</span> <span class="n">ser_data_str</span> <span class="o">==</span> <span class="sh">''</span><span class="p">:</span>
                <span class="k">continue</span>

            <span class="c1"># 字符串处理
</span>            <span class="n">ser_data_arr</span> <span class="o">=</span> <span class="n">ser_data_str</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="n">SPLIT_SYMBOL</span><span class="p">)</span>

            <span class="c1"># 数组长度不为2 也是无效信息
</span>            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">ser_data_arr</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>
                <span class="k">continue</span>

            <span class="k">if</span> <span class="n">ser_data_arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">ESTOP_KEY</span><span class="p">:</span>
                <span class="c1"># 急停
</span>                <span class="k">if</span> <span class="n">ser_data_arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sh">'</span><span class="s">1</span><span class="sh">'</span><span class="p">:</span>
                    <span class="n">twist</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">ins_handler</span><span class="p">.</span><span class="nf">e_stop</span><span class="p">()</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">publisher_</span><span class="p">.</span><span class="nf">publish</span><span class="p">(</span><span class="n">twist</span><span class="p">)</span>
                    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">stop!</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="c1"># 退出急停
</span>                    <span class="n">self</span><span class="p">.</span><span class="n">ins_handler</span><span class="p">.</span><span class="nf">resume</span><span class="p">()</span>
            <span class="c1"># 处理红外的信号控制运行
</span>            <span class="k">elif</span> <span class="n">ser_data_arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">IRREMOTE_KEY</span><span class="p">:</span>
                <span class="n">twist</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">ins_handler</span><span class="p">.</span><span class="nf">move_msg</span><span class="p">(</span><span class="n">ser_data_arr</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
                <span class="n">self</span><span class="p">.</span><span class="n">publisher_</span><span class="p">.</span><span class="nf">publish</span><span class="p">(</span><span class="n">twist</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="c1"># 其他消息无操作
</span>                <span class="k">pass</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">init</span><span class="p">(</span><span class="n">args</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
    <span class="n">node</span> <span class="o">=</span> <span class="nc">ROS2ArduinoDemo</span><span class="p">()</span>
    <span class="n">node</span><span class="p">.</span><span class="nf">run</span><span class="p">()</span>
    <span class="n">node</span><span class="p">.</span><span class="nf">destroy_node</span><span class="p">()</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">shutdown</span><span class="p">()</span>

</code></pre></div></div>

<h1 id="36-总结">3.6 总结</h1>

<p>用串口的方式处理 arduino 和 ROS2 的通讯，这种模式可以适用到其他的单片机上</p>

<p>控制机器人的运动在考虑急停时候也就是考虑不让 <code class="language-plaintext highlighter-rouge">cmd_vel</code> 发送有效速度信息即可</p>

<p>后面有更复杂的在导航过程的通讯，可以用 <code class="language-plaintext highlighter-rouge">action</code> 来做, 这里不介绍了，用到再看</p>]]></content><author><name>pldz9</name></author><category term="ROS2_MICRO" /><summary type="html"><![CDATA[3.1 基本介绍]]></summary></entry><entry><title type="html">2 Arduino 的基本语法</title><link href="http://localhost:4000/ros2_micro/2023-04-02-2_1_Arduino%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html" rel="alternate" type="text/html" title="2 Arduino 的基本语法" /><published>2023-04-02T00:00:00+08:00</published><updated>2023-04-02T00:00:00+08:00</updated><id>http://localhost:4000/ros2_micro/2_1_Arduino%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95</id><content type="html" xml:base="http://localhost:4000/ros2_micro/2023-04-02-2_1_Arduino%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html"><![CDATA[<h1 id="21">2.1</h1>

<p>暂无</p>

<h1 id="22-arduino-用-irremote-库使用红外模块">2.2 Arduino 用 IRremote 库使用红外模块</h1>

<h2 id="221-结果">2.2.1 结果</h2>

<p>话不多说 直接上结果，打开窗口 就能看见获得的红外信号</p>

<p><img src="/assets/pics/ROS2_MICRO/2_IRemote_result.gif" alt="IRemote_result" /></p>

<h2 id="222-接线">2.2.2 接线</h2>

<p>这个没啥好说的 就一个信号线</p>

<table>
  <thead>
    <tr>
      <th>Pin</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>VCC</td>
      <td>Powers the sensor (5V)</td>
    </tr>
    <tr>
      <td>Data</td>
      <td>Pin 11</td>
    </tr>
    <tr>
      <td>GND</td>
      <td>Common GND</td>
    </tr>
  </tbody>
</table>

<p><img src="/assets/pics/ROS2_MICRO/2_IRremote_wiring.png" alt="IRremote_wiring" /></p>

<h2 id="223-实现代码">2.2.3 实现代码</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"IRremote.h"</span><span class="cp">
</span>
<span class="kt">int</span> <span class="n">IR_RECEIVE_PIN</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>            <span class="c1">// 红外传输的数据引脚</span>
<span class="kt">long</span> <span class="n">lastReceivedValue</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>         <span class="c1">// 存储上一次接收到的红外信号值</span>
<span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">lastTimeReceived</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 存储上一次接收到红外信号的时间</span>
<span class="kt">int</span> <span class="n">debounceDelay</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>             <span class="c1">// 可调延迟参数</span>

<span class="n">IRrecv</span> <span class="nf">irrecv</span><span class="p">(</span><span class="n">IR_RECEIVE_PIN</span><span class="p">);</span> <span class="c1">// 红外模块初始化</span>
<span class="n">decode_results</span> <span class="n">results</span><span class="p">;</span>        <span class="c1">// 用于存放红外模块返回的数据</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">pinMode</span><span class="p">(</span><span class="n">LED_BUILTIN</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span> <span class="c1">// 显示指示灯</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">57600</span><span class="p">);</span>          <span class="c1">// 设置Arduino通信的波特率</span>
    <span class="n">irrecv</span><span class="p">.</span><span class="n">enableIRIn</span><span class="p">();</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Enabling IRin"</span><span class="p">);</span> <span class="c1">// 串口打印消息</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">irrecv</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">results</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="c1">// 检查是否接收到无效信号或是否间隔了一段时间（防止信号抖动）</span>
        <span class="k">if</span> <span class="p">((</span><span class="n">results</span><span class="p">.</span><span class="n">value</span> <span class="o">!=</span> <span class="mh">0xFFFFFFFF</span> <span class="o">&amp;&amp;</span> <span class="n">results</span><span class="p">.</span><span class="n">value</span> <span class="o">!=</span> <span class="mh">0x00000000</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
            <span class="p">(</span><span class="n">results</span><span class="p">.</span><span class="n">value</span> <span class="o">!=</span> <span class="n">lastReceivedValue</span> <span class="o">||</span> <span class="n">millis</span><span class="p">()</span> <span class="o">-</span> <span class="n">lastTimeReceived</span> <span class="o">&gt;</span> <span class="n">debounceDelay</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">results</span><span class="p">.</span><span class="n">value</span><span class="p">);</span>      <span class="c1">// 打印十进制数据</span>
            <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">results</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">HEX</span><span class="p">);</span> <span class="c1">// 打印十六进制数据</span>
            <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"======================"</span><span class="p">);</span>

            <span class="c1">// 更新上一次接收到的信号值和时间</span>
            <span class="n">lastReceivedValue</span> <span class="o">=</span> <span class="n">results</span><span class="p">.</span><span class="n">value</span><span class="p">;</span>
            <span class="n">lastTimeReceived</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">results</span><span class="p">.</span><span class="n">value</span> <span class="o">==</span> <span class="mh">0xFFFFFFFF</span> <span class="o">||</span> <span class="n">results</span><span class="p">.</span><span class="n">value</span> <span class="o">==</span> <span class="mh">0x00000000</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// 打印上次的值</span>
            <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">lastReceivedValue</span><span class="p">,</span> <span class="n">HEX</span><span class="p">);</span>
            <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"======================"</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">irrecv</span><span class="p">.</span><span class="n">resume</span><span class="p">();</span> <span class="c1">// 接收下一个值</span>
    <span class="p">}</span>
    <span class="n">delay</span><span class="p">(</span><span class="n">debounceDelay</span><span class="p">);</span> <span class="c1">// 延迟时间设为可调参数</span>
<span class="p">}</span>

</code></pre></div></div>

<ul>
  <li>后续根据按键接收到的信号值 做 switch 判断按了哪个按键即可</li>
</ul>

<h1 id="23-arduino-使用-hc-sr04-超声波模块">2.3 Arduino 使用 HC-SR04 超声波模块</h1>

<h2 id="231-结果">2.3.1 结果</h2>

<p>话不多说 直接上结果，打开窗口 就能看见获得的距离消息</p>

<h2 id="232-接线">2.3.2 接线</h2>

<blockquote>
  <p>参考内容: <a href="https://randomnerdtutorials.com/complete-guide-for-ultrasonic-sensor-hc-sr04/">Complete Guide for Ultrasonic Sensor HC-SR04 with Arduino</a></p>
</blockquote>

<blockquote>
  <p><strong>冷知识</strong><br />
Power Supply :+5V DC<br />
Quiescent Current : &lt;2mA<br />
Working Current: 15mA<br />
Effectual Angle: &lt;15°<br />
Ranging Distance : 2cm – 400 cm/1″ – 13ft<br />
Resolution : 0.3 cm<br />
Measuring Angle: 30 degree<br />
Trigger Input Pulse width: 10uS TTL pulse<br />
Echo Output Signal: TTL pulse proportional to the distance range<br />
Dimension: 45mm x 20mm x 15mm</p>
</blockquote>

<table>
  <thead>
    <tr>
      <th>Pin</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>VCC</td>
      <td>Powers the sensor (5V)</td>
    </tr>
    <tr>
      <td>Trig</td>
      <td>Trigger Input Pin 11</td>
    </tr>
    <tr>
      <td>Echo</td>
      <td>Echo Output Pin 12</td>
    </tr>
    <tr>
      <td>GND</td>
      <td>Common GND</td>
    </tr>
  </tbody>
</table>

<p><img src="/assets/pics/ROS2_MICRO/2_HCSR04_wiring.png" alt="HCSR04_wiring" /></p>

<h2 id="233-代码实现">2.3.3 代码实现</h2>

<p>可运行的最小 ino 代码</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">const</span> <span class="kt">int</span> <span class="n">trigPin</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>   <span class="c1">// 定义触发引脚为9</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">echoPin</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>  <span class="c1">// 定义回声引脚为10</span>

<span class="kt">float</span> <span class="n">duration</span><span class="p">,</span> <span class="n">distance</span><span class="p">;</span> <span class="c1">// 定义两个浮点变量：duration用于存储超声波的往返时间，distance用于存储计算得到的距离</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">pinMode</span><span class="p">(</span><span class="n">trigPin</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span> <span class="c1">// 将触发引脚设置为输出模式</span>
    <span class="n">pinMode</span><span class="p">(</span><span class="n">echoPin</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>  <span class="c1">// 将回声引脚设置为输入模式</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">57600</span><span class="p">);</span>      <span class="c1">// 初始化串口通信，波特率设置为57600</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// 发送一个超声波脉冲</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">trigPin</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>  <span class="c1">// 确保触发引脚初始为低电平</span>
    <span class="n">delayMicroseconds</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>        <span class="c1">// 等待2微秒</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">trigPin</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span> <span class="c1">// 将触发引脚拉高，发送超声波脉冲</span>
    <span class="n">delayMicroseconds</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>       <span class="c1">// 保持高电平10微秒，以产生一个超声波脉冲</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">trigPin</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>  <span class="c1">// 将触发引脚拉低，结束脉冲</span>

    <span class="c1">// 读取回声引脚的信号</span>
    <span class="n">duration</span> <span class="o">=</span> <span class="n">pulseIn</span><span class="p">(</span><span class="n">echoPin</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span> <span class="c1">// 读取回声引脚高电平持续的时间（微秒）</span>

    <span class="c1">// 计算距离</span>
    <span class="n">distance</span> <span class="o">=</span> <span class="p">(</span><span class="n">duration</span> <span class="o">*</span> <span class="mi">0</span><span class="p">.</span><span class="mo">0343</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// 将时间转换为距离，单位为厘米</span>
                                        <span class="c1">// 超声波在空气中的速度约为343米/秒（0.0343厘米/微秒）</span>
                                        <span class="c1">// 因为时间是往返时间，所以除以2得到单程距离</span>

    <span class="c1">// 输出距离到串口监视器</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"Distance: "</span><span class="p">);</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">distance</span><span class="p">);</span>

    <span class="n">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span> <span class="c1">// 延时100毫秒，等待下一次测量</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="24-arduino-同时运行多个功能代码">2.4 Arduino 同时运行多个功能代码</h1>

<h2 id="241-结果">2.4.1 结果</h2>

<p>同时运行红外和距离传感器功能，而且不会阻塞一方</p>

<p><img src="/assets/pics/ROS2_MICRO/2_multi_arduino_func_demo.gif" alt="multi_arduino_func_demo" /></p>

<h2 id="242-文件结构">2.4.2 文件结构</h2>

<p>文件夹结构是打开项目的最关键的内容</p>

<p>创建一个名为 Arduino_Demo 的文件夹，并在该文件夹中包含一个名为 Arduino_Demo.ino 的文件, 这种命名方式有助于保持项目的一致性和可识别性，便于后续管理和开发, 也是 Arduino IDE 识别项目的关键</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">.</span>
<span class="sb">`</span><span class="nt">--</span> Arduino_Demo
    |-- Arduino_Demo.ino    // 烧录代码的入口
    |-- HCSHandler.cpp      // 声波传感器实现代码
    |-- HCSHandler.hpp      // 声波传感器的头文件
    |-- HCSR04_Demo.txt     // 上面文件夹的ino文件的备份，可以删除 不重要
    |-- IRHandler.cpp       // 红外传感器的实现
    |-- IRHandler.hpp       // 红外传感器的头文件
    |-- IRremote_Demo.txt   // 上面文件夹的ino文件的备份，可以删除 不重要
    <span class="sb">`</span><span class="nt">--</span> ReadSerialData.py   // 利用python读取串口信息的demo文件，可以不要

1 directory, 8 files

</code></pre></div></div>

<h2 id="242-cpphpp-代码实现">2.4.2 .cpp/.hpp 代码实现</h2>

<p>这些代码其实在上面内容都是有的 只是做了一些实际上有用的消息的包装，不过多介绍了，很简单</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">HCSHandler.hpp</code></li>
</ol>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ifndef HCSHANDLER_H
#define HCSHANDLER_H
</span>
<span class="cp">#ifdef __cplusplus
</span><span class="k">extern</span> <span class="s">"C"</span>
<span class="p">{</span>
<span class="cp">#endif
</span>
    <span class="kt">void</span> <span class="n">HSCHandler_init</span><span class="p">(</span><span class="kt">int</span> <span class="n">trigPin</span><span class="p">,</span> <span class="kt">int</span> <span class="n">echoPin</span><span class="p">);</span> <span class="c1">// 初始化函数，设置引脚和模式</span>
    <span class="kt">void</span> <span class="n">HSCHandler_getDistance</span><span class="p">();</span>                 <span class="c1">// 获取距离函数，返回测量的距离</span>

<span class="cp">#ifdef __cplusplus
</span><span class="p">}</span>
<span class="cp">#endif
</span>
<span class="cp">#endif
</span>
</code></pre></div></div>

<ol>
  <li><code class="language-plaintext highlighter-rouge">HCSHandler.cpp</code></li>
</ol>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"HCSHandler.hpp"</span><span class="cp">
#include</span> <span class="cpf">"Arduino.h"</span><span class="cp">
</span>
<span class="k">static</span> <span class="kt">int</span> <span class="n">trigPin</span><span class="p">;</span>    <span class="c1">// 触发引脚</span>
<span class="k">static</span> <span class="kt">int</span> <span class="n">echoPin</span><span class="p">;</span>    <span class="c1">// 回声引脚</span>
<span class="k">static</span> <span class="kt">float</span> <span class="n">duration</span><span class="p">;</span> <span class="c1">// 超声波往返时间</span>
<span class="k">static</span> <span class="kt">float</span> <span class="n">distance</span><span class="p">;</span> <span class="c1">// 计算得到的距离</span>

<span class="c1">// 初始化函数，设置引脚和模式</span>
<span class="kt">void</span> <span class="nf">HSCHandler_init</span><span class="p">(</span><span class="kt">int</span> <span class="n">tPin</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ePin</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">trigPin</span> <span class="o">=</span> <span class="n">tPin</span><span class="p">;</span>
    <span class="n">echoPin</span> <span class="o">=</span> <span class="n">ePin</span><span class="p">;</span>
    <span class="n">pinMode</span><span class="p">(</span><span class="n">trigPin</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span>
    <span class="n">pinMode</span><span class="p">(</span><span class="n">echoPin</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// 获取距离函数，返回测量的距离</span>
<span class="kt">void</span> <span class="nf">HSCHandler_getDistance</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">estopFlag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1">// 0表示无距离危险</span>
    <span class="c1">// 发送一个超声波脉冲</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">trigPin</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>
    <span class="n">delayMicroseconds</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">trigPin</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
    <span class="n">delayMicroseconds</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
    <span class="n">digitalWrite</span><span class="p">(</span><span class="n">trigPin</span><span class="p">,</span> <span class="n">LOW</span><span class="p">);</span>

    <span class="c1">// 读取回声引脚高电平持续的时间（微秒）</span>
    <span class="n">duration</span> <span class="o">=</span> <span class="n">pulseIn</span><span class="p">(</span><span class="n">echoPin</span><span class="p">,</span> <span class="n">HIGH</span><span class="p">);</span>
    <span class="c1">// 将时间转换为距离，单位为厘米</span>
    <span class="c1">// 超声波在空气中的速度约为343米/秒（0.0343厘米/微秒）</span>
    <span class="c1">// 因为时间是往返时间，所以除以2得到单程距离</span>
    <span class="n">distance</span> <span class="o">=</span> <span class="p">(</span><span class="n">duration</span> <span class="o">*</span> <span class="mi">0</span><span class="p">.</span><span class="mo">0343</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">distance</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">estopFlag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
     <span class="c1">// 输出距离到串口监视器</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"ESTOP="</span><span class="p">);</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">estopFlag</span><span class="p">);</span>
    <span class="n">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span> <span class="c1">// 延时100毫秒，等待下一次测量</span>
<span class="p">}</span>

</code></pre></div></div>

<ol>
  <li><code class="language-plaintext highlighter-rouge">IRHandler.hpp</code></li>
</ol>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ifndef IRHANDLER_H
#define IRHANDLER_H
</span>
<span class="cp">#ifdef __cplusplus
</span><span class="k">extern</span> <span class="s">"C"</span>
<span class="p">{</span>
<span class="cp">#endif
</span>
    <span class="kt">void</span> <span class="n">setupIR</span><span class="p">(</span><span class="kt">int</span> <span class="n">pin</span><span class="p">);</span>                <span class="c1">// 初始化</span>
    <span class="kt">void</span> <span class="n">handleIR</span><span class="p">();</span>                      <span class="c1">// 处理信号</span>
    <span class="kt">int</span> <span class="n">mapNum</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">decode</span><span class="p">);</span> <span class="c1">// 匹配按键</span>

<span class="cp">#ifdef __cplusplus
</span><span class="p">}</span>
<span class="cp">#endif
</span>
<span class="cp">#endif
</span>
</code></pre></div></div>

<ol>
  <li><code class="language-plaintext highlighter-rouge">IRHandler.cpp</code></li>
</ol>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"IRHandler.hpp"</span><span class="cp">
#include</span> <span class="cpf">"IRremote.h"</span><span class="cp">
</span>
<span class="k">static</span> <span class="kt">int</span> <span class="n">IR_RECEIVE_PIN</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>            <span class="c1">// 红外传输的数据引脚</span>
<span class="k">static</span> <span class="kt">long</span> <span class="n">lastReceivedValue</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>         <span class="c1">// 存储上一次接收到的红外信号值</span>
<span class="k">static</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">lastTimeReceived</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 存储上一次接收到红外信号的时间</span>
<span class="k">static</span> <span class="kt">int</span> <span class="n">debounceDelay</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>            <span class="c1">// 可调延迟参数</span>

<span class="n">IRrecv</span> <span class="nf">irrecv</span><span class="p">(</span><span class="n">IR_RECEIVE_PIN</span><span class="p">);</span> <span class="c1">// 红外模块初始化</span>
<span class="n">decode_results</span> <span class="n">results</span><span class="p">;</span>        <span class="c1">// 用于存放红外模块返回的数据</span>

<span class="kt">void</span> <span class="nf">setupIR</span><span class="p">(</span><span class="kt">int</span> <span class="n">pin</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">IR_RECEIVE_PIN</span> <span class="o">=</span> <span class="n">pin</span><span class="p">;</span>
    <span class="n">pinMode</span><span class="p">(</span><span class="n">LED_BUILTIN</span><span class="p">,</span> <span class="n">OUTPUT</span><span class="p">);</span> <span class="c1">// 显示指示灯</span>
    <span class="n">irrecv</span><span class="p">.</span><span class="n">enableIRIn</span><span class="p">();</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">"Enabling IRin"</span><span class="p">);</span> <span class="c1">// 串口打印消息</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">mapNum</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">int</span> <span class="n">decode</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">99</span><span class="p">;</span> <span class="c1">// 99 表示无效内容</span>
    <span class="k">switch</span> <span class="p">(</span><span class="n">decode</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="k">case</span> <span class="mh">0xFFA25D</span><span class="p">:</span>
        <span class="n">num</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mh">0xFF629D</span><span class="p">:</span>
        <span class="n">num</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mh">0xFFE21D</span><span class="p">:</span>
        <span class="n">num</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mh">0xFF22DD</span><span class="p">:</span>
        <span class="n">num</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mh">0xFF02FD</span><span class="p">:</span>
        <span class="n">num</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mh">0xFFC23D</span><span class="p">:</span>
        <span class="n">num</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mh">0xFFE01F</span><span class="p">:</span>
        <span class="n">num</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mh">0xFFA857</span><span class="p">:</span>
        <span class="n">num</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mh">0xFF906F</span><span class="p">:</span>
        <span class="n">num</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mh">0xFF6897</span><span class="p">:</span>
        <span class="n">num</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mh">0xFF9867</span><span class="p">:</span>
        <span class="n">num</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mh">0xFFB04F</span><span class="p">:</span>
        <span class="n">num</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mh">0xFF18E7</span><span class="p">:</span>
        <span class="n">num</span> <span class="o">=</span> <span class="mi">13</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mh">0xFF10EF</span><span class="p">:</span>
        <span class="n">num</span> <span class="o">=</span> <span class="mi">14</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mh">0xFF38C7</span><span class="p">:</span>
        <span class="n">num</span> <span class="o">=</span> <span class="mi">15</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mh">0xFF5AA5</span><span class="p">:</span>
        <span class="n">num</span> <span class="o">=</span> <span class="mi">16</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mh">0xFF4AB5</span><span class="p">:</span>
        <span class="n">num</span> <span class="o">=</span> <span class="mi">17</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="nl">default:</span>
        <span class="n">num</span> <span class="o">=</span> <span class="mi">99</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">num</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">handleIR</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">moveNum</span> <span class="o">=</span> <span class="mi">99</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">irrecv</span><span class="p">.</span><span class="n">decode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">results</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="c1">// 检查是否接收到无效信号或是否间隔了一段时间（防止信号抖动）</span>
        <span class="k">if</span> <span class="p">((</span><span class="n">results</span><span class="p">.</span><span class="n">value</span> <span class="o">!=</span> <span class="mh">0xFFFFFFFF</span> <span class="o">&amp;&amp;</span> <span class="n">results</span><span class="p">.</span><span class="n">value</span> <span class="o">!=</span> <span class="mh">0x00000000</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
            <span class="p">(</span><span class="n">results</span><span class="p">.</span><span class="n">value</span> <span class="o">!=</span> <span class="n">lastReceivedValue</span> <span class="o">||</span> <span class="n">millis</span><span class="p">()</span> <span class="o">-</span> <span class="n">lastTimeReceived</span> <span class="o">&gt;</span> <span class="n">debounceDelay</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="n">moveNum</span> <span class="o">=</span> <span class="n">mapNum</span><span class="p">(</span><span class="n">results</span><span class="p">.</span><span class="n">value</span><span class="p">);</span>
            <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"MOVE="</span><span class="p">);</span>
            <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">moveNum</span><span class="p">);</span>

            <span class="c1">// 更新上一次接收到的信号值和时间</span>
            <span class="n">lastReceivedValue</span> <span class="o">=</span> <span class="n">results</span><span class="p">.</span><span class="n">value</span><span class="p">;</span>
            <span class="n">lastTimeReceived</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">results</span><span class="p">.</span><span class="n">value</span> <span class="o">==</span> <span class="mh">0xFFFFFFFF</span> <span class="o">||</span> <span class="n">results</span><span class="p">.</span><span class="n">value</span> <span class="o">==</span> <span class="mh">0x00000000</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// 打印上次的值</span>
            <span class="n">moveNum</span> <span class="o">=</span> <span class="n">mapNum</span><span class="p">(</span><span class="n">lastReceivedValue</span><span class="p">);</span>
            <span class="n">Serial</span><span class="p">.</span><span class="n">print</span><span class="p">(</span><span class="s">"MOVE="</span><span class="p">);</span>
            <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="n">moveNum</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">irrecv</span><span class="p">.</span><span class="n">resume</span><span class="p">();</span> <span class="c1">// 接收下一个值</span>
    <span class="p">}</span>
    <span class="n">delay</span><span class="p">(</span><span class="n">debounceDelay</span><span class="p">);</span> <span class="c1">// 延迟时间设为可调参数</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="243-arduino_demoino-代码实现">2.4.3 Arduino_Demo.ino 代码实现</h2>

<p>直接看代码，从代码角度来分析为什么这样写</p>

<ul>
  <li>关键点在于 用<code class="language-plaintext highlighter-rouge">cpp/hpp</code>管理具体的实现，结构好看</li>
  <li>引入各个功能到 <code class="language-plaintext highlighter-rouge">loop</code> 里 即可实现全部的功能</li>
  <li>使用 <code class="language-plaintext highlighter-rouge">millis()</code> 进行非阻塞时间管理</li>
  <li>定时检查并获取声波传感器距离：<code class="language-plaintext highlighter-rouge">HSCHandler_getDistance()</code></li>
  <li>定时处理红外传感器信号：<code class="language-plaintext highlighter-rouge">handleIR()</code></li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"HCSHandler.hpp"</span><span class="cp">
#include</span> <span class="cpf">"IRHandler.hpp"</span><span class="cp">
</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">trigPin</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>   <span class="c1">// 定义声波传感器触发引脚为9</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">echoPin</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>  <span class="c1">// 定义声波传感器回声引脚为10</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">irremotePin</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span> <span class="c1">// 定义红外的信号引脚为11</span>

<span class="c1">// 模仿多线程,也就是划分时间做某个函数的事情</span>
<span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">lastDistanceCheck</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1">// 存储上一次接收到声波传感器的时间</span>
<span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">lastIRCheck</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1">// 存储上一次接收到红外信号的时间</span>

<span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">distanceInterval</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span> <span class="c1">// 检查距离的时间间隔</span>
<span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">irInterval</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span> <span class="c1">// 检查红外信号的时间间隔</span>

<span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">57600</span><span class="p">);</span> <span class="c1">// 初始化串口通信，波特率设置为57600</span>
    <span class="n">HSCHandler_init</span><span class="p">(</span><span class="n">trigPin</span><span class="p">,</span> <span class="n">echoPin</span><span class="p">);</span> <span class="c1">// 初始化声波传感器</span>
    <span class="n">setupIR</span><span class="p">(</span><span class="n">irremotePin</span><span class="p">);</span> <span class="c1">// 初始化红外传感器</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">currentMillis</span> <span class="o">=</span> <span class="n">millis</span><span class="p">();</span>
    <span class="c1">// 非阻塞地处理超声波测距</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">currentMillis</span> <span class="o">-</span> <span class="n">lastDistanceCheck</span> <span class="o">&gt;=</span> <span class="n">distanceInterval</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">lastDistanceCheck</span> <span class="o">=</span> <span class="n">currentMillis</span><span class="p">;</span>
        <span class="n">HSCHandler_getDistance</span><span class="p">();</span> <span class="c1">// 获取声波传感器距离</span>
    <span class="p">}</span>

    <span class="c1">// 非阻塞地处理红外传感器</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">currentMillis</span> <span class="o">-</span> <span class="n">lastIRCheck</span> <span class="o">&gt;=</span> <span class="n">irInterval</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">lastIRCheck</span> <span class="o">=</span> <span class="n">currentMillis</span><span class="p">;</span>
        <span class="n">handleIR</span><span class="p">();</span> <span class="c1">// 处理红外传感器</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h1 id="25-利用-python-的-pyserial-库读取串口信息">2.5 利用 python 的 pyserial 库读取串口信息</h1>

<h2 id="251-结果">2.5.1 结果</h2>

<p><img src="/assets/pics/ROS2_MICRO/2_python_read_serial.gif" alt="python_read_serial.gif" /></p>

<h2 id="252-代码实现">2.5.2 代码实现</h2>

<p>直接上代码吧，这个太简单了, 需要安装 pyserial 库 <code class="language-plaintext highlighter-rouge">pip3 install pyserial</code></p>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1"># sudo pip3 install pyserial
</span>
<span class="kn">import</span> <span class="n">serial</span>

<span class="k">def</span> <span class="nf">read_from_serial</span><span class="p">(</span><span class="n">port</span><span class="p">,</span> <span class="n">baudrate</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="c1"># 打开串口
</span>        <span class="n">ser</span> <span class="o">=</span> <span class="n">serial</span><span class="p">.</span><span class="nc">Serial</span><span class="p">(</span><span class="n">port</span><span class="p">,</span> <span class="n">baudrate</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Connected to </span><span class="si">{</span><span class="n">port</span><span class="si">}</span><span class="s"> at </span><span class="si">{</span><span class="n">baudrate</span><span class="si">}</span><span class="s"> baud.</span><span class="sh">"</span><span class="p">)</span>

        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="c1"># 读取一行数据
</span>            <span class="n">line</span> <span class="o">=</span> <span class="n">ser</span><span class="p">.</span><span class="nf">readline</span><span class="p">().</span><span class="nf">decode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">line</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Received: </span><span class="si">{</span><span class="n">line</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">except</span> <span class="n">serial</span><span class="p">.</span><span class="n">SerialException</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Error: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">KeyboardInterrupt</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Exiting...</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="c1"># 关闭串口
</span>        <span class="k">if</span> <span class="n">ser</span><span class="p">.</span><span class="n">is_open</span><span class="p">:</span>
            <span class="n">ser</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Serial port closed.</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># 调用函数读取COM18端口的消息，波特率为57600
</span><span class="nf">read_from_serial</span><span class="p">(</span><span class="sh">'</span><span class="s">COM18</span><span class="sh">'</span><span class="p">,</span> <span class="mi">57600</span><span class="p">)</span>

</code></pre></div></div>]]></content><author><name>pldz9</name></author><category term="ROS2_MICRO" /><summary type="html"><![CDATA[2.1]]></summary></entry><entry><title type="html">1 ROS2 和 Arduino 通讯</title><link href="http://localhost:4000/ros2_micro/2023-04-01-1_1_ROS2_Arduino.html" rel="alternate" type="text/html" title="1 ROS2 和 Arduino 通讯" /><published>2023-04-01T00:00:00+08:00</published><updated>2023-04-01T00:00:00+08:00</updated><id>http://localhost:4000/ros2_micro/1_1_ROS2_Arduino</id><content type="html" xml:base="http://localhost:4000/ros2_micro/2023-04-01-1_1_ROS2_Arduino.html"><![CDATA[<p>ROS2 和 Arduino 的通讯方式有很多，个人觉得只要分为两大类</p>

<ol>
  <li>
    <p>第一类是采用 ros2arduino 或者 MicroROS 这类的包，在 arduino 板卡上尝试直接进行 ros2 的节点的发布和订阅, 然后主机上则采用对应的 DDS 工具 例如 MicroROS 的各种通讯中间件，Mirco_XRCE_DDS 图像中间件，或者是 ros2_serial 获取发布订阅的串口数据的中间件</p>
  </li>
  <li>
    <p>直接从微控制器本身出发，Arduino 直接烧录自身的功能代码 而不依赖仍和 ROS2 相关的库，然后用 Python 或者 C/C++编写接受串口消息的节点，做发布和订阅</p>
  </li>
</ol>

<p><img src="/assets/pics/ROS2_MICRO/1_different_com_method.png" alt="1_different_com_method" /></p>

<p>那么这里就采用第二种方式，最简单快速的完成 ROS2 和 Arduino 的通讯</p>]]></content><author><name>pldz9</name></author><category term="ROS2_MICRO" /><summary type="html"><![CDATA[ROS2 和 Arduino 的通讯方式有很多，个人觉得只要分为两大类]]></summary></entry><entry><title type="html">4 ROS2节点参数基础</title><link href="http://localhost:4000/ros2_basic/2023-02-05-4_1_ROS2%E5%8F%82%E6%95%B0%E6%9C%8D%E5%8A%A1%E5%99%A8.html" rel="alternate" type="text/html" title="4 ROS2节点参数基础" /><published>2023-02-05T00:00:00+08:00</published><updated>2023-02-05T00:00:00+08:00</updated><id>http://localhost:4000/ros2_basic/4_1_ROS2%E5%8F%82%E6%95%B0%E6%9C%8D%E5%8A%A1%E5%99%A8</id><content type="html" xml:base="http://localhost:4000/ros2_basic/2023-02-05-4_1_ROS2%E5%8F%82%E6%95%B0%E6%9C%8D%E5%8A%A1%E5%99%A8.html"><![CDATA[<h1 id="41-ros2节点参数介绍">4.1 ROS2节点参数介绍</h1>

<blockquote>
  <p>参考内容</p>

  <p><a href="https://docs.ros.org/en/humble/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Parameters/Understanding-ROS2-Parameters.html#load-parameter-file-on-node-startup">Understanding parameters</a></p>
</blockquote>

<p>在ROS2的通讯过程中，有一种信息记录某个节点的特征，例如turtlesim仿真时候的乌龟类型，背景的颜色等等，这一类节点设置的数据，通常采用节点参数(<code class="language-plaintext highlighter-rouge">parameters</code>)进行设置和操作，可以把节点参数认为是对节点的设置，可以对参数进行增删改查的操作</p>

<h1 id="42-使用cc实现对节点参数的增删改查">4.2 使用C/C++实现对节点参数的增删改查</h1>

<blockquote>
  <p>示例创建一个节点参数的服务端，和一个节点参数的客户端，服务端用于实现后续客户端对它的参数进行增删改查操作</p>
</blockquote>

<blockquote>
  <p>参考内容</p>

  <p><a href="https://docs.ros.org/en/humble/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-CPP.html">Using parameters in a class (C++)</a></p>

  <p><a href="https://www.bilibili.com/video/BV1Me411j7hK">2.5.3_参数服务_C++实现_03客户端_01代码框架</a></p>
</blockquote>

<h2 id="421-创建cc节点参数的服务端">4.2.1 创建C/C++节点参数的服务端</h2>

<ol>
  <li>
    <p>创建功能包，包名为<code class="language-plaintext highlighter-rouge">cpp_para_ser</code>，节点名为<code class="language-plaintext highlighter-rouge">cppParaSerNode</code>，依赖<code class="language-plaintext highlighter-rouge">rclcpp</code>：<code class="language-plaintext highlighter-rouge">ros2 pkg create cpp_para_server --build-type ament_cmake --node-name cppParaSerNode --dependencies rclcpp</code></p>
  </li>
  <li>
    <p>配置Vscode环境，在工作空间创建<code class="language-plaintext highlighter-rouge">.vscode</code>文件夹，并加入<code class="language-plaintext highlighter-rouge">settings.json</code>文件，添加<code class="language-plaintext highlighter-rouge">ROS2</code>的<code class="language-plaintext highlighter-rouge">include</code>环境：</p>
  </li>
</ol>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"C_Cpp.default.includePath"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"/opt/ros/humble/include/**"</span><span class="p">,</span><span class="w">
    </span><span class="p">],</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ol>
  <li>创建节点参数服务：注意删除节点的参数，只能删除未被声明的内容：</li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1. 生成节点的头文件</span>
<span class="cp">#include</span> <span class="cpf">"rclcpp/rclcpp.hpp"</span><span class="cp">
</span>
<span class="c1">// 2. 定义节点参数服务端</span>
<span class="k">class</span> <span class="nc">CppParamServer</span> <span class="o">:</span> <span class="k">public</span> <span class="n">rclcpp</span><span class="o">::</span><span class="n">Node</span>
<span class="p">{</span>
<span class="nl">public:</span>
  <span class="c1">// 2.1 构造函数，设置节点名，以及允许被删除的内容</span>
  <span class="n">CppParamServer</span><span class="p">()</span> <span class="o">:</span> <span class="n">Node</span><span class="p">(</span><span class="s">"cppParamSerNode"</span><span class="p">,</span><span class="n">rclcpp</span><span class="o">::</span><span class="n">NodeOptions</span><span class="p">().</span><span class="n">allow_undeclared_parameters</span><span class="p">(</span><span class="nb">true</span><span class="p">))</span> <span class="p">{}</span>

  <span class="c1">// 2.2 创建默认的参数表</span>
  <span class="kt">void</span> <span class="nf">declare_param</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="c1">// 2.2.1 声明参数并设置默认值</span>
    <span class="k">this</span><span class="o">-&gt;</span><span class="n">declare_parameter</span><span class="p">(</span><span class="s">"name"</span><span class="p">,</span> <span class="s">"zhangsan"</span><span class="p">);</span>
    <span class="k">this</span><span class="o">-&gt;</span><span class="n">declare_parameter</span><span class="p">(</span><span class="s">"height"</span><span class="p">,</span> <span class="s">"1.8"</span><span class="p">);</span>

    <span class="c1">// 2.2.2 未声明的参数，该参数可以被删除</span>
    <span class="k">this</span><span class="o">-&gt;</span><span class="n">set_parameter</span><span class="p">(</span><span class="n">rclcpp</span><span class="o">::</span><span class="n">Parameter</span><span class="p">(</span><span class="s">"age"</span><span class="p">,</span> <span class="s">"20"</span><span class="p">));</span>
  <span class="p">}</span>

  <span class="c1">// 3 获取到现在的所有参数</span>
  <span class="kt">void</span> <span class="nf">get_AllValue</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="n">RCLCPP_INFO</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">get_logger</span><span class="p">(),</span> <span class="s">"------------------ Get the params ----------------"</span><span class="p">);</span>
    <span class="k">auto</span> <span class="n">params</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">get_parameters</span><span class="p">({</span><span class="s">"name"</span><span class="p">,</span> <span class="s">"height"</span><span class="p">,</span> <span class="s">"age"</span><span class="p">});</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="n">param</span> <span class="o">:</span> <span class="n">params</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="c1">// 3.1 get_name函数获取参数名，value_to_string获取到参数的字符串值</span>
      <span class="n">RCLCPP_INFO</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">get_logger</span><span class="p">(),</span> <span class="s">"parameter is %s,  the value is %s"</span><span class="p">,</span> <span class="n">param</span><span class="p">.</span><span class="n">get_name</span><span class="p">().</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">param</span><span class="p">.</span><span class="n">value_to_string</span><span class="p">().</span><span class="n">c_str</span><span class="p">());</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// 4 修改参数</span>
  <span class="kt">void</span> <span class="nf">update_param</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="n">RCLCPP_INFO</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">get_logger</span><span class="p">(),</span> <span class="s">"------------------ Change the value  ----------------"</span><span class="p">);</span>
    <span class="k">this</span><span class="o">-&gt;</span><span class="n">set_parameter</span><span class="p">(</span><span class="n">rclcpp</span><span class="o">::</span><span class="n">Parameter</span><span class="p">(</span><span class="s">"name"</span><span class="p">,</span> <span class="s">"lisi"</span><span class="p">));</span>
    <span class="k">this</span><span class="o">-&gt;</span><span class="n">get_AllValue</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="c1">// 5. 删除参数</span>
  <span class="kt">void</span> <span class="nf">del_param</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="n">RCLCPP_INFO</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">get_logger</span><span class="p">(),</span> <span class="s">"------------------ Delete ----------------"</span><span class="p">);</span>
    <span class="c1">// 5.1 删除只能删除未声明的参数，不能删除声明过的参数</span>
    <span class="k">this</span><span class="o">-&gt;</span><span class="n">undeclare_parameter</span><span class="p">(</span><span class="s">"age"</span><span class="p">);</span>
    <span class="k">auto</span> <span class="n">params</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">get_parameters</span><span class="p">({</span><span class="s">"name"</span><span class="p">,</span> <span class="s">"height"</span><span class="p">});</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="n">param</span> <span class="o">:</span> <span class="n">params</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="c1">// 5.1 get_name函数获取参数名，value_to_string获取到参数的字符串值</span>
      <span class="n">RCLCPP_INFO</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">get_logger</span><span class="p">(),</span> <span class="s">"parameter is %s,  the value is %s"</span><span class="p">,</span> <span class="n">param</span><span class="p">.</span><span class="n">get_name</span><span class="p">().</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">param</span><span class="p">.</span><span class="n">value_to_string</span><span class="p">().</span><span class="n">c_str</span><span class="p">());</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">rclcpp</span><span class="o">::</span><span class="n">init</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
  <span class="k">auto</span> <span class="n">paramServer</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">CppParamServer</span><span class="o">&gt;</span><span class="p">();</span>
  <span class="c1">// 执行对应的函数</span>
  <span class="n">paramServer</span><span class="o">-&gt;</span><span class="n">declare_param</span><span class="p">();</span>
  <span class="n">paramServer</span><span class="o">-&gt;</span><span class="n">get_AllValue</span><span class="p">();</span>
  <span class="n">paramServer</span><span class="o">-&gt;</span><span class="n">update_param</span><span class="p">();</span>
  <span class="n">paramServer</span><span class="o">-&gt;</span><span class="n">del_param</span><span class="p">();</span>

  <span class="n">rclcpp</span><span class="o">::</span><span class="n">spin</span><span class="p">(</span><span class="n">paramServer</span><span class="p">);</span>
  <span class="n">rclcpp</span><span class="o">::</span><span class="n">shutdown</span><span class="p">();</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ol>
  <li>
    <p>由于在创建包的过程中已经指明了所有依赖项，不需要进行额外的配置，直接编译运行即可：<code class="language-plaintext highlighter-rouge">colcon build --packages-select cpp_para_server</code></p>
  </li>
  <li>
    <p>激活环境并运行节点：<code class="language-plaintext highlighter-rouge">. install/setup.bash</code>和<code class="language-plaintext highlighter-rouge">ros2 run cpp_para_server cppParaSerNode</code></p>
  </li>
</ol>

<p><img src="/assets/pics/ROS2_BASIC/4_cpp_params_server_result.png" alt="C/C++实现参数服务" /></p>

<h2 id="422-创建cc节点参数客户端">4.2.2 创建C/C++节点参数客户端</h2>

<ol>
  <li>
    <p>创建功能包，包名为<code class="language-plaintext highlighter-rouge">cpp_para_client</code>，节点名为<code class="language-plaintext highlighter-rouge">cppParaCliNode</code>，依赖<code class="language-plaintext highlighter-rouge">rclcpp</code>：<code class="language-plaintext highlighter-rouge">ros2 pkg create cpp_para_client --build-type ament_cmake --node-name cppParaCliNode --dependencies rclcpp</code></p>
  </li>
  <li>
    <p>配置Vscode环境，在工作空间创建<code class="language-plaintext highlighter-rouge">.vscode</code>文件夹，并加入<code class="language-plaintext highlighter-rouge">settings.json</code>文件，添加<code class="language-plaintext highlighter-rouge">ROS2</code>的<code class="language-plaintext highlighter-rouge">include</code>环境：</p>
  </li>
</ol>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"C_Cpp.default.includePath"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"/opt/ros/humble/include/**"</span><span class="p">,</span><span class="w">
    </span><span class="p">],</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ol>
  <li>创建节点参数客户端，值得注意的是需要连接到服务端节点，然后进行参数的增删改查操作：</li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1.包含头文件；</span>
<span class="cp">#include</span> <span class="cpf">"rclcpp/rclcpp.hpp"</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="o">::</span><span class="n">chrono_literals</span><span class="p">;</span>

<span class="c1">// 2.定义节点类；</span>
<span class="k">class</span> <span class="nc">CppParaClient</span> <span class="o">:</span> <span class="k">public</span> <span class="n">rclcpp</span><span class="o">::</span><span class="n">Node</span>
<span class="p">{</span>
<span class="nl">public:</span>
  <span class="n">CppParaClient</span><span class="p">()</span> <span class="o">:</span> <span class="n">Node</span><span class="p">(</span><span class="s">"cppParaCliNode"</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="c1">// 2.1 连接到节点参数的服务节点,注意此时的第二个参数是连接的服务端节点名</span>
    <span class="n">paramClient</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">rclcpp</span><span class="o">::</span><span class="n">SyncParametersClient</span><span class="o">&gt;</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s">"cppParamSerNode"</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// 3. 连接服务函数</span>
  <span class="kt">bool</span> <span class="nf">connect_server</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="c1">// 3.1 等待服务连接</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">paramClient</span><span class="o">-&gt;</span><span class="n">wait_for_service</span><span class="p">(</span><span class="mx">1s</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">rclcpp</span><span class="o">::</span><span class="n">ok</span><span class="p">())</span>
      <span class="p">{</span>
        <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="n">RCLCPP_INFO</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">get_logger</span><span class="p">(),</span> <span class="s">"The server connect failed! "</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// 4. 查询参数</span>
  <span class="kt">void</span> <span class="nf">get_values</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="n">RCLCPP_INFO</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">get_logger</span><span class="p">(),</span> <span class="s">"----------- Get the values -----------"</span><span class="p">);</span>
    <span class="k">auto</span> <span class="n">params</span> <span class="o">=</span> <span class="n">paramClient</span><span class="o">-&gt;</span><span class="n">get_parameters</span><span class="p">({</span><span class="s">"name"</span><span class="p">,</span> <span class="s">"height"</span><span class="p">});</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="n">param</span> <span class="o">:</span> <span class="n">params</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">RCLCPP_INFO</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">get_logger</span><span class="p">(),</span> <span class="s">"%s = %s"</span><span class="p">,</span> <span class="n">param</span><span class="p">.</span><span class="n">get_name</span><span class="p">().</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">param</span><span class="p">.</span><span class="n">value_to_string</span><span class="p">().</span><span class="n">c_str</span><span class="p">());</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// 5. 修改参数</span>
  <span class="kt">void</span> <span class="nf">update_param</span><span class="p">()</span>
  <span class="p">{</span>
    <span class="n">RCLCPP_INFO</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">get_logger</span><span class="p">(),</span> <span class="s">"----------- Change the values -----------"</span><span class="p">);</span>
    <span class="n">paramClient</span><span class="o">-&gt;</span><span class="n">set_parameters</span><span class="p">({</span><span class="n">rclcpp</span><span class="o">::</span><span class="n">Parameter</span><span class="p">(</span><span class="s">"name"</span><span class="p">,</span> <span class="s">"lisi"</span><span class="p">),</span>
                                 <span class="c1">// 这是服务端不存在的参数，只有服务端设置了rclcpp::NodeOptions().allow_undeclared_parameters(true)时，</span>
                                 <span class="c1">//  这个参数才会被成功设置。</span>
                                 <span class="n">rclcpp</span><span class="o">::</span><span class="n">Parameter</span><span class="p">(</span><span class="s">"sex"</span><span class="p">,</span> <span class="s">"man"</span><span class="p">)});</span>
  <span class="p">}</span>

<span class="k">private</span><span class="o">:</span>
  <span class="n">rclcpp</span><span class="o">::</span><span class="n">SyncParametersClient</span><span class="o">::</span><span class="n">SharedPtr</span> <span class="n">paramClient</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
  <span class="n">rclcpp</span><span class="o">::</span><span class="n">init</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>

  <span class="c1">// 4.创建节点对象指针，调用参数操作函数；</span>
  <span class="k">auto</span> <span class="n">paramClient</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">CppParaClient</span><span class="o">&gt;</span><span class="p">();</span>
  <span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="n">paramClient</span><span class="o">-&gt;</span><span class="n">connect_server</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">flag</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">paramClient</span><span class="o">-&gt;</span><span class="n">get_values</span><span class="p">();</span>
  <span class="n">paramClient</span><span class="o">-&gt;</span><span class="n">update_param</span><span class="p">();</span>
  <span class="n">paramClient</span><span class="o">-&gt;</span><span class="n">get_values</span><span class="p">();</span>

  <span class="c1">// 5.释放资源。</span>
  <span class="n">rclcpp</span><span class="o">::</span><span class="n">shutdown</span><span class="p">();</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ol>
  <li>
    <p>由于在创建包的过程中已经指明了所有依赖项，不需要进行额外的配置，直接编译运行即可：<code class="language-plaintext highlighter-rouge">colcon build --packages-select cpp_para_client</code></p>
  </li>
  <li>
    <p>激活环境并运行节点：<code class="language-plaintext highlighter-rouge">. install/setup.bash</code>，先运行服务端节点<code class="language-plaintext highlighter-rouge">ros2 run cpp_para_server cppParaSerNode</code>，然后运行客户端节点<code class="language-plaintext highlighter-rouge">ros2 run cpp_para_client cppParaCliNode</code></p>
  </li>
</ol>

<p><img src="/assets/pics/ROS2_BASIC/4_cpp_params_client_result.png" alt="C/C++实现参数客户端" /></p>

<h2 id="43-使用python实现对节点参数的增删改查">4.3 使用Python实现对节点参数的增删改查</h2>

<blockquote>
  <p>参考内容</p>

  <p><a href="https://docs.ros.org/en/humble/Tutorials/Beginner-Client-Libraries/Using-Parameters-In-A-Class-Python.html">Using parameters in a class (Python)</a></p>

  <p><a href="https://www.bilibili.com/video/BV1LG411E7qT">2.5.4_参数服务_Python实现_01框架搭建</a></p>
</blockquote>

<h2 id="431-创建python节点参数的服务端">4.3.1 创建Python节点参数的服务端</h2>

<ol>
  <li>
    <p>创建功能包，包名为<code class="language-plaintext highlighter-rouge">python_para_ser</code>，节点名为<code class="language-plaintext highlighter-rouge">pythonParaSerNode</code>，依赖<code class="language-plaintext highlighter-rouge">rclpy</code>：<code class="language-plaintext highlighter-rouge">ros2 pkg create python_para_ser --build-type ament_python --node-name pythonParaSerNode --dependencies rclpy</code></p>
  </li>
  <li>
    <p>配置Vscode环境，在工作空间创建<code class="language-plaintext highlighter-rouge">.vscode</code>文件夹，并加入<code class="language-plaintext highlighter-rouge">settings.json</code>文件，添加<code class="language-plaintext highlighter-rouge">ROS2</code>的<code class="language-plaintext highlighter-rouge">include</code>环境：</p>
  </li>
</ol>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"C_Cpp.default.includePath"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"/opt/ros/humble/include/**"</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"python.analysis.include"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"/opt/ros/humble/local/lib/python3.10/dist-packages/**"</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ol>
  <li>创建节点参数服务：注意删除节点的参数，只能删除未被声明的内容：</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1. 导入包
</span><span class="kn">import</span> <span class="n">rclpy</span>
<span class="kn">from</span> <span class="n">rclpy.node</span> <span class="kn">import</span> <span class="n">Node</span>

<span class="c1"># 2. 创建节点参数服务节点
</span><span class="k">class</span> <span class="nc">PythonParaServer</span><span class="p">(</span><span class="n">Node</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 2.1 构造函数
</span>        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="sh">"</span><span class="s">pythonParaSerNode</span><span class="sh">"</span><span class="p">,</span><span class="n">allow_undeclared_parameters</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="c1"># 3 声明节点参数
</span>    <span class="k">def</span> <span class="nf">declare_param</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">declare_parameter</span><span class="p">(</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">zhangsan</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">declare_parameter</span><span class="p">(</span><span class="sh">"</span><span class="s">height</span><span class="sh">"</span><span class="p">,</span><span class="mf">1.88</span><span class="p">)</span>
        <span class="c1"># 3.1 声明未声明的参数，可以被删除
</span>        <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">rclpy</span><span class="p">.</span><span class="nc">Parameter</span><span class="p">(</span><span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">,</span><span class="n">value</span> <span class="o">=</span> <span class="sh">"</span><span class="s">20</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">set_parameters</span><span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">age</span><span class="p">])</span>

    <span class="c1"># 4 查询参数
</span>    <span class="k">def</span> <span class="nf">get_param</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">get_logger</span><span class="p">().</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">---- Get ----</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">params</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_parameters</span><span class="p">([</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">height</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">])</span>
        <span class="k">for</span> <span class="n">param</span> <span class="ow">in</span> <span class="n">params</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">get_logger</span><span class="p">().</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">%s ---&gt; %s</span><span class="sh">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">param</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">param</span><span class="p">.</span><span class="n">value</span><span class="p">))</span>

    <span class="c1"># 5 修改参数
</span>    <span class="k">def</span> <span class="nf">update_param</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">get_logger</span><span class="p">().</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">---- Change ---</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">set_parameters</span><span class="p">([</span><span class="n">rclpy</span><span class="p">.</span><span class="nc">Parameter</span><span class="p">(</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span><span class="n">value</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lisi</span><span class="sh">"</span><span class="p">)])</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">get_param</span><span class="p">()</span>

    <span class="c1"># 6 删除参数
</span>    <span class="k">def</span> <span class="nf">del_param</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">get_logger</span><span class="p">().</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">---- Delete ---</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">undeclare_parameter</span><span class="p">(</span><span class="sh">"</span><span class="s">age</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">params</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">get_parameters</span><span class="p">([</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">height</span><span class="sh">"</span><span class="p">])</span>
        <span class="k">for</span> <span class="n">param</span> <span class="ow">in</span> <span class="n">params</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">get_logger</span><span class="p">().</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">%s ---&gt; %s</span><span class="sh">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">param</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">param</span><span class="p">.</span><span class="n">value</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">init</span><span class="p">()</span>
    <span class="n">param_server</span> <span class="o">=</span> <span class="nc">PythonParaServer</span><span class="p">()</span>

    <span class="n">param_server</span><span class="p">.</span><span class="nf">declare_param</span><span class="p">()</span>
    <span class="n">param_server</span><span class="p">.</span><span class="nf">get_param</span><span class="p">()</span>
    <span class="n">param_server</span><span class="p">.</span><span class="nf">update_param</span><span class="p">()</span>
    <span class="n">param_server</span><span class="p">.</span><span class="nf">del_param</span><span class="p">()</span>

    <span class="n">rclpy</span><span class="p">.</span><span class="nf">spin</span><span class="p">(</span><span class="n">param_server</span><span class="p">)</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">shutdown</span><span class="p">()</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<ol>
  <li>
    <p>编译：<code class="language-plaintext highlighter-rouge">colcon build --packages-select python_para_ser</code></p>
  </li>
  <li>
    <p>激活环境：<code class="language-plaintext highlighter-rouge">. install/setup.bash</code></p>
  </li>
  <li>
    <p>运行节点：<code class="language-plaintext highlighter-rouge">ros2 run python_para_ser pythonParaSerNode</code></p>
  </li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pldz@pldz-pc:/mnt/hgfs/VMware/ROS2_DEMO/4_Chapter/code<span class="nv">$ </span>ros2 run python_para_ser pythonParaSerNode 
<span class="o">[</span>INFO] <span class="o">[</span>1683212289.084496335] <span class="o">[</span>pythonParaSerNode]: <span class="nt">----</span> Get <span class="nt">----</span>
<span class="o">[</span>INFO] <span class="o">[</span>1683212289.084918579] <span class="o">[</span>pythonParaSerNode]: name <span class="nt">---</span><span class="o">&gt;</span> zhangsan
<span class="o">[</span>INFO] <span class="o">[</span>1683212289.085258809] <span class="o">[</span>pythonParaSerNode]: height <span class="nt">---</span><span class="o">&gt;</span> 1.88
<span class="o">[</span>INFO] <span class="o">[</span>1683212289.085559614] <span class="o">[</span>pythonParaSerNode]: age <span class="nt">---</span><span class="o">&gt;</span> 20
<span class="o">[</span>INFO] <span class="o">[</span>1683212289.085874466] <span class="o">[</span>pythonParaSerNode]: <span class="nt">----</span> Change <span class="nt">---</span>
<span class="o">[</span>INFO] <span class="o">[</span>1683212289.086474845] <span class="o">[</span>pythonParaSerNode]: <span class="nt">----</span> Get <span class="nt">----</span>
<span class="o">[</span>INFO] <span class="o">[</span>1683212289.086867362] <span class="o">[</span>pythonParaSerNode]: name <span class="nt">---</span><span class="o">&gt;</span> lisi
<span class="o">[</span>INFO] <span class="o">[</span>1683212289.087193515] <span class="o">[</span>pythonParaSerNode]: height <span class="nt">---</span><span class="o">&gt;</span> 1.88
<span class="o">[</span>INFO] <span class="o">[</span>1683212289.087519418] <span class="o">[</span>pythonParaSerNode]: age <span class="nt">---</span><span class="o">&gt;</span> 20
<span class="o">[</span>INFO] <span class="o">[</span>1683212289.087884144] <span class="o">[</span>pythonParaSerNode]: <span class="nt">----</span> Delete <span class="nt">---</span>
<span class="o">[</span>INFO] <span class="o">[</span>1683212289.088266933] <span class="o">[</span>pythonParaSerNode]: name <span class="nt">---</span><span class="o">&gt;</span> lisi
<span class="o">[</span>INFO] <span class="o">[</span>1683212289.088594118] <span class="o">[</span>pythonParaSerNode]: height <span class="nt">---</span><span class="o">&gt;</span> 1.88
</code></pre></div></div>

<h2 id="432-创建python节点参数客户端">4.3.2 创建Python节点参数客户端</h2>

<ol>
  <li>
    <p>创建功能包，包名为<code class="language-plaintext highlighter-rouge">python_para_cli</code>，节点名为<code class="language-plaintext highlighter-rouge">pythonParaCliNode</code>，依赖<code class="language-plaintext highlighter-rouge">rclpy</code>：<code class="language-plaintext highlighter-rouge">ros2 pkg create python_para_cli --build-type ament_python --node-name pythonParaCliNode --dependencies rclpy</code></p>
  </li>
  <li>
    <p>创建节点参数客户端，值得注意的是需要连接到服务端节点，然后进行参数的增删改查操作，值得注意的是节点参数的客户端在Python中没有被明确封装，但是节点参数底层是通过服务和话题实现的，因此调用原始的服务和话题实现(原来教程连接：https://www.bilibili.com/video/BV1LG411E7qT)：</p>
  </li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1. 导入包
</span><span class="kn">import</span> <span class="n">rclpy</span>
<span class="kn">from</span> <span class="n">rclpy.node</span> <span class="kn">import</span> <span class="n">Node</span>
<span class="kn">from</span> <span class="n">rcl_interfaces.srv</span> <span class="kn">import</span> <span class="n">ListParameters</span>
<span class="kn">from</span> <span class="n">rcl_interfaces.srv</span> <span class="kn">import</span> <span class="n">GetParameters</span>
<span class="kn">from</span> <span class="n">rcl_interfaces.srv</span> <span class="kn">import</span> <span class="n">SetParameters</span>
<span class="kn">from</span> <span class="n">rcl_interfaces.msg</span> <span class="kn">import</span> <span class="n">ParameterType</span>
<span class="kn">from</span> <span class="n">rcl_interfaces.msg</span> <span class="kn">import</span> <span class="n">Parameter</span>
<span class="kn">from</span> <span class="n">rcl_interfaces.msg</span> <span class="kn">import</span> <span class="n">ParameterValue</span>
<span class="kn">from</span> <span class="n">ros2param.api</span> <span class="kn">import</span> <span class="n">get_parameter_value</span>

<span class="c1"># 2 创建客户节点
</span><span class="k">class</span> <span class="nc">PythonParaClient</span><span class="p">(</span><span class="n">Node</span><span class="p">):</span>
    <span class="c1"># 2.1 构造函数
</span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="sh">'</span><span class="s">pythonParaCliNode</span><span class="sh">'</span><span class="p">)</span>

    <span class="c1"># 3 连接服务节点
</span>    <span class="k">def</span> <span class="nf">list_params</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 3.1 创建客户端；
</span>        <span class="n">cli_list</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">create_client</span><span class="p">(</span><span class="n">ListParameters</span><span class="p">,</span> <span class="sh">'</span><span class="s">/pythonParaSerNode/list_parameters</span><span class="sh">'</span><span class="p">)</span>
        <span class="c1"># 3.2 等待服务连接；
</span>        <span class="k">while</span> <span class="ow">not</span> <span class="n">cli_list</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="n">timeout_sec</span><span class="o">=</span><span class="mf">1.0</span><span class="p">):</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">get_logger</span><span class="p">().</span><span class="nf">info</span><span class="p">(</span><span class="sh">'</span><span class="s">Waiting for connect ...</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">req</span> <span class="o">=</span> <span class="n">ListParameters</span><span class="p">.</span><span class="nc">Request</span><span class="p">()</span>
        <span class="n">future</span> <span class="o">=</span> <span class="n">cli_list</span><span class="p">.</span><span class="nf">call_async</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
        <span class="n">rclpy</span><span class="p">.</span><span class="nf">spin_until_future_complete</span><span class="p">(</span><span class="n">self</span><span class="p">,</span><span class="n">future</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">future</span><span class="p">.</span><span class="nf">result</span><span class="p">()</span>

    <span class="c1"># 4 获得所有参数
</span>    <span class="k">def</span> <span class="nf">get_params</span><span class="p">(</span><span class="n">self</span><span class="p">,</span><span class="n">names</span><span class="p">):</span>
        <span class="c1"># 4.1 创建客户端
</span>        <span class="n">cli_get</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">create_client</span><span class="p">(</span><span class="n">GetParameters</span><span class="p">,</span> <span class="sh">'</span><span class="s">/pythonParaSerNode/get_parameters</span><span class="sh">'</span><span class="p">)</span>
        <span class="c1"># 4.2 等待服务连接
</span>        <span class="k">while</span> <span class="ow">not</span> <span class="n">cli_get</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="n">timeout_sec</span><span class="o">=</span><span class="mf">1.0</span><span class="p">):</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">get_logger</span><span class="p">().</span><span class="nf">info</span><span class="p">(</span><span class="sh">'</span><span class="s">Waiting for connect ...</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">req</span> <span class="o">=</span> <span class="n">GetParameters</span><span class="p">.</span><span class="nc">Request</span><span class="p">()</span>
        <span class="n">req</span><span class="p">.</span><span class="n">names</span> <span class="o">=</span> <span class="n">names</span>
        <span class="n">future</span> <span class="o">=</span> <span class="n">cli_get</span><span class="p">.</span><span class="nf">call_async</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
        <span class="n">rclpy</span><span class="p">.</span><span class="nf">spin_until_future_complete</span><span class="p">(</span><span class="n">self</span><span class="p">,</span><span class="n">future</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">future</span><span class="p">.</span><span class="nf">result</span><span class="p">()</span>

    <span class="c1"># 5 更新参数服务值
</span>    <span class="k">def</span> <span class="nf">set_params</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 5.1 创建客户端
</span>        <span class="n">cli_set</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">create_client</span><span class="p">(</span><span class="n">SetParameters</span><span class="p">,</span> <span class="sh">'</span><span class="s">/pythonParaSerNode/set_parameters</span><span class="sh">'</span><span class="p">)</span>
        <span class="c1"># 5.2 等待服务连接
</span>        <span class="k">while</span> <span class="ow">not</span> <span class="n">cli_set</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="n">timeout_sec</span><span class="o">=</span><span class="mf">1.0</span><span class="p">):</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">get_logger</span><span class="p">().</span><span class="nf">info</span><span class="p">(</span><span class="sh">'</span><span class="s">Waiting for connect ...</span><span class="sh">'</span><span class="p">)</span>

        <span class="n">req</span> <span class="o">=</span> <span class="n">SetParameters</span><span class="p">.</span><span class="nc">Request</span><span class="p">()</span>

        <span class="n">p1</span> <span class="o">=</span> <span class="nc">Parameter</span><span class="p">()</span>
        <span class="n">p1</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span>
        <span class="n">p1</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="nf">get_parameter_value</span><span class="p">(</span><span class="n">string_value</span><span class="o">=</span><span class="sh">"</span><span class="s">zhangsan</span><span class="sh">"</span><span class="p">)</span>

        <span class="n">req</span><span class="p">.</span><span class="n">parameters</span> <span class="o">=</span> <span class="p">[</span><span class="n">p1</span><span class="p">]</span>
        <span class="n">future</span> <span class="o">=</span> <span class="n">cli_set</span><span class="p">.</span><span class="nf">call_async</span><span class="p">(</span><span class="n">req</span><span class="p">)</span>
        <span class="n">rclpy</span><span class="p">.</span><span class="nf">spin_until_future_complete</span><span class="p">(</span><span class="n">self</span><span class="p">,</span><span class="n">future</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">future</span><span class="p">.</span><span class="nf">result</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">init</span><span class="p">()</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">PythonParaClient</span><span class="p">()</span>

    <span class="c1"># 获取参数列表
</span>    <span class="n">client</span><span class="p">.</span><span class="nf">get_logger</span><span class="p">().</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">--------- List all parameters node ---------</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">list_params</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="n">result</span><span class="p">.</span><span class="n">names</span><span class="p">:</span>
        <span class="n">client</span><span class="p">.</span><span class="nf">get_logger</span><span class="p">().</span><span class="nf">info</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>

    <span class="n">client</span><span class="p">.</span><span class="nf">get_logger</span><span class="p">().</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">--------- Get ---------</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">height</span><span class="sh">"</span><span class="p">]</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">get_params</span><span class="p">(</span><span class="n">names</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">values</span><span class="p">)</span>

    <span class="n">client</span><span class="p">.</span><span class="nf">get_logger</span><span class="p">().</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">--------- Set ---------</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">set_params</span><span class="p">()</span>
    <span class="n">results</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">results</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="nf">get_params</span><span class="p">(</span><span class="n">names</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">values</span><span class="p">)</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">shutdown</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<ol>
  <li>
    <p>编译：<code class="language-plaintext highlighter-rouge">colcon build --packages-select python_para_cli</code></p>
  </li>
  <li>
    <p>激活环境：<code class="language-plaintext highlighter-rouge">. install/setup.bash</code></p>
  </li>
  <li>
    <p>先运行服务端节点<code class="language-plaintext highlighter-rouge">ros2 run python_para_ser pythonParaSerNode</code>，然后运行客户端节点<code class="language-plaintext highlighter-rouge">ros2 run python_para_cli pythonParaCliNode</code></p>
  </li>
</ol>

<p><img src="/assets/pics/ROS2_BASIC/4_py_params_result.png" alt="Python运行节点参数" /></p>

<h2 id="44-ros2节点参数小结">4.4 ROS2节点参数小结</h2>

<ul>
  <li>
    <ol>
      <li>节点参数可删除的内容必须是未被声明的</li>
    </ol>
  </li>
  <li>
    <ol>
      <li>客户端节点想修改服务节点的需要进行连接，连接成功之后才能进行增删改查</li>
    </ol>
  </li>
</ul>]]></content><author><name>pldz9</name></author><category term="ROS2_BASIC" /><summary type="html"><![CDATA[4.1 ROS2节点参数介绍 参考内容 Understanding parameters 在ROS2的通讯过程中，有一种信息记录某个节点的特征，例如turtlesim仿真时候的乌龟类型，背景的颜色等等，这一类节点设置的数据，通常采用节点参数(parameters)进行设置和操作，可以把节点参数认为是对节点的设置，可以对参数进行增删改查的操作 4.2 使用C/C++实现对节点参数的增删改查 示例创建一个节点参数的服务端，和一个节点参数的客户端，服务端用于实现后续客户端对它的参数进行增删改查操作 参考内容 Using parameters in a class (C++) 2.5.3_参数服务_C++实现_03客户端_01代码框架 4.2.1 创建C/C++节点参数的服务端 创建功能包，包名为cpp_para_ser，节点名为cppParaSerNode，依赖rclcpp：ros2 pkg create cpp_para_server --build-type ament_cmake --node-name cppParaSerNode --dependencies rclcpp 配置Vscode环境，在工作空间创建.vscode文件夹，并加入settings.json文件，添加ROS2的include环境： { "C_Cpp.default.includePath": [ "/opt/ros/humble/include/**", ], } 创建节点参数服务：注意删除节点的参数，只能删除未被声明的内容： // 1. 生成节点的头文件 #include "rclcpp/rclcpp.hpp" // 2. 定义节点参数服务端 class CppParamServer : public rclcpp::Node { public: // 2.1 构造函数，设置节点名，以及允许被删除的内容 CppParamServer() : Node("cppParamSerNode",rclcpp::NodeOptions().allow_undeclared_parameters(true)) {} // 2.2 创建默认的参数表 void declare_param() { // 2.2.1 声明参数并设置默认值 this-&gt;declare_parameter("name", "zhangsan"); this-&gt;declare_parameter("height", "1.8"); // 2.2.2 未声明的参数，该参数可以被删除 this-&gt;set_parameter(rclcpp::Parameter("age", "20")); } // 3 获取到现在的所有参数 void get_AllValue() { RCLCPP_INFO(this-&gt;get_logger(), "------------------ Get the params ----------------"); auto params = this-&gt;get_parameters({"name", "height", "age"}); for (auto &amp;param : params) { // 3.1 get_name函数获取参数名，value_to_string获取到参数的字符串值 RCLCPP_INFO(this-&gt;get_logger(), "parameter is %s, the value is %s", param.get_name().c_str(), param.value_to_string().c_str()); } } // 4 修改参数 void update_param() { RCLCPP_INFO(this-&gt;get_logger(), "------------------ Change the value ----------------"); this-&gt;set_parameter(rclcpp::Parameter("name", "lisi")); this-&gt;get_AllValue(); } // 5. 删除参数 void del_param() { RCLCPP_INFO(this-&gt;get_logger(), "------------------ Delete ----------------"); // 5.1 删除只能删除未声明的参数，不能删除声明过的参数 this-&gt;undeclare_parameter("age"); auto params = this-&gt;get_parameters({"name", "height"}); for (auto &amp;param : params) { // 5.1 get_name函数获取参数名，value_to_string获取到参数的字符串值 RCLCPP_INFO(this-&gt;get_logger(), "parameter is %s, the value is %s", param.get_name().c_str(), param.value_to_string().c_str()); } } }; int main(int argc, char **argv) { rclcpp::init(argc, argv); auto paramServer = std::make_shared&lt;CppParamServer&gt;(); // 执行对应的函数 paramServer-&gt;declare_param(); paramServer-&gt;get_AllValue(); paramServer-&gt;update_param(); paramServer-&gt;del_param(); rclcpp::spin(paramServer); rclcpp::shutdown(); return 0; } 由于在创建包的过程中已经指明了所有依赖项，不需要进行额外的配置，直接编译运行即可：colcon build --packages-select cpp_para_server 激活环境并运行节点：. install/setup.bash和ros2 run cpp_para_server cppParaSerNode 4.2.2 创建C/C++节点参数客户端 创建功能包，包名为cpp_para_client，节点名为cppParaCliNode，依赖rclcpp：ros2 pkg create cpp_para_client --build-type ament_cmake --node-name cppParaCliNode --dependencies rclcpp 配置Vscode环境，在工作空间创建.vscode文件夹，并加入settings.json文件，添加ROS2的include环境： { "C_Cpp.default.includePath": [ "/opt/ros/humble/include/**", ], } 创建节点参数客户端，值得注意的是需要连接到服务端节点，然后进行参数的增删改查操作： // 1.包含头文件； #include "rclcpp/rclcpp.hpp" using namespace std::chrono_literals; // 2.定义节点类； class CppParaClient : public rclcpp::Node { public: CppParaClient() : Node("cppParaCliNode") { // 2.1 连接到节点参数的服务节点,注意此时的第二个参数是连接的服务端节点名 paramClient = std::make_shared&lt;rclcpp::SyncParametersClient&gt;(this, "cppParamSerNode"); } // 3. 连接服务函数 bool connect_server() { // 3.1 等待服务连接 while (!paramClient-&gt;wait_for_service(1s)) { if (!rclcpp::ok()) { return false; } RCLCPP_INFO(this-&gt;get_logger(), "The server connect failed! "); } return true; } // 4. 查询参数 void get_values() { RCLCPP_INFO(this-&gt;get_logger(), "----------- Get the values -----------"); auto params = paramClient-&gt;get_parameters({"name", "height"}); for (auto &amp;param : params) { RCLCPP_INFO(this-&gt;get_logger(), "%s = %s", param.get_name().c_str(), param.value_to_string().c_str()); } } // 5. 修改参数 void update_param() { RCLCPP_INFO(this-&gt;get_logger(), "----------- Change the values -----------"); paramClient-&gt;set_parameters({rclcpp::Parameter("name", "lisi"), // 这是服务端不存在的参数，只有服务端设置了rclcpp::NodeOptions().allow_undeclared_parameters(true)时， // 这个参数才会被成功设置。 rclcpp::Parameter("sex", "man")}); } private: rclcpp::SyncParametersClient::SharedPtr paramClient; }; int main(int argc, char const *argv[]) { rclcpp::init(argc, argv); // 4.创建节点对象指针，调用参数操作函数； auto paramClient = std::make_shared&lt;CppParaClient&gt;(); bool flag = paramClient-&gt;connect_server(); if (!flag) { return 0; } paramClient-&gt;get_values(); paramClient-&gt;update_param(); paramClient-&gt;get_values(); // 5.释放资源。 rclcpp::shutdown(); return 0; } 由于在创建包的过程中已经指明了所有依赖项，不需要进行额外的配置，直接编译运行即可：colcon build --packages-select cpp_para_client 激活环境并运行节点：. install/setup.bash，先运行服务端节点ros2 run cpp_para_server cppParaSerNode，然后运行客户端节点ros2 run cpp_para_client cppParaCliNode 4.3 使用Python实现对节点参数的增删改查 参考内容 Using parameters in a class (Python) 2.5.4_参数服务_Python实现_01框架搭建 4.3.1 创建Python节点参数的服务端 创建功能包，包名为python_para_ser，节点名为pythonParaSerNode，依赖rclpy：ros2 pkg create python_para_ser --build-type ament_python --node-name pythonParaSerNode --dependencies rclpy 配置Vscode环境，在工作空间创建.vscode文件夹，并加入settings.json文件，添加ROS2的include环境： { "C_Cpp.default.includePath": [ "/opt/ros/humble/include/**" ], "python.analysis.include": [ "/opt/ros/humble/local/lib/python3.10/dist-packages/**" ] } 创建节点参数服务：注意删除节点的参数，只能删除未被声明的内容： # 1. 导入包 import rclpy from rclpy.node import Node # 2. 创建节点参数服务节点 class PythonParaServer(Node): def __init__(self): # 2.1 构造函数 super().__init__("pythonParaSerNode",allow_undeclared_parameters=True) # 3 声明节点参数 def declare_param(self): self.declare_parameter("name","zhangsan") self.declare_parameter("height",1.88) # 3.1 声明未声明的参数，可以被删除 self.age = rclpy.Parameter("age",value = "20") self.set_parameters([self.age]) # 4 查询参数 def get_param(self): self.get_logger().info("---- Get ----") params = self.get_parameters(["name","height","age"]) for param in params: self.get_logger().info("%s ---&gt; %s" % (param.name, param.value)) # 5 修改参数 def update_param(self): self.get_logger().info("---- Change ---") self.set_parameters([rclpy.Parameter("name",value = "lisi")]) self.get_param() # 6 删除参数 def del_param(self): self.get_logger().info("---- Delete ---") self.undeclare_parameter("age") params = self.get_parameters(["name","height"]) for param in params: self.get_logger().info("%s ---&gt; %s" % (param.name, param.value)) def main(): rclpy.init() param_server = PythonParaServer() param_server.declare_param() param_server.get_param() param_server.update_param() param_server.del_param() rclpy.spin(param_server) rclpy.shutdown() if __name__ == "__main__": main() 编译：colcon build --packages-select python_para_ser 激活环境：. install/setup.bash 运行节点：ros2 run python_para_ser pythonParaSerNode pldz@pldz-pc:/mnt/hgfs/VMware/ROS2_DEMO/4_Chapter/code$ ros2 run python_para_ser pythonParaSerNode [INFO] [1683212289.084496335] [pythonParaSerNode]: ---- Get ---- [INFO] [1683212289.084918579] [pythonParaSerNode]: name ---&gt; zhangsan [INFO] [1683212289.085258809] [pythonParaSerNode]: height ---&gt; 1.88 [INFO] [1683212289.085559614] [pythonParaSerNode]: age ---&gt; 20 [INFO] [1683212289.085874466] [pythonParaSerNode]: ---- Change --- [INFO] [1683212289.086474845] [pythonParaSerNode]: ---- Get ---- [INFO] [1683212289.086867362] [pythonParaSerNode]: name ---&gt; lisi [INFO] [1683212289.087193515] [pythonParaSerNode]: height ---&gt; 1.88 [INFO] [1683212289.087519418] [pythonParaSerNode]: age ---&gt; 20 [INFO] [1683212289.087884144] [pythonParaSerNode]: ---- Delete --- [INFO] [1683212289.088266933] [pythonParaSerNode]: name ---&gt; lisi [INFO] [1683212289.088594118] [pythonParaSerNode]: height ---&gt; 1.88 4.3.2 创建Python节点参数客户端 创建功能包，包名为python_para_cli，节点名为pythonParaCliNode，依赖rclpy：ros2 pkg create python_para_cli --build-type ament_python --node-name pythonParaCliNode --dependencies rclpy 创建节点参数客户端，值得注意的是需要连接到服务端节点，然后进行参数的增删改查操作，值得注意的是节点参数的客户端在Python中没有被明确封装，但是节点参数底层是通过服务和话题实现的，因此调用原始的服务和话题实现(原来教程连接：https://www.bilibili.com/video/BV1LG411E7qT)： # 1. 导入包 import rclpy from rclpy.node import Node from rcl_interfaces.srv import ListParameters from rcl_interfaces.srv import GetParameters from rcl_interfaces.srv import SetParameters from rcl_interfaces.msg import ParameterType from rcl_interfaces.msg import Parameter from rcl_interfaces.msg import ParameterValue from ros2param.api import get_parameter_value # 2 创建客户节点 class PythonParaClient(Node): # 2.1 构造函数 def __init__(self): super().__init__('pythonParaCliNode') # 3 连接服务节点 def list_params(self): # 3.1 创建客户端； cli_list = self.create_client(ListParameters, '/pythonParaSerNode/list_parameters') # 3.2 等待服务连接； while not cli_list.wait_for_service(timeout_sec=1.0): self.get_logger().info('Waiting for connect ...') req = ListParameters.Request() future = cli_list.call_async(req) rclpy.spin_until_future_complete(self,future) return future.result() # 4 获得所有参数 def get_params(self,names): # 4.1 创建客户端 cli_get = self.create_client(GetParameters, '/pythonParaSerNode/get_parameters') # 4.2 等待服务连接 while not cli_get.wait_for_service(timeout_sec=1.0): self.get_logger().info('Waiting for connect ...') req = GetParameters.Request() req.names = names future = cli_get.call_async(req) rclpy.spin_until_future_complete(self,future) return future.result() # 5 更新参数服务值 def set_params(self): # 5.1 创建客户端 cli_set = self.create_client(SetParameters, '/pythonParaSerNode/set_parameters') # 5.2 等待服务连接 while not cli_set.wait_for_service(timeout_sec=1.0): self.get_logger().info('Waiting for connect ...') req = SetParameters.Request() p1 = Parameter() p1.name = "name" p1.value = get_parameter_value(string_value="zhangsan") req.parameters = [p1] future = cli_set.call_async(req) rclpy.spin_until_future_complete(self,future) return future.result() def main(): rclpy.init() client = PythonParaClient() # 获取参数列表 client.get_logger().info("--------- List all parameters node ---------") response = client.list_params() for name in response.result.names: client.get_logger().info(name) client.get_logger().info("--------- Get ---------") names = ["name","height"] response = client.get_params(names) print(response.values) client.get_logger().info("--------- Set ---------") response = client.set_params() results = response.results response = client.get_params(names) print(response.values) rclpy.shutdown() if __name__ == "__main__": main() 编译：colcon build --packages-select python_para_cli 激活环境：. install/setup.bash 先运行服务端节点ros2 run python_para_ser pythonParaSerNode，然后运行客户端节点ros2 run python_para_cli pythonParaCliNode 4.4 ROS2节点参数小结 节点参数可删除的内容必须是未被声明的 客户端节点想修改服务节点的需要进行连接，连接成功之后才能进行增删改查]]></summary></entry><entry><title type="html">3 ROS2服务通讯基础</title><link href="http://localhost:4000/ros2_basic/2023-02-04-3_1_ROS2%E6%9C%8D%E5%8A%A1%E9%80%9A%E8%AE%AF.html" rel="alternate" type="text/html" title="3 ROS2服务通讯基础" /><published>2023-02-04T00:00:00+08:00</published><updated>2023-02-04T00:00:00+08:00</updated><id>http://localhost:4000/ros2_basic/3_1_ROS2%E6%9C%8D%E5%8A%A1%E9%80%9A%E8%AE%AF</id><content type="html" xml:base="http://localhost:4000/ros2_basic/2023-02-04-3_1_ROS2%E6%9C%8D%E5%8A%A1%E9%80%9A%E8%AE%AF.html"><![CDATA[<h1 id="31-服务通讯介绍">3.1 服务通讯介绍</h1>

<blockquote>
  <p>参考内容</p>

  <p><a href="https://docs.ros.org/en/humble/Tutorials/Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-ROS2-Services.html">Understanding services</a></p>
</blockquote>

<p>服务通讯是ROS2的一种基于请求响应式的通讯方式，与之前的话题通讯不同的是服务通讯不是连续的数据流式的通讯，而是需要特定的触发才能收到回复的模式。</p>

<p>服务通讯可以是单个服务端和和单个客户端直接的通讯，一对一的模式</p>

<p><img src="/assets/pics/ROS2_BASIC/3_Service-SingleServiceClient.gif" alt="一对一的服务通讯" /></p>

<p>服务通讯也可以是单个服务端和多个客户端通讯，一对多的模式</p>

<p><img src="/assets/pics/ROS2_BASIC/3_Service-MultipleServiceClient.gif" alt="一对多的服务通讯" /></p>

<h1 id="32-ros2服务通讯的基本流程">3.2 ROS2服务通讯的基本流程</h1>

<p>事实上，服务通讯和自定义的话题通讯的操作过程很类似，即将所需要利用到服务模块利用<code class="language-plaintext highlighter-rouge">ament_camke</code>工具编译成<code class="language-plaintext highlighter-rouge">.c</code>和<code class="language-plaintext highlighter-rouge">.py</code>的ROS2功能包，然后新建的功能包依赖这个服务功能包完成通讯。</p>

<h2 id="321-创建ros2服务通讯功能包的基本流程">3.2.1 创建ROS2服务通讯功能包的基本流程</h2>

<ul>
  <li>
    <ol>
      <li>创建ROS2功能包，功能包可以只用来作为存放自定义的<code class="language-plaintext highlighter-rouge">msg/srv/action</code>，不需要节点node的功能包，<strong>且<code class="language-plaintext highlighter-rouge">--build-type</code>必须是<code class="language-plaintext highlighter-rouge">ament_camke</code></strong> ，因为目前来看，Python的自定义的消息或者服务也需要通过cmake编译出来再调用，<strong>功能包必须是下划线的推荐命名方法，而不是大小写的驼峰，否则会报错</strong>，如下所示：</li>
    </ol>
  </li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  rosidl_adapter.parser.InvalidResourceName: <span class="s1">'xxxxx'</span> is an invalid
  package name.  It should have the pattern
  <span class="s1">'^(?!.*__)(?!.*_$)[a-z][a-z0-9_]*$'</span>
</code></pre></div></div>

<ul>
  <li>
    <ol>
      <li>在ROS2功能包内创建<code class="language-plaintext highlighter-rouge">srv</code>文件夹，里面存放自定义的<code class="language-plaintext highlighter-rouge">.srv</code>消息文件，并且 <strong><code class="language-plaintext highlighter-rouge">.srv</code>文件必须是大写开头的符合类的命名规则</strong></li>
    </ol>
  </li>
  <li>
    <ol>
      <li>配置<code class="language-plaintext highlighter-rouge">packages.xml</code>文件，都需要配置下面的内容(下面的配置项与<code class="language-plaintext highlighter-rouge">.srv</code>文件无关，是默认的固定配置)</li>
    </ol>
  </li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 这一项是针对在srv文件中可能用到的其他依赖项，例如geomtry_msgs等等，如过没有用到就不添加 --&gt;</span>
<span class="nt">&lt;depend&gt;</span>其他的depend<span class="nt">&lt;/depend&gt;</span>

<span class="c">&lt;!-- 下面三项是必须的 --&gt;</span>
<span class="nt">&lt;build_depend&gt;</span>rosidl_default_generators<span class="nt">&lt;/build_depend&gt;</span>
<span class="nt">&lt;exec_depend&gt;</span>rosidl_default_runtime<span class="nt">&lt;/exec_depend&gt;</span>
<span class="nt">&lt;member_of_group&gt;</span>rosidl_interface_packages<span class="nt">&lt;/member_of_group&gt;</span>
</code></pre></div></div>

<ul>
  <li>
    <ol>
      <li>配置<code class="language-plaintext highlighter-rouge">CMakeLists.txt</code>文件,<code class="language-plaintext highlighter-rouge">find_package</code>和<code class="language-plaintext highlighter-rouge">rosidl_generate_interfaces</code></li>
    </ol>
  </li>
</ul>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 0. 是针对在srv文件中可能用到的其他依赖项，例如geomtry_msgs等等，则需要添加</span>
<span class="c1"># find_package(geometry_msgs REQUIRED)</span>

<span class="c1"># 1. rosidl_default_generators是必须添加的内容</span>
<span class="nb">find_package</span><span class="p">(</span>rosidl_default_generators REQUIRED<span class="p">)</span>

<span class="c1"># 2. rosidl_generate_interfaces必须配置，里面添加srv文件位置</span>
<span class="nf">rosidl_generate_interfaces</span><span class="p">(</span><span class="si">${</span><span class="nv">PROJECT_NAME</span><span class="si">}</span>
<span class="c1"># 2.1 添加自定义的srv位置，例如存放在功能包的srv文件夹下的xxx.srv</span>
  <span class="s2">"srv/xxx.srv"</span>
<span class="c1"># 2.2 可选，如果xxx.srv依赖了其他的内容,例如依赖了geometry_msgs</span>
  DEPENDENCIES geometry_msgs
<span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>
    <ol>
      <li>编译功能包:<code class="language-plaintext highlighter-rouge">colcon build --packages-select &lt;功能包名&gt;</code></li>
    </ol>
  </li>
  <li>
    <ol>
      <li>此时激活<code class="language-plaintext highlighter-rouge">install</code>目录下的<code class="language-plaintext highlighter-rouge">setup.bash</code>如<code class="language-plaintext highlighter-rouge">. install/setup.bash</code>，可以通过<code class="language-plaintext highlighter-rouge">ros2 interface show &lt;功能包名称&gt;/srv/xxx.srv</code>查看到<code class="language-plaintext highlighter-rouge">xxx.srv</code>内容，此时编译好的<code class="language-plaintext highlighter-rouge">srv</code>的<code class="language-plaintext highlighter-rouge">.c</code>文件存放在<code class="language-plaintext highlighter-rouge">install/&lt;功能包名&gt;/include</code>下，<code class="language-plaintext highlighter-rouge">.py</code>文件则存放在<code class="language-plaintext highlighter-rouge">install/&lt;功能包名&gt;/local/</code></li>
    </ol>
  </li>
</ul>

<h2 id="322-创建ros2服务通讯功能包示例">3.2.2 创建ROS2服务通讯功能包示例</h2>

<ol>
  <li>
    <p>创建自定义消息功能包<code class="language-plaintext highlighter-rouge">srv_demo</code>，采用<code class="language-plaintext highlighter-rouge">ament_cmake</code>方式：<code class="language-plaintext highlighter-rouge">ros2 pkg create srv_demo --build-type ament_cmake</code></p>
  </li>
  <li>
    <p>在功能包内创建<code class="language-plaintext highlighter-rouge">srv</code>文件夹，其中存放<code class="language-plaintext highlighter-rouge">AddInt.srv</code>文件，<strong>需要利用到<code class="language-plaintext highlighter-rouge">---</code>符号作为分割，文件在<code class="language-plaintext highlighter-rouge">---</code>上面的内容作为请求体的参数，在<code class="language-plaintext highlighter-rouge">---</code>下面的内容作为响应体的参数</strong>，文件内容如下：</p>
  </li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">int32</span> <span class="n">num1</span>
<span class="n">int32</span> <span class="n">num2</span>
<span class="o">---</span>
<span class="n">int32</span> <span class="n">sum</span>
</code></pre></div></div>

<ol>
  <li>此时的功能包内部的目录结构如下：<code class="language-plaintext highlighter-rouge">tree -a</code></li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pldz@pldz-pc:~/share/ROS2_DEMO/3_Chapter/code/srv_demo<span class="nv">$ </span>tree <span class="nt">-a</span>
<span class="nb">.</span>
├── CMakeLists.txt
├── include
│   └── srv_demo
├── package.xml
├── src
└── srv
    └── AddInt.srv
</code></pre></div></div>

<ol>
  <li>配置<code class="language-plaintext highlighter-rouge">packages.xml</code>添加依赖项，由于<code class="language-plaintext highlighter-rouge">AddInt.srv</code>没有依赖任何的东西因此不需要添加其他的<code class="language-plaintext highlighter-rouge">depend</code>:</li>
</ol>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0"?&gt;</span>
<span class="cp">&lt;?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?&gt;</span>
<span class="nt">&lt;package</span> <span class="na">format=</span><span class="s">"3"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;name&gt;</span>msg_demo<span class="nt">&lt;/name&gt;</span>
  <span class="nt">&lt;version&gt;</span>0.0.0<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;description&gt;</span>TODO: Package description<span class="nt">&lt;/description&gt;</span>
  <span class="nt">&lt;maintainer</span> <span class="na">email=</span><span class="s">"pldz@R7000.com"</span><span class="nt">&gt;</span>pldz<span class="nt">&lt;/maintainer&gt;</span>
  <span class="nt">&lt;license&gt;</span>TODO: License declaration<span class="nt">&lt;/license&gt;</span>

  <span class="nt">&lt;buildtool_depend&gt;</span>ament_cmake<span class="nt">&lt;/buildtool_depend&gt;</span>

  <span class="c">&lt;!-- 构建自定义功能包的的必须依赖项 --&gt;</span>
  <span class="nt">&lt;buildtool_depend&gt;</span>rosidl_default_generators<span class="nt">&lt;/buildtool_depend&gt;</span>
  <span class="nt">&lt;exec_depend&gt;</span>rosidl_default_runtime<span class="nt">&lt;/exec_depend&gt;</span>
  <span class="nt">&lt;member_of_group&gt;</span>rosidl_interface_packages<span class="nt">&lt;/member_of_group&gt;</span>

  <span class="nt">&lt;test_depend&gt;</span>ament_lint_auto<span class="nt">&lt;/test_depend&gt;</span>
  <span class="nt">&lt;test_depend&gt;</span>ament_lint_common<span class="nt">&lt;/test_depend&gt;</span>

  <span class="nt">&lt;export&gt;</span>
    <span class="nt">&lt;build_type&gt;</span>ament_cmake<span class="nt">&lt;/build_type&gt;</span>
  <span class="nt">&lt;/export&gt;</span>
<span class="nt">&lt;/package&gt;</span>

</code></pre></div></div>

<ol>
  <li>配置<code class="language-plaintext highlighter-rouge">CMakeLists.txt</code>文件，添加构建自定义<code class="language-plaintext highlighter-rouge">AddInt.srv</code>的依赖：</li>
</ol>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cmake_minimum_required</span><span class="p">(</span>VERSION 3.8<span class="p">)</span>
<span class="nb">project</span><span class="p">(</span>srv_demo<span class="p">)</span>

<span class="nb">if</span><span class="p">(</span>CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES <span class="s2">"Clang"</span><span class="p">)</span>
  <span class="nb">add_compile_options</span><span class="p">(</span>-Wall -Wextra -Wpedantic<span class="p">)</span>
<span class="nb">endif</span><span class="p">()</span>

<span class="c1"># find dependencies</span>
<span class="nb">find_package</span><span class="p">(</span>ament_cmake REQUIRED<span class="p">)</span>
<span class="c1"># uncomment the following section in order to fill in</span>
<span class="c1"># further dependencies manually.</span>
<span class="c1"># find_package(&lt;dependency&gt; REQUIRED)</span>

<span class="c1"># 1. 构建自定义功能包必须的依赖</span>
<span class="nb">find_package</span><span class="p">(</span>rosidl_default_generators REQUIRED<span class="p">)</span>

<span class="c1"># 2. 配置自定义的srv的位置</span>
<span class="nf">rosidl_generate_interfaces</span><span class="p">(</span><span class="si">${</span><span class="nv">PROJECT_NAME</span><span class="si">}</span>
  <span class="s2">"srv/AddInt.srv"</span>
<span class="p">)</span>

<span class="nb">if</span><span class="p">(</span>BUILD_TESTING<span class="p">)</span>
  <span class="nb">find_package</span><span class="p">(</span>ament_lint_auto REQUIRED<span class="p">)</span>
  <span class="c1"># the following line skips the linter which checks for copyrights</span>
  <span class="c1"># comment the line when a copyright and license is added to all source files</span>
  <span class="nb">set</span><span class="p">(</span>ament_cmake_copyright_FOUND TRUE<span class="p">)</span>
  <span class="c1"># the following line skips cpplint (only works in a git repo)</span>
  <span class="c1"># comment the line when this package is in a git repo and when</span>
  <span class="c1"># a copyright and license is added to all source files</span>
  <span class="nb">set</span><span class="p">(</span>ament_cmake_cpplint_FOUND TRUE<span class="p">)</span>
  <span class="nf">ament_lint_auto_find_test_dependencies</span><span class="p">()</span>
<span class="nb">endif</span><span class="p">()</span>

<span class="nf">ament_package</span><span class="p">()</span>


</code></pre></div></div>

<ol>
  <li>
    <p>构建功能包：<code class="language-plaintext highlighter-rouge">colcon build --packages-select srv_demo</code></p>
  </li>
  <li>
    <p>查看自定义的消息：激活环境：<code class="language-plaintext highlighter-rouge">. install/setup.bash </code>，查看自定义消息<code class="language-plaintext highlighter-rouge">ros2 interface show srv_demo/srv/AddInt</code></p>
  </li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pldz@pldz-pc:~/share/ROS2_DEMO/3_Chapter/code<span class="nv">$ </span>colcon build <span class="nt">--packages-select</span> srv_demo
Starting <span class="o">&gt;&gt;&gt;</span> srv_demo
Finished <span class="o">&lt;&lt;&lt;</span> srv_demo <span class="o">[</span>12.2s]                     

Summary: 1 package finished <span class="o">[</span>12.5s]
pldz@pldz-pc:~/share/ROS2_DEMO/3_Chapter/code<span class="nv">$ </span><span class="nb">.</span> <span class="nb">install</span>/setup.bash 
pldz@pldz-pc:~/share/ROS2_DEMO/3_Chapter/code<span class="nv">$ </span>ros2 interface show srv_demo/srv/AddInt 
int32 num1
int32 num2
<span class="nt">---</span>
int32 <span class="nb">sum</span>
</code></pre></div></div>

<ol>
  <li>查看<code class="language-plaintext highlighter-rouge">instll</code>下面的文件：其中<code class="language-plaintext highlighter-rouge">.c</code>的class文件在<code class="language-plaintext highlighter-rouge">install/&lt;功能包名&gt;/include/&lt;功能包名&gt;/&lt;功能包名&gt;/msg/**</code>，<code class="language-plaintext highlighter-rouge">.py</code>在<code class="language-plaintext highlighter-rouge">install/&lt;功能包名&gt;/local/lib/python3.10/dist-packages/&lt;功能包名&gt;/msg/**</code>，后续Vscode可以通过配置<code class="language-plaintext highlighter-rouge">settings.json</code>添加提示</li>
</ol>

<p><img src="/assets/pics/ROS2_BASIC/3_custom_srv_package_path.png" alt="自定义话题通讯的功能包位置" /></p>

<h1 id="33-使用cc实现ros2服务通讯">3.3 使用C/C++实现ROS2服务通讯</h1>

<p>这里直接使用3.2.2创建的srv_demo服务功能包进行ROS2 C/C++的服务通讯的实现</p>

<blockquote>
  <p>参考内容：</p>

  <p><a href="https://docs.ros.org/en/humble/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Service-And-Client.html">Writing a simple service and client (C++)</a></p>

  <p><a href="https://www.bilibili.com/video/BV1Td4y1z7oi">2.3.3_服务通信_C++实现_01框架搭建</a></p>

  <p><a href="https://blog.csdn.net/qq_16893195/article/details/113571858">ROS2探索（三）service</a></p>
</blockquote>

<h2 id="331-创建cc服务通讯服务端功能包并编写节点文件">3.3.1 创建C/C++服务通讯服务端功能包并编写节点文件</h2>

<ol>
  <li>
    <p>创建功能包，其中功能包名称为<code class="language-plaintext highlighter-rouge">cpp_srv_server</code>，节点名为<code class="language-plaintext highlighter-rouge">cppSrvServerNode</code>：<code class="language-plaintext highlighter-rouge">ros2 pkg create cpp_srv_server --build-type ament_cmake --node-name cppSrvServerNode</code></p>
  </li>
  <li>
    <p>配置Vscode环境，在工作空间创建<code class="language-plaintext highlighter-rouge">.vscode</code>文件夹，并加入<code class="language-plaintext highlighter-rouge">settings.json</code>文件，添加<code class="language-plaintext highlighter-rouge">ROS2</code>的<code class="language-plaintext highlighter-rouge">include</code>环境和当前工作空间的<code class="language-plaintext highlighter-rouge">install</code>文件夹下的<code class="language-plaintext highlighter-rouge">srv_demo</code>功能包的<code class="language-plaintext highlighter-rouge">include</code>路径：</p>
  </li>
</ol>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"C_Cpp.default.includePath"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"/opt/ros/humble/include/**"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"./install/srv_demo/include/**"</span><span class="w">
    </span><span class="p">],</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><img src="/assets/pics/ROS2_BASIC/3_srv_cpp_vscode_config.png" alt="vscode的C/C++环境配置" /></p>

<ol>
  <li>编写服务端节点文件，主要包括导入包，创建服务节点，实现回调函数：</li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1. 调用自定义的服务文件</span>
<span class="c1">// 1.1 rclcpp和srv_demo两个功能包的头文件</span>
<span class="c1">// 如果有vscode的下划线提示，说明是settings.json没有配置好</span>
<span class="cp">#include</span> <span class="cpf">"rclcpp/rclcpp.hpp"</span><span class="cp">
#include</span> <span class="cpf">"srv_demo/srv/add_int.hpp"</span><span class="cp">
</span>
<span class="c1">// 1.2. 调用功能包下的自定义的服务，其中自定义的服务名已经变成了一个类名</span>
<span class="k">using</span> <span class="n">srv_demo</span><span class="o">::</span><span class="n">srv</span><span class="o">::</span><span class="n">AddInt</span><span class="p">;</span>

<span class="c1">// std_bind的占位符</span>
<span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">_1</span><span class="p">;</span>
<span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">_2</span><span class="p">;</span>

<span class="c1">// 2.定义节点类；</span>
<span class="k">class</span> <span class="nc">CppSrvServer</span><span class="o">:</span> <span class="k">public</span> <span class="n">rclcpp</span><span class="o">::</span><span class="n">Node</span><span class="p">{</span>
  <span class="nl">public:</span>
  <span class="c1">// 2.1 构造函数，其中节点名直接赋予cppSrvServerNode</span>
    <span class="n">CppSrvServer</span><span class="p">()</span><span class="o">:</span><span class="n">Node</span><span class="p">(</span><span class="s">"cppSrvServerNode"</span><span class="p">){</span>
      <span class="c1">// 2.2 创建服务端</span>
      <span class="n">server_</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">create_service</span><span class="o">&lt;</span><span class="n">AddInt</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"mySrvName"</span><span class="p">,</span><span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">CppSrvServer</span><span class="o">::</span><span class="n">addIntFunc</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="n">_1</span><span class="p">,</span> <span class="n">_2</span><span class="p">));</span>
      <span class="n">RCLCPP_INFO</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">get_logger</span><span class="p">(),</span><span class="s">"Server is starting ..."</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="k">private</span><span class="o">:</span>
    
    <span class="c1">// 3. 服务端的回调函数实现，其中参数的写法区分主要在于类型，参数数量包括请求体req和响应体rsp</span>
    <span class="kt">void</span> <span class="nf">addIntFunc</span><span class="p">(</span><span class="k">const</span> <span class="n">AddInt</span><span class="o">::</span><span class="n">Request</span><span class="o">::</span><span class="n">SharedPtr</span> <span class="n">req</span><span class="p">,</span> <span class="k">const</span> <span class="n">AddInt</span><span class="o">::</span><span class="n">Response</span><span class="o">::</span><span class="n">SharedPtr</span> <span class="n">rsp</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">rsp</span><span class="o">-&gt;</span><span class="n">sum</span> <span class="o">=</span> <span class="n">req</span><span class="o">-&gt;</span><span class="n">num1</span> <span class="o">+</span> <span class="n">req</span><span class="o">-&gt;</span><span class="n">num2</span><span class="p">;</span>
      <span class="n">RCLCPP_INFO</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">get_logger</span><span class="p">(),</span><span class="s">"request body :(%d,%d), response is :%d"</span><span class="p">,</span> <span class="n">req</span><span class="o">-&gt;</span><span class="n">num1</span><span class="p">,</span> <span class="n">req</span><span class="o">-&gt;</span><span class="n">num2</span><span class="p">,</span> <span class="n">rsp</span><span class="o">-&gt;</span><span class="n">sum</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// 4 服务的声明</span>
    <span class="n">rclcpp</span><span class="o">::</span><span class="n">Service</span><span class="o">&lt;</span><span class="n">AddInt</span><span class="o">&gt;::</span><span class="n">SharedPtr</span> <span class="n">server_</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
  <span class="n">rclcpp</span><span class="o">::</span><span class="n">init</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span><span class="n">argv</span><span class="p">);</span>
  <span class="k">auto</span> <span class="n">server_</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">CppSrvServer</span><span class="o">&gt;</span><span class="p">();</span>
  <span class="n">rclcpp</span><span class="o">::</span><span class="n">spin</span><span class="p">(</span><span class="n">server_</span><span class="p">);</span>
  <span class="n">rclcpp</span><span class="o">::</span><span class="n">shutdown</span><span class="p">();</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="332-配置cc服务通讯服务端功能包">3.3.2 配置C/C++服务通讯服务端功能包</h2>

<ol>
  <li>配置<code class="language-plaintext highlighter-rouge">packages.xml</code>文件，添加依赖项有<code class="language-plaintext highlighter-rouge">rclcpp</code>用于构建节点，和<code class="language-plaintext highlighter-rouge">srv_demo</code>用于构建<code class="language-plaintext highlighter-rouge">AddInt</code>：</li>
</ol>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0"?&gt;</span>
<span class="cp">&lt;?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?&gt;</span>
<span class="nt">&lt;package</span> <span class="na">format=</span><span class="s">"3"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;name&gt;</span>cpp_srv_server<span class="nt">&lt;/name&gt;</span>
  <span class="nt">&lt;version&gt;</span>0.0.0<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;description&gt;</span>TODO: Package description<span class="nt">&lt;/description&gt;</span>
  <span class="nt">&lt;maintainer</span> <span class="na">email=</span><span class="s">"pldz@R7000.com"</span><span class="nt">&gt;</span>pldz<span class="nt">&lt;/maintainer&gt;</span>
  <span class="nt">&lt;license&gt;</span>TODO: License declaration<span class="nt">&lt;/license&gt;</span>

  <span class="nt">&lt;buildtool_depend&gt;</span>ament_cmake<span class="nt">&lt;/buildtool_depend&gt;</span>

  <span class="nt">&lt;test_depend&gt;</span>ament_lint_auto<span class="nt">&lt;/test_depend&gt;</span>
  <span class="nt">&lt;test_depend&gt;</span>ament_lint_common<span class="nt">&lt;/test_depend&gt;</span>

  <span class="c">&lt;!-- 依赖rclcpp创建节点和自定义的服务功能包 --&gt;</span>
  <span class="nt">&lt;depend&gt;</span>rclcpp<span class="nt">&lt;/depend&gt;</span>
  <span class="nt">&lt;depend&gt;</span>srv_demo<span class="nt">&lt;/depend&gt;</span>

  <span class="nt">&lt;export&gt;</span>
    <span class="nt">&lt;build_type&gt;</span>ament_cmake<span class="nt">&lt;/build_type&gt;</span>
  <span class="nt">&lt;/export&gt;</span>
<span class="nt">&lt;/package&gt;</span>

</code></pre></div></div>

<ol>
  <li>配置<code class="language-plaintext highlighter-rouge">CMakeLists.txt</code>：</li>
</ol>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cmake_minimum_required</span><span class="p">(</span>VERSION 3.8<span class="p">)</span>
<span class="nb">project</span><span class="p">(</span>cpp_srv_server<span class="p">)</span>

<span class="nb">if</span><span class="p">(</span>CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES <span class="s2">"Clang"</span><span class="p">)</span>
  <span class="nb">add_compile_options</span><span class="p">(</span>-Wall -Wextra -Wpedantic<span class="p">)</span>
<span class="nb">endif</span><span class="p">()</span>

<span class="c1"># find dependencies</span>
<span class="nb">find_package</span><span class="p">(</span>ament_cmake REQUIRED<span class="p">)</span>
<span class="c1"># uncomment the following section in order to fill in</span>
<span class="c1"># further dependencies manually.</span>
<span class="c1"># find_package(&lt;dependency&gt; REQUIRED)</span>

<span class="c1"># 1. 列出依赖项的包</span>
<span class="nb">find_package</span><span class="p">(</span>rclcpp REQUIRED<span class="p">)</span>
<span class="nb">find_package</span><span class="p">(</span>srv_demo REQUIRED<span class="p">)</span>

<span class="c1"># 2. 默认是已经创建了构建节点的文件配置</span>
<span class="nb">add_executable</span><span class="p">(</span>cppSrvServerNode src/cppSrvServerNode.cpp<span class="p">)</span>

<span class="c1"># 3. 默认已经包括&lt;INSTALL_INTERFACE&gt;的路径也不用更改</span>
<span class="nb">target_include_directories</span><span class="p">(</span>cppSrvServerNode PUBLIC
  $&lt;BUILD_INTERFACE:<span class="si">${</span><span class="nv">CMAKE_CURRENT_SOURCE_DIR</span><span class="si">}</span>/include&gt;
  $&lt;INSTALL_INTERFACE:include&gt;<span class="p">)</span>
<span class="nb">target_compile_features</span><span class="p">(</span>cppSrvServerNode PUBLIC c_std_99 cxx_std_17<span class="p">)</span>  <span class="c1"># Require C99 and C++17</span>

<span class="c1"># 4. ament工具构建节点的依赖配置</span>
<span class="nf">ament_target_dependencies</span><span class="p">(</span>
  cppSrvServerNode
  rclcpp
  srv_demo
<span class="p">)</span>

<span class="c1"># 5. Install配置，默认ros2 run &lt;包名&gt;的配置</span>
<span class="nb">install</span><span class="p">(</span>TARGETS cppSrvServerNode
  DESTINATION lib/<span class="si">${</span><span class="nv">PROJECT_NAME</span><span class="si">}</span><span class="p">)</span>

<span class="nb">if</span><span class="p">(</span>BUILD_TESTING<span class="p">)</span>
  <span class="nb">find_package</span><span class="p">(</span>ament_lint_auto REQUIRED<span class="p">)</span>
  <span class="c1"># the following line skips the linter which checks for copyrights</span>
  <span class="c1"># comment the line when a copyright and license is added to all source files</span>
  <span class="nb">set</span><span class="p">(</span>ament_cmake_copyright_FOUND TRUE<span class="p">)</span>
  <span class="c1"># the following line skips cpplint (only works in a git repo)</span>
  <span class="c1"># comment the line when this package is in a git repo and when</span>
  <span class="c1"># a copyright and license is added to all source files</span>
  <span class="nb">set</span><span class="p">(</span>ament_cmake_cpplint_FOUND TRUE<span class="p">)</span>
  <span class="nf">ament_lint_auto_find_test_dependencies</span><span class="p">()</span>
<span class="nb">endif</span><span class="p">()</span>

<span class="c1"># 6. 生成包的环境</span>
<span class="nf">ament_package</span><span class="p">()</span>

</code></pre></div></div>

<h2 id="333-编译并运行cc服务通讯服务端">3.3.3 编译并运行C/C++服务通讯服务端</h2>

<ol>
  <li>
    <p>编译： <code class="language-plaintext highlighter-rouge">colcon build --packages-select cpp_srv_server</code></p>
  </li>
  <li>
    <p>激活环境：<code class="language-plaintext highlighter-rouge">. install/setup.bash</code></p>
  </li>
  <li>
    <p>运行：<code class="language-plaintext highlighter-rouge">ros2 run cpp_srv_server cppSrvServerNode</code></p>
  </li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pldz@pldz-pc:~/share/ROS2_DEMO/3_Chapter/code<span class="nv">$ </span>colcon build <span class="nt">--packages-select</span> cpp_srv_server
Starting <span class="o">&gt;&gt;&gt;</span> cpp_srv_server
Finished <span class="o">&lt;&lt;&lt;</span> cpp_srv_server <span class="o">[</span>20.6s]                       
                      
Summary: 1 package finished <span class="o">[</span>21.0s]
pldz@pldz-pc:~/share/ROS2_DEMO/3_Chapter/code<span class="nv">$ </span><span class="nb">.</span> <span class="nb">install</span>/setup.bash 
pldz@pldz-pc:~/share/ROS2_DEMO/3_Chapter/code<span class="nv">$ </span>ros2 run cpp_srv_server cppSrvServerNode 
<span class="o">[</span>INFO] <span class="o">[</span>1683125184.734934447] <span class="o">[</span>cppSrvServerNode]: Server is starting ...
^C[INFO] <span class="o">[</span>1683125186.240946812] <span class="o">[</span>rclcpp]: signal_handler<span class="o">(</span><span class="nv">signum</span><span class="o">=</span>2<span class="o">)</span>
</code></pre></div></div>

<h2 id="334-创建cc服务通讯客户端功能包并编写节点文件">3.3.4 创建C/C++服务通讯客户端功能包并编写节点文件</h2>

<ol>
  <li>
    <p>创建功能包，功能包名为<code class="language-plaintext highlighter-rouge">cpp_srv_client</code>，节点名称为<code class="language-plaintext highlighter-rouge">cppSrvClientNode</code>，依赖<code class="language-plaintext highlighter-rouge">rclcpp</code>和<code class="language-plaintext highlighter-rouge">srv_demo</code>：<code class="language-plaintext highlighter-rouge">ros2 pkg create cpp_srv_client --build-type ament_cmake --node-name cppSrvClientNode --dependencies rclcpp srv_demo</code></p>
  </li>
  <li>
    <p>编写客户端节点，注意在此过程中需要和 <strong>服务端的连接进行判断，以及发送的请求是否能够收到返回值的用法的操作</strong>：</p>
  </li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1. 调用自定义的服务文件</span>
<span class="c1">// 1.1 rclcpp和srv_demo两个功能包的头文件</span>
<span class="cp">#include</span> <span class="cpf">"rclcpp/rclcpp.hpp"</span><span class="cp">
#include</span> <span class="cpf">"srv_demo/srv/add_int.hpp"</span><span class="cp">
</span>
<span class="c1">// 1.2. 调用功能包下的自定义的服务，其中自定义的服务名已经变成了一个类名</span>
<span class="k">using</span> <span class="n">srv_demo</span><span class="o">::</span><span class="n">srv</span><span class="o">::</span><span class="n">AddInt</span><span class="p">;</span>

<span class="c1">// 时间函数用于持续访问服务端</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="o">::</span><span class="n">chrono_literals</span><span class="p">;</span>

<span class="c1">// 2.定义节点类；</span>
<span class="k">class</span> <span class="nc">CppSrvClient</span><span class="o">:</span> <span class="k">public</span> <span class="n">rclcpp</span><span class="o">::</span><span class="n">Node</span><span class="p">{</span>
  <span class="nl">public:</span>
    <span class="n">CppSrvClient</span><span class="p">()</span><span class="o">:</span><span class="n">Node</span><span class="p">(</span><span class="s">"cppSrvClientNode"</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="c1">// 2.1 创建客户端,并绑定服务通讯名称为mySrvName</span>
      <span class="n">client_</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">create_client</span><span class="o">&lt;</span><span class="n">AddInt</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"mySrvName"</span><span class="p">);</span>
      <span class="n">RCLCPP_INFO</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">get_logger</span><span class="p">(),</span><span class="s">"Client is starting  ..."</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="c1">// 2.2 等待与服务的连接</span>
    <span class="kt">bool</span> <span class="nf">connect_server</span><span class="p">(){</span>
      <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">client_</span><span class="o">-&gt;</span><span class="n">wait_for_service</span><span class="p">(</span><span class="mx">1s</span><span class="p">))</span>
      <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">rclcpp</span><span class="o">::</span><span class="n">ok</span><span class="p">())</span>
        <span class="p">{</span>
          <span class="n">RCLCPP_INFO</span><span class="p">(</span><span class="n">rclcpp</span><span class="o">::</span><span class="n">get_logger</span><span class="p">(</span><span class="s">"rclcpp"</span><span class="p">),</span><span class="s">"Interrupted while waiting for the service. Exiting."</span><span class="p">);</span>
          <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">RCLCPP_INFO</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">get_logger</span><span class="p">(),</span><span class="s">"service not available, waiting again..."</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// 2.3 客户端发送请求；</span>
    <span class="n">rclcpp</span><span class="o">::</span><span class="n">Client</span><span class="o">&lt;</span><span class="n">srv_demo</span><span class="o">::</span><span class="n">srv</span><span class="o">::</span><span class="n">AddInt</span><span class="o">&gt;::</span><span class="n">FutureAndRequestId</span> <span class="nf">send_request</span><span class="p">(</span><span class="kt">int32_t</span> <span class="n">num1</span><span class="p">,</span> <span class="kt">int32_t</span> <span class="n">num2</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="k">auto</span> <span class="n">request</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">AddInt</span><span class="o">::</span><span class="n">Request</span><span class="o">&gt;</span><span class="p">();</span>
      <span class="n">request</span><span class="o">-&gt;</span><span class="n">num1</span> <span class="o">=</span> <span class="n">num1</span><span class="p">;</span>
      <span class="n">request</span><span class="o">-&gt;</span><span class="n">num2</span> <span class="o">=</span> <span class="n">num2</span><span class="p">;</span>
      <span class="c1">// 2.3.1 发送请求</span>
      <span class="k">auto</span> <span class="n">response</span> <span class="o">=</span> <span class="n">client_</span><span class="o">-&gt;</span><span class="n">async_send_request</span><span class="p">(</span><span class="n">request</span><span class="p">);</span>
      <span class="k">return</span> <span class="n">response</span><span class="p">;</span>
    <span class="p">}</span>

  <span class="k">private</span><span class="o">:</span>
    <span class="c1">// 2.4 服务通讯客户端的声明</span>
    <span class="n">rclcpp</span><span class="o">::</span><span class="n">Client</span><span class="o">&lt;</span><span class="n">AddInt</span><span class="o">&gt;::</span><span class="n">SharedPtr</span> <span class="n">client_</span><span class="p">;</span>
<span class="p">};</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
  <span class="c1">// 3. 初始化ROS2客户端</span>
  <span class="n">rclcpp</span><span class="o">::</span><span class="n">init</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span><span class="n">argv</span><span class="p">);</span>

  <span class="c1">// 3.1 创建对象指针并调用其功能；</span>
  <span class="k">auto</span> <span class="n">cppSrvClientNode</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">CppSrvClient</span><span class="o">&gt;</span><span class="p">();</span>
  <span class="c1">// 3.2 连接客户端</span>
  <span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="n">cppSrvClientNode</span><span class="o">-&gt;</span><span class="n">connect_server</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">flag</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">RCLCPP_INFO</span><span class="p">(</span><span class="n">rclcpp</span><span class="o">::</span><span class="n">get_logger</span><span class="p">(</span><span class="s">"rclcpp"</span><span class="p">),</span><span class="s">"Connect failed! "</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// 3.3 发送请求并等待响应</span>
  <span class="k">auto</span> <span class="n">response</span> <span class="o">=</span> <span class="n">cppSrvClientNode</span><span class="o">-&gt;</span><span class="n">send_request</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">200</span><span class="p">);</span>

   <span class="c1">// 3.4 节点处理响应</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">rclcpp</span><span class="o">::</span><span class="n">spin_until_future_complete</span><span class="p">(</span><span class="n">cppSrvClientNode</span><span class="p">,</span><span class="n">response</span><span class="p">)</span> <span class="o">==</span> <span class="n">rclcpp</span><span class="o">::</span><span class="n">FutureReturnCode</span><span class="o">::</span><span class="n">SUCCESS</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">RCLCPP_INFO</span><span class="p">(</span><span class="n">cppSrvClientNode</span><span class="o">-&gt;</span><span class="n">get_logger</span><span class="p">(),</span><span class="s">"The response is :%d!"</span><span class="p">,</span> <span class="n">response</span><span class="p">.</span><span class="n">get</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">sum</span><span class="p">);</span>

  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="n">RCLCPP_INFO</span><span class="p">(</span><span class="n">cppSrvClientNode</span><span class="o">-&gt;</span><span class="n">get_logger</span><span class="p">(),</span><span class="s">"Request error"</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">rclcpp</span><span class="o">::</span><span class="n">shutdown</span><span class="p">();</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="335-编译并运行cc服务通讯客户端节点">3.3.5 编译并运行C/C++服务通讯客户端节点</h2>

<ol>
  <li>
    <p>由于在创建包的过程中已经指明了所有依赖项，不需要进行额外的配置，直接编译运行即可：<code class="language-plaintext highlighter-rouge">colcon build --packages-select cpp_srv_client</code></p>
  </li>
  <li>
    <p>激活环境并运行节点</p>
  </li>
</ol>

<p><img src="/assets/pics/ROS2_BASIC/3_cpp_srv_result.png" alt="C/C++实现服务通讯" /></p>

<h1 id="34-使用python实现ros2服务通讯">3.4 使用Python实现ROS2服务通讯</h1>

<blockquote>
  <p>参考内容</p>

  <p><a href="https://docs.ros.org/en/humble/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.html">Writing a simple service and client (Python)</a></p>

  <p><a href="https://www.bilibili.com/video/BV15V4y1T7JK">2.3.4_服务通信_Python实现_01框架搭建</a></p>
</blockquote>

<h2 id="341-创建python服务通讯服务端功能包并编写节点文件">3.4.1 创建Python服务通讯服务端功能包并编写节点文件</h2>

<ol>
  <li>
    <p>创建功能包，包名为<code class="language-plaintext highlighter-rouge">python_srv_server</code>，节点名为<code class="language-plaintext highlighter-rouge">pythonSrvServerNode</code>：<code class="language-plaintext highlighter-rouge">ros2 pkg create python_srv_server --build-type ament_python --node-name pythonSrvServerNode</code></p>
  </li>
  <li>
    <p>配置Vscode，主要添加功能包的提示环境，编辑<code class="language-plaintext highlighter-rouge">settings.json</code>：</p>
  </li>
</ol>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"C_Cpp.default.includePath"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"/opt/ros/humble/include/**"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"./install/srv_demo/include/**"</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"python.analysis.include"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"/opt/ros/humble/local/lib/python3.10/dist-packages/**"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"./install/srv_demo/local/lib/python3.10/dist-packages/**"</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><img src="/assets/pics/ROS2_BASIC/3_srv_py_vscode_config.png" alt="配置vscode的Python环境" /></p>

<ol>
  <li>编写Python服务端节点文件：</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">rclpy</span>
<span class="kn">from</span> <span class="n">rclpy.node</span> <span class="kn">import</span> <span class="n">Node</span>

<span class="c1"># 1. 导入包，其中的类名等于服务文件名称
</span><span class="kn">from</span> <span class="n">srv_demo.srv</span> <span class="kn">import</span> <span class="n">AddInt</span>

<span class="c1"># 2. 定义服务端节点
</span><span class="k">class</span> <span class="nc">PythonSrvServer</span><span class="p">(</span><span class="n">Node</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="sh">'</span><span class="s">pythonSrvServerNode</span><span class="sh">'</span><span class="p">)</span>
        <span class="c1"># 2.1 创建服务端
</span>        <span class="n">self</span><span class="p">.</span><span class="n">srver_</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">create_service</span><span class="p">(</span><span class="n">AddInt</span><span class="p">,</span> <span class="sh">'</span><span class="s">mySrvName</span><span class="sh">'</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">addIntFunc</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">get_logger</span><span class="p">().</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">Server is starting ...</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># 2.2 服务端的处理回调函数
</span>    <span class="k">def</span> <span class="nf">addIntFunc</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">request</span><span class="p">:</span><span class="n">AddInt</span><span class="p">,</span> <span class="n">response</span><span class="p">:</span><span class="n">AddInt</span><span class="p">):</span>
        <span class="n">response</span><span class="p">.</span><span class="nb">sum</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">num1</span> <span class="o">+</span> <span class="n">request</span><span class="p">.</span><span class="n">num2</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">get_logger</span><span class="p">().</span><span class="nf">info</span><span class="p">(</span><span class="sh">'</span><span class="s">The request is :{} {},Response is :{}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">num1</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">num2</span><span class="p">,</span> <span class="n">response</span><span class="p">.</span><span class="nb">sum</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">response</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">init</span><span class="p">()</span>
    <span class="n">pythonSrvServerNode</span> <span class="o">=</span> <span class="nc">PythonSrvServer</span><span class="p">()</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">spin</span><span class="p">(</span><span class="n">pythonSrvServerNode</span><span class="p">)</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">shutdown</span><span class="p">()</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="342-配置python服务通讯服务端功能包">3.4.2 配置Python服务通讯服务端功能包</h2>

<ol>
  <li>配置<code class="language-plaintext highlighter-rouge">packages.xml</code>增加<code class="language-plaintext highlighter-rouge">rclpy</code>和<code class="language-plaintext highlighter-rouge">srv_demo</code>两个依赖项，注意Python本身是可执行文件，因此它的为<code class="language-plaintext highlighter-rouge">&lt;exec_depend&gt;</code>与<code class="language-plaintext highlighter-rouge">C/C++</code>的<code class="language-plaintext highlighter-rouge">&lt;depend&gt;</code>关键字不同：</li>
</ol>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0"?&gt;</span>
<span class="cp">&lt;?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?&gt;</span>
<span class="nt">&lt;package</span> <span class="na">format=</span><span class="s">"3"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;name&gt;</span>python_srv_server<span class="nt">&lt;/name&gt;</span>
  <span class="nt">&lt;version&gt;</span>0.0.0<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;description&gt;</span>TODO: Package description<span class="nt">&lt;/description&gt;</span>
  <span class="nt">&lt;maintainer</span> <span class="na">email=</span><span class="s">"pldz@R7000.com"</span><span class="nt">&gt;</span>pldz<span class="nt">&lt;/maintainer&gt;</span>
  <span class="nt">&lt;license&gt;</span>TODO: License declaration<span class="nt">&lt;/license&gt;</span>

  <span class="c">&lt;!-- 添加依赖项的包，注意是exec_depend --&gt;</span>
  <span class="nt">&lt;exec_depend&gt;</span>rclpy<span class="nt">&lt;/exec_depend&gt;</span>
  <span class="nt">&lt;exec_depend&gt;</span>srv_demo<span class="nt">&lt;/exec_depend&gt;</span>

  <span class="nt">&lt;test_depend&gt;</span>ament_copyright<span class="nt">&lt;/test_depend&gt;</span>
  <span class="nt">&lt;test_depend&gt;</span>ament_flake8<span class="nt">&lt;/test_depend&gt;</span>
  <span class="nt">&lt;test_depend&gt;</span>ament_pep257<span class="nt">&lt;/test_depend&gt;</span>
  <span class="nt">&lt;test_depend&gt;</span>python3-pytest<span class="nt">&lt;/test_depend&gt;</span>

  <span class="nt">&lt;export&gt;</span>
    <span class="nt">&lt;build_type&gt;</span>ament_python<span class="nt">&lt;/build_type&gt;</span>
  <span class="nt">&lt;/export&gt;</span>
<span class="nt">&lt;/package&gt;</span>

</code></pre></div></div>

<ol>
  <li>配置<code class="language-plaintext highlighter-rouge">setup.py</code>文件，事实上，我们已经创建包的时候已经指定了节点名，其实应该是不用配置生成节点的<code class="language-plaintext highlighter-rouge">main</code>入口的：</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">setuptools</span> <span class="kn">import</span> <span class="n">setup</span>

<span class="n">package_name</span> <span class="o">=</span> <span class="sh">'</span><span class="s">python_srv_server</span><span class="sh">'</span>

<span class="nf">setup</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="n">package_name</span><span class="p">,</span>
    <span class="n">version</span><span class="o">=</span><span class="sh">'</span><span class="s">0.0.0</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">packages</span><span class="o">=</span><span class="p">[</span><span class="n">package_name</span><span class="p">],</span>
    <span class="n">data_files</span><span class="o">=</span><span class="p">[</span>
        <span class="p">(</span><span class="sh">'</span><span class="s">share/ament_index/resource_index/packages</span><span class="sh">'</span><span class="p">,</span>
            <span class="p">[</span><span class="sh">'</span><span class="s">resource/</span><span class="sh">'</span> <span class="o">+</span> <span class="n">package_name</span><span class="p">]),</span>
        <span class="p">(</span><span class="sh">'</span><span class="s">share/</span><span class="sh">'</span> <span class="o">+</span> <span class="n">package_name</span><span class="p">,</span> <span class="p">[</span><span class="sh">'</span><span class="s">package.xml</span><span class="sh">'</span><span class="p">]),</span>
    <span class="p">],</span>
    <span class="n">install_requires</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">setuptools</span><span class="sh">'</span><span class="p">],</span>
    <span class="n">zip_safe</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">maintainer</span><span class="o">=</span><span class="sh">'</span><span class="s">pldz</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">maintainer_email</span><span class="o">=</span><span class="sh">'</span><span class="s">pldz@R7000.com</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="sh">'</span><span class="s">TODO: Package description</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">license</span><span class="o">=</span><span class="sh">'</span><span class="s">TODO: License declaration</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">tests_require</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">pytest</span><span class="sh">'</span><span class="p">],</span>
    <span class="c1"># 配置节点main函数入口
</span>    <span class="n">entry_points</span><span class="o">=</span><span class="p">{</span>
        <span class="sh">'</span><span class="s">console_scripts</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span>
            <span class="sh">'</span><span class="s">pythonSrvServerNode = python_srv_server.pythonSrvServerNode:main</span><span class="sh">'</span>
        <span class="p">],</span>
    <span class="p">},</span>
<span class="p">)</span>

</code></pre></div></div>

<h2 id="343-编译并运行python服务通讯服务端功能包">3.4.3 编译并运行Python服务通讯服务端功能包</h2>

<ol>
  <li>
    <p>编译：<code class="language-plaintext highlighter-rouge">colcon build --packages-select python_srv_server</code></p>
  </li>
  <li>
    <p>激活环境：<code class="language-plaintext highlighter-rouge">. install/setup.bash</code></p>
  </li>
  <li>
    <p>运行节点：<code class="language-plaintext highlighter-rouge">ros2 run python_srv_server pythonSrvServerNode</code></p>
  </li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pldz@pldz-pc:~/share/ROS2_DEMO/3_Chapter/code<span class="nv">$ </span>colcon build <span class="nt">--packages-select</span> python_srv_server
Starting <span class="o">&gt;&gt;&gt;</span> python_srv_server
<span class="nt">---</span> stderr: python_srv_server                   
/usr/lib/python3/dist-packages/setuptools/command/install.py:34: SetuptoolsDeprecationWarning: setup.py <span class="nb">install </span>is deprecated. Use build and pip and other standards-based tools.
  warnings.warn<span class="o">(</span>
<span class="nt">---</span>
Finished <span class="o">&lt;&lt;&lt;</span> python_srv_server <span class="o">[</span>2.18s]

Summary: 1 package finished <span class="o">[</span>2.71s]
  1 package had stderr output: python_srv_server
pldz@pldz-pc:~/share/ROS2_DEMO/3_Chapter/code<span class="nv">$ </span><span class="nb">.</span> <span class="nb">install</span>/setup.bash 
pldz@pldz-pc:~/share/ROS2_DEMO/3_Chapter/code<span class="nv">$ </span>ros2 run python_srv_server pythonSrvServerNode 
<span class="o">[</span>INFO] <span class="o">[</span>1683157866.794236460] <span class="o">[</span>pythonSrvServerNode]: Server is starting ...
</code></pre></div></div>

<h2 id="334-创建python服务通讯客户端功能包并编写节点文件">3.3.4 创建Python服务通讯客户端功能包并编写节点文件</h2>

<ol>
  <li>
    <p>创建Python功能包时，包名为<code class="language-plaintext highlighter-rouge">python_srv_client</code>，节点名为<code class="language-plaintext highlighter-rouge">pythonSrvClientNode</code>，直接指定依赖项<code class="language-plaintext highlighter-rouge">rclpy</code>和<code class="language-plaintext highlighter-rouge">srv_demo</code>：<code class="language-plaintext highlighter-rouge">ros2 pkg create python_srv_client --build-type ament_python --node-name pythonSrvClientNode --dependencies rclpy srv_demo</code></p>
  </li>
  <li>
    <p>编写节点：主要是统一节点的订阅话题，异步接收返回的结果</p>
  </li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="n">rclpy</span>
<span class="kn">from</span> <span class="n">rclpy.node</span> <span class="kn">import</span> <span class="n">Node</span>
<span class="c1"># 1. 导入包
</span><span class="kn">from</span> <span class="n">srv_demo.srv</span> <span class="kn">import</span> <span class="n">AddInt</span>

<span class="c1"># 2.定义客户端节点
</span><span class="k">class</span> <span class="nc">pythonSrvClient</span><span class="p">(</span><span class="n">Node</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># 2.1 继承node节点，节点名为pythonSrvClientNode
</span>        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="sh">'</span><span class="s">pythonSrvClientNode</span><span class="sh">'</span><span class="p">)</span>
        <span class="c1"># 2.2 创建客户端
</span>        <span class="n">self</span><span class="p">.</span><span class="n">client_</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">create_client</span><span class="p">(</span><span class="n">AddInt</span><span class="p">,</span> <span class="sh">'</span><span class="s">mySrvName</span><span class="sh">'</span><span class="p">)</span>
        <span class="c1"># 2.3 等待连接
</span>        <span class="n">self</span><span class="p">.</span><span class="nf">wait_for_connect</span><span class="p">()</span>


    <span class="c1"># 3. 实现等待函数
</span>    <span class="k">def</span> <span class="nf">wait_for_connect</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">while</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="n">client_</span><span class="p">.</span><span class="nf">wait_for_service</span><span class="p">(</span><span class="n">timeout_sec</span><span class="o">=</span><span class="mf">1.0</span><span class="p">):</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">get_logger</span><span class="p">().</span><span class="nf">info</span><span class="p">(</span><span class="sh">'</span><span class="s">Waiting for connect ...</span><span class="sh">'</span><span class="p">)</span>

    <span class="c1"># 4. 实现发送请求函数
</span>    <span class="k">def</span> <span class="nf">send_request</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">num1</span><span class="p">,</span> <span class="n">num2</span><span class="p">):</span>
        <span class="n">request</span> <span class="o">=</span> <span class="n">AddInt</span><span class="p">.</span><span class="nc">Request</span><span class="p">()</span>
        <span class="n">request</span><span class="p">.</span><span class="n">num1</span> <span class="o">=</span> <span class="n">num1</span>
        <span class="n">request</span><span class="p">.</span><span class="n">num2</span> <span class="o">=</span> <span class="n">num2</span>
        <span class="n">self</span><span class="p">.</span><span class="n">future</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client_</span><span class="p">.</span><span class="nf">call_async</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">init</span><span class="p">()</span>
    <span class="c1"># 5.创建客户端节点
</span>    <span class="n">pythonSrvClientNode</span> <span class="o">=</span> <span class="nf">pythonSrvClient</span><span class="p">()</span>
    <span class="n">pythonSrvClientNode</span><span class="p">.</span><span class="nf">send_request</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span><span class="mi">300</span><span class="p">)</span>

    <span class="c1"># 6. 等待响应
</span>    <span class="n">rclpy</span><span class="p">.</span><span class="nf">spin_until_future_complete</span><span class="p">(</span><span class="n">pythonSrvClientNode</span><span class="p">,</span><span class="n">pythonSrvClientNode</span><span class="p">.</span><span class="n">future</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">pythonSrvClientNode</span><span class="p">.</span><span class="n">future</span><span class="p">.</span><span class="nf">result</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="n">pythonSrvClientNode</span><span class="p">.</span><span class="nf">get_logger</span><span class="p">().</span><span class="nf">info</span><span class="p">(</span><span class="sh">'</span><span class="s">Request error  {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">pythonSrvClientNode</span><span class="p">.</span><span class="nf">get_logger</span><span class="p">().</span><span class="nf">info</span><span class="p">(</span>
            <span class="sh">'</span><span class="s">Response is {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nb">sum</span><span class="p">))</span>

    <span class="n">rclpy</span><span class="p">.</span><span class="nf">shutdown</span><span class="p">()</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="345-编译并运行python服务通讯客户端节点">3.4.5 编译并运行Python服务通讯客户端节点</h2>

<ol>
  <li>
    <p>由于指定了依赖项，直接编译即可: <code class="language-plaintext highlighter-rouge">colcon build --packages-select python_srv_client</code></p>
  </li>
  <li>
    <p>激活环境: <code class="language-plaintext highlighter-rouge">. install/setup.bash</code></p>
  </li>
  <li>
    <p>运行所有节点：</p>
  </li>
</ol>

<p><img src="/assets/pics/ROS2_BASIC/3_py_srv_result.png" alt="运行所有节点" /></p>

<h1 id="35-服务通讯小结">3.5 服务通讯小结</h1>

<ul>
  <li>
    <ol>
      <li>创建功能包时，如果能够直接指定节点名和依赖项，可以省去很大部分的配置工作</li>
    </ol>
  </li>
  <li>
    <ol>
      <li>C/C++手动配置功能包时，<code class="language-plaintext highlighter-rouge">packages.xml</code>配置依赖项，<code class="language-plaintext highlighter-rouge">CMakeLists.txt</code>配置编译的内容，包括<code class="language-plaintext highlighter-rouge">find_package</code>；<code class="language-plaintext highlighter-rouge">add_executable</code>；<code class="language-plaintext highlighter-rouge">target_include_directories</code>；<code class="language-plaintext highlighter-rouge">ament_target_dependencies</code>；<code class="language-plaintext highlighter-rouge">install</code>；<code class="language-plaintext highlighter-rouge">ament_package</code>这六个部分</li>
    </ol>
  </li>
  <li>
    <ol>
      <li>Python手动配置功能包时，<code class="language-plaintext highlighter-rouge">packages.xml</code>配置可执行的依赖项<code class="language-plaintext highlighter-rouge">exec_depend</code>而不是<code class="language-plaintext highlighter-rouge">depend</code>,并且在<code class="language-plaintext highlighter-rouge">setup.py</code>中主要配置节点的<code class="language-plaintext highlighter-rouge">main</code>函数入口</li>
    </ol>
  </li>
  <li>
    <ol>
      <li>服务通讯的导入本质是创建一个C/C++的功能包，将里面的自定义消息编译成可以使用的<code class="language-plaintext highlighter-rouge">.c</code>和<code class="language-plaintext highlighter-rouge">.py</code>文件，值得注意的是，生成好的中间文件是存放在 <strong>工作空间</strong>的<code class="language-plaintext highlighter-rouge">install</code>文件夹下，如果这个这个工作空间的<code class="language-plaintext highlighter-rouge">install</code>找不到或者不是一个，那是需要再进一步的手动配置的</li>
    </ol>
  </li>
  <li>
    <ol>
      <li>服务通讯的请求响应是这里是异步实现的，即客户端需要等待服务端返回的结果，才能判断是否完成接收</li>
    </ol>
  </li>
</ul>]]></content><author><name>pldz9</name></author><category term="ROS2_BASIC" /><summary type="html"><![CDATA[3.1 服务通讯介绍 参考内容 Understanding services 服务通讯是ROS2的一种基于请求响应式的通讯方式，与之前的话题通讯不同的是服务通讯不是连续的数据流式的通讯，而是需要特定的触发才能收到回复的模式。 服务通讯可以是单个服务端和和单个客户端直接的通讯，一对一的模式 服务通讯也可以是单个服务端和多个客户端通讯，一对多的模式 3.2 ROS2服务通讯的基本流程 事实上，服务通讯和自定义的话题通讯的操作过程很类似，即将所需要利用到服务模块利用ament_camke工具编译成.c和.py的ROS2功能包，然后新建的功能包依赖这个服务功能包完成通讯。 3.2.1 创建ROS2服务通讯功能包的基本流程 创建ROS2功能包，功能包可以只用来作为存放自定义的msg/srv/action，不需要节点node的功能包，且--build-type必须是ament_camke ，因为目前来看，Python的自定义的消息或者服务也需要通过cmake编译出来再调用，功能包必须是下划线的推荐命名方法，而不是大小写的驼峰，否则会报错，如下所示： rosidl_adapter.parser.InvalidResourceName: 'xxxxx' is an invalid package name. It should have the pattern '^(?!.*__)(?!.*_$)[a-z][a-z0-9_]*$' 在ROS2功能包内创建srv文件夹，里面存放自定义的.srv消息文件，并且 .srv文件必须是大写开头的符合类的命名规则 配置packages.xml文件，都需要配置下面的内容(下面的配置项与.srv文件无关，是默认的固定配置) &lt;!-- 这一项是针对在srv文件中可能用到的其他依赖项，例如geomtry_msgs等等，如过没有用到就不添加 --&gt; &lt;depend&gt;其他的depend&lt;/depend&gt; &lt;!-- 下面三项是必须的 --&gt; &lt;build_depend&gt;rosidl_default_generators&lt;/build_depend&gt; &lt;exec_depend&gt;rosidl_default_runtime&lt;/exec_depend&gt; &lt;member_of_group&gt;rosidl_interface_packages&lt;/member_of_group&gt; 配置CMakeLists.txt文件,find_package和rosidl_generate_interfaces # 0. 是针对在srv文件中可能用到的其他依赖项，例如geomtry_msgs等等，则需要添加 # find_package(geometry_msgs REQUIRED) # 1. rosidl_default_generators是必须添加的内容 find_package(rosidl_default_generators REQUIRED) # 2. rosidl_generate_interfaces必须配置，里面添加srv文件位置 rosidl_generate_interfaces(${PROJECT_NAME} # 2.1 添加自定义的srv位置，例如存放在功能包的srv文件夹下的xxx.srv "srv/xxx.srv" # 2.2 可选，如果xxx.srv依赖了其他的内容,例如依赖了geometry_msgs DEPENDENCIES geometry_msgs ) 编译功能包:colcon build --packages-select &lt;功能包名&gt; 此时激活install目录下的setup.bash如. install/setup.bash，可以通过ros2 interface show &lt;功能包名称&gt;/srv/xxx.srv查看到xxx.srv内容，此时编译好的srv的.c文件存放在install/&lt;功能包名&gt;/include下，.py文件则存放在install/&lt;功能包名&gt;/local/ 3.2.2 创建ROS2服务通讯功能包示例 创建自定义消息功能包srv_demo，采用ament_cmake方式：ros2 pkg create srv_demo --build-type ament_cmake 在功能包内创建srv文件夹，其中存放AddInt.srv文件，需要利用到---符号作为分割，文件在---上面的内容作为请求体的参数，在---下面的内容作为响应体的参数，文件内容如下： int32 num1 int32 num2 --- int32 sum 此时的功能包内部的目录结构如下：tree -a pldz@pldz-pc:~/share/ROS2_DEMO/3_Chapter/code/srv_demo$ tree -a . ├── CMakeLists.txt ├── include │ └── srv_demo ├── package.xml ├── src └── srv └── AddInt.srv 配置packages.xml添加依赖项，由于AddInt.srv没有依赖任何的东西因此不需要添加其他的depend: &lt;?xml version="1.0"?&gt; &lt;?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?&gt; &lt;package format="3"&gt; &lt;name&gt;msg_demo&lt;/name&gt; &lt;version&gt;0.0.0&lt;/version&gt; &lt;description&gt;TODO: Package description&lt;/description&gt; &lt;maintainer email="pldz@R7000.com"&gt;pldz&lt;/maintainer&gt; &lt;license&gt;TODO: License declaration&lt;/license&gt; &lt;buildtool_depend&gt;ament_cmake&lt;/buildtool_depend&gt; &lt;!-- 构建自定义功能包的的必须依赖项 --&gt; &lt;buildtool_depend&gt;rosidl_default_generators&lt;/buildtool_depend&gt; &lt;exec_depend&gt;rosidl_default_runtime&lt;/exec_depend&gt; &lt;member_of_group&gt;rosidl_interface_packages&lt;/member_of_group&gt; &lt;test_depend&gt;ament_lint_auto&lt;/test_depend&gt; &lt;test_depend&gt;ament_lint_common&lt;/test_depend&gt; &lt;export&gt; &lt;build_type&gt;ament_cmake&lt;/build_type&gt; &lt;/export&gt; &lt;/package&gt; 配置CMakeLists.txt文件，添加构建自定义AddInt.srv的依赖： cmake_minimum_required(VERSION 3.8) project(srv_demo) if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang") add_compile_options(-Wall -Wextra -Wpedantic) endif() # find dependencies find_package(ament_cmake REQUIRED) # uncomment the following section in order to fill in # further dependencies manually. # find_package(&lt;dependency&gt; REQUIRED) # 1. 构建自定义功能包必须的依赖 find_package(rosidl_default_generators REQUIRED) # 2. 配置自定义的srv的位置 rosidl_generate_interfaces(${PROJECT_NAME} "srv/AddInt.srv" ) if(BUILD_TESTING) find_package(ament_lint_auto REQUIRED) # the following line skips the linter which checks for copyrights # comment the line when a copyright and license is added to all source files set(ament_cmake_copyright_FOUND TRUE) # the following line skips cpplint (only works in a git repo) # comment the line when this package is in a git repo and when # a copyright and license is added to all source files set(ament_cmake_cpplint_FOUND TRUE) ament_lint_auto_find_test_dependencies() endif() ament_package() 构建功能包：colcon build --packages-select srv_demo 查看自定义的消息：激活环境：. install/setup.bash ，查看自定义消息ros2 interface show srv_demo/srv/AddInt pldz@pldz-pc:~/share/ROS2_DEMO/3_Chapter/code$ colcon build --packages-select srv_demo Starting &gt;&gt;&gt; srv_demo Finished &lt;&lt;&lt; srv_demo [12.2s] Summary: 1 package finished [12.5s] pldz@pldz-pc:~/share/ROS2_DEMO/3_Chapter/code$ . install/setup.bash pldz@pldz-pc:~/share/ROS2_DEMO/3_Chapter/code$ ros2 interface show srv_demo/srv/AddInt int32 num1 int32 num2 --- int32 sum 查看instll下面的文件：其中.c的class文件在install/&lt;功能包名&gt;/include/&lt;功能包名&gt;/&lt;功能包名&gt;/msg/**，.py在install/&lt;功能包名&gt;/local/lib/python3.10/dist-packages/&lt;功能包名&gt;/msg/**，后续Vscode可以通过配置settings.json添加提示 3.3 使用C/C++实现ROS2服务通讯 这里直接使用3.2.2创建的srv_demo服务功能包进行ROS2 C/C++的服务通讯的实现 参考内容： Writing a simple service and client (C++) 2.3.3_服务通信_C++实现_01框架搭建 ROS2探索（三）service 3.3.1 创建C/C++服务通讯服务端功能包并编写节点文件 创建功能包，其中功能包名称为cpp_srv_server，节点名为cppSrvServerNode：ros2 pkg create cpp_srv_server --build-type ament_cmake --node-name cppSrvServerNode 配置Vscode环境，在工作空间创建.vscode文件夹，并加入settings.json文件，添加ROS2的include环境和当前工作空间的install文件夹下的srv_demo功能包的include路径： { "C_Cpp.default.includePath": [ "/opt/ros/humble/include/**", "./install/srv_demo/include/**" ], } 编写服务端节点文件，主要包括导入包，创建服务节点，实现回调函数： // 1. 调用自定义的服务文件 // 1.1 rclcpp和srv_demo两个功能包的头文件 // 如果有vscode的下划线提示，说明是settings.json没有配置好 #include "rclcpp/rclcpp.hpp" #include "srv_demo/srv/add_int.hpp" // 1.2. 调用功能包下的自定义的服务，其中自定义的服务名已经变成了一个类名 using srv_demo::srv::AddInt; // std_bind的占位符 using std::placeholders::_1; using std::placeholders::_2; // 2.定义节点类； class CppSrvServer: public rclcpp::Node{ public: // 2.1 构造函数，其中节点名直接赋予cppSrvServerNode CppSrvServer():Node("cppSrvServerNode"){ // 2.2 创建服务端 server_ = this-&gt;create_service&lt;AddInt&gt;("mySrvName",std::bind(&amp;CppSrvServer::addIntFunc, this, _1, _2)); RCLCPP_INFO(this-&gt;get_logger(),"Server is starting ..."); } private: // 3. 服务端的回调函数实现，其中参数的写法区分主要在于类型，参数数量包括请求体req和响应体rsp void addIntFunc(const AddInt::Request::SharedPtr req, const AddInt::Response::SharedPtr rsp) { rsp-&gt;sum = req-&gt;num1 + req-&gt;num2; RCLCPP_INFO(this-&gt;get_logger(),"request body :(%d,%d), response is :%d", req-&gt;num1, req-&gt;num2, rsp-&gt;sum); } // 4 服务的声明 rclcpp::Service&lt;AddInt&gt;::SharedPtr server_; }; int main(int argc, char const *argv[]) { rclcpp::init(argc,argv); auto server_ = std::make_shared&lt;CppSrvServer&gt;(); rclcpp::spin(server_); rclcpp::shutdown(); return 0; } 3.3.2 配置C/C++服务通讯服务端功能包 配置packages.xml文件，添加依赖项有rclcpp用于构建节点，和srv_demo用于构建AddInt： &lt;?xml version="1.0"?&gt; &lt;?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?&gt; &lt;package format="3"&gt; &lt;name&gt;cpp_srv_server&lt;/name&gt; &lt;version&gt;0.0.0&lt;/version&gt; &lt;description&gt;TODO: Package description&lt;/description&gt; &lt;maintainer email="pldz@R7000.com"&gt;pldz&lt;/maintainer&gt; &lt;license&gt;TODO: License declaration&lt;/license&gt; &lt;buildtool_depend&gt;ament_cmake&lt;/buildtool_depend&gt; &lt;test_depend&gt;ament_lint_auto&lt;/test_depend&gt; &lt;test_depend&gt;ament_lint_common&lt;/test_depend&gt; &lt;!-- 依赖rclcpp创建节点和自定义的服务功能包 --&gt; &lt;depend&gt;rclcpp&lt;/depend&gt; &lt;depend&gt;srv_demo&lt;/depend&gt; &lt;export&gt; &lt;build_type&gt;ament_cmake&lt;/build_type&gt; &lt;/export&gt; &lt;/package&gt; 配置CMakeLists.txt： cmake_minimum_required(VERSION 3.8) project(cpp_srv_server) if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang") add_compile_options(-Wall -Wextra -Wpedantic) endif() # find dependencies find_package(ament_cmake REQUIRED) # uncomment the following section in order to fill in # further dependencies manually. # find_package(&lt;dependency&gt; REQUIRED) # 1. 列出依赖项的包 find_package(rclcpp REQUIRED) find_package(srv_demo REQUIRED) # 2. 默认是已经创建了构建节点的文件配置 add_executable(cppSrvServerNode src/cppSrvServerNode.cpp) # 3. 默认已经包括&lt;INSTALL_INTERFACE&gt;的路径也不用更改 target_include_directories(cppSrvServerNode PUBLIC $&lt;BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include&gt; $&lt;INSTALL_INTERFACE:include&gt;) target_compile_features(cppSrvServerNode PUBLIC c_std_99 cxx_std_17) # Require C99 and C++17 # 4. ament工具构建节点的依赖配置 ament_target_dependencies( cppSrvServerNode rclcpp srv_demo ) # 5. Install配置，默认ros2 run &lt;包名&gt;的配置 install(TARGETS cppSrvServerNode DESTINATION lib/${PROJECT_NAME}) if(BUILD_TESTING) find_package(ament_lint_auto REQUIRED) # the following line skips the linter which checks for copyrights # comment the line when a copyright and license is added to all source files set(ament_cmake_copyright_FOUND TRUE) # the following line skips cpplint (only works in a git repo) # comment the line when this package is in a git repo and when # a copyright and license is added to all source files set(ament_cmake_cpplint_FOUND TRUE) ament_lint_auto_find_test_dependencies() endif() # 6. 生成包的环境 ament_package() 3.3.3 编译并运行C/C++服务通讯服务端 编译： colcon build --packages-select cpp_srv_server 激活环境：. install/setup.bash 运行：ros2 run cpp_srv_server cppSrvServerNode pldz@pldz-pc:~/share/ROS2_DEMO/3_Chapter/code$ colcon build --packages-select cpp_srv_server Starting &gt;&gt;&gt; cpp_srv_server Finished &lt;&lt;&lt; cpp_srv_server [20.6s] Summary: 1 package finished [21.0s] pldz@pldz-pc:~/share/ROS2_DEMO/3_Chapter/code$ . install/setup.bash pldz@pldz-pc:~/share/ROS2_DEMO/3_Chapter/code$ ros2 run cpp_srv_server cppSrvServerNode [INFO] [1683125184.734934447] [cppSrvServerNode]: Server is starting ... ^C[INFO] [1683125186.240946812] [rclcpp]: signal_handler(signum=2) 3.3.4 创建C/C++服务通讯客户端功能包并编写节点文件 创建功能包，功能包名为cpp_srv_client，节点名称为cppSrvClientNode，依赖rclcpp和srv_demo：ros2 pkg create cpp_srv_client --build-type ament_cmake --node-name cppSrvClientNode --dependencies rclcpp srv_demo 编写客户端节点，注意在此过程中需要和 服务端的连接进行判断，以及发送的请求是否能够收到返回值的用法的操作： // 1. 调用自定义的服务文件 // 1.1 rclcpp和srv_demo两个功能包的头文件 #include "rclcpp/rclcpp.hpp" #include "srv_demo/srv/add_int.hpp" // 1.2. 调用功能包下的自定义的服务，其中自定义的服务名已经变成了一个类名 using srv_demo::srv::AddInt; // 时间函数用于持续访问服务端 using namespace std::chrono_literals; // 2.定义节点类； class CppSrvClient: public rclcpp::Node{ public: CppSrvClient():Node("cppSrvClientNode") { // 2.1 创建客户端,并绑定服务通讯名称为mySrvName client_ = this-&gt;create_client&lt;AddInt&gt;("mySrvName"); RCLCPP_INFO(this-&gt;get_logger(),"Client is starting ..."); } // 2.2 等待与服务的连接 bool connect_server(){ while (!client_-&gt;wait_for_service(1s)) { if (!rclcpp::ok()) { RCLCPP_INFO(rclcpp::get_logger("rclcpp"),"Interrupted while waiting for the service. Exiting."); return false; } RCLCPP_INFO(this-&gt;get_logger(),"service not available, waiting again..."); } return true; } // 2.3 客户端发送请求； rclcpp::Client&lt;srv_demo::srv::AddInt&gt;::FutureAndRequestId send_request(int32_t num1, int32_t num2) { auto request = std::make_shared&lt;AddInt::Request&gt;(); request-&gt;num1 = num1; request-&gt;num2 = num2; // 2.3.1 发送请求 auto response = client_-&gt;async_send_request(request); return response; } private: // 2.4 服务通讯客户端的声明 rclcpp::Client&lt;AddInt&gt;::SharedPtr client_; }; int main(int argc, char ** argv) { // 3. 初始化ROS2客户端 rclcpp::init(argc,argv); // 3.1 创建对象指针并调用其功能； auto cppSrvClientNode = std::make_shared&lt;CppSrvClient&gt;(); // 3.2 连接客户端 bool flag = cppSrvClientNode-&gt;connect_server(); if (!flag) { RCLCPP_INFO(rclcpp::get_logger("rclcpp"),"Connect failed! "); return 0; } // 3.3 发送请求并等待响应 auto response = cppSrvClientNode-&gt;send_request(100,200); // 3.4 节点处理响应 if (rclcpp::spin_until_future_complete(cppSrvClientNode,response) == rclcpp::FutureReturnCode::SUCCESS) { RCLCPP_INFO(cppSrvClientNode-&gt;get_logger(),"The response is :%d!", response.get()-&gt;sum); } else { RCLCPP_INFO(cppSrvClientNode-&gt;get_logger(),"Request error"); } rclcpp::shutdown(); return 0; } 3.3.5 编译并运行C/C++服务通讯客户端节点 由于在创建包的过程中已经指明了所有依赖项，不需要进行额外的配置，直接编译运行即可：colcon build --packages-select cpp_srv_client 激活环境并运行节点 3.4 使用Python实现ROS2服务通讯 参考内容 Writing a simple service and client (Python) 2.3.4_服务通信_Python实现_01框架搭建 3.4.1 创建Python服务通讯服务端功能包并编写节点文件 创建功能包，包名为python_srv_server，节点名为pythonSrvServerNode：ros2 pkg create python_srv_server --build-type ament_python --node-name pythonSrvServerNode 配置Vscode，主要添加功能包的提示环境，编辑settings.json： { "C_Cpp.default.includePath": [ "/opt/ros/humble/include/**", "./install/srv_demo/include/**" ], "python.analysis.include": [ "/opt/ros/humble/local/lib/python3.10/dist-packages/**", "./install/srv_demo/local/lib/python3.10/dist-packages/**" ] } 编写Python服务端节点文件： import rclpy from rclpy.node import Node # 1. 导入包，其中的类名等于服务文件名称 from srv_demo.srv import AddInt # 2. 定义服务端节点 class PythonSrvServer(Node): def __init__(self): super().__init__('pythonSrvServerNode') # 2.1 创建服务端 self.srver_ = self.create_service(AddInt, 'mySrvName', self.addIntFunc) self.get_logger().info("Server is starting ...") # 2.2 服务端的处理回调函数 def addIntFunc(self, request:AddInt, response:AddInt): response.sum = request.num1 + request.num2 self.get_logger().info('The request is :{} {},Response is :{}'.format(request.num1, request.num2, response.sum)) return response def main(): rclpy.init() pythonSrvServerNode = PythonSrvServer() rclpy.spin(pythonSrvServerNode) rclpy.shutdown() if __name__ == '__main__': main() 3.4.2 配置Python服务通讯服务端功能包 配置packages.xml增加rclpy和srv_demo两个依赖项，注意Python本身是可执行文件，因此它的为&lt;exec_depend&gt;与C/C++的&lt;depend&gt;关键字不同： &lt;?xml version="1.0"?&gt; &lt;?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?&gt; &lt;package format="3"&gt; &lt;name&gt;python_srv_server&lt;/name&gt; &lt;version&gt;0.0.0&lt;/version&gt; &lt;description&gt;TODO: Package description&lt;/description&gt; &lt;maintainer email="pldz@R7000.com"&gt;pldz&lt;/maintainer&gt; &lt;license&gt;TODO: License declaration&lt;/license&gt; &lt;!-- 添加依赖项的包，注意是exec_depend --&gt; &lt;exec_depend&gt;rclpy&lt;/exec_depend&gt; &lt;exec_depend&gt;srv_demo&lt;/exec_depend&gt; &lt;test_depend&gt;ament_copyright&lt;/test_depend&gt; &lt;test_depend&gt;ament_flake8&lt;/test_depend&gt; &lt;test_depend&gt;ament_pep257&lt;/test_depend&gt; &lt;test_depend&gt;python3-pytest&lt;/test_depend&gt; &lt;export&gt; &lt;build_type&gt;ament_python&lt;/build_type&gt; &lt;/export&gt; &lt;/package&gt; 配置setup.py文件，事实上，我们已经创建包的时候已经指定了节点名，其实应该是不用配置生成节点的main入口的： from setuptools import setup package_name = 'python_srv_server' setup( name=package_name, version='0.0.0', packages=[package_name], data_files=[ ('share/ament_index/resource_index/packages', ['resource/' + package_name]), ('share/' + package_name, ['package.xml']), ], install_requires=['setuptools'], zip_safe=True, maintainer='pldz', maintainer_email='pldz@R7000.com', description='TODO: Package description', license='TODO: License declaration', tests_require=['pytest'], # 配置节点main函数入口 entry_points={ 'console_scripts': [ 'pythonSrvServerNode = python_srv_server.pythonSrvServerNode:main' ], }, ) 3.4.3 编译并运行Python服务通讯服务端功能包 编译：colcon build --packages-select python_srv_server 激活环境：. install/setup.bash 运行节点：ros2 run python_srv_server pythonSrvServerNode pldz@pldz-pc:~/share/ROS2_DEMO/3_Chapter/code$ colcon build --packages-select python_srv_server Starting &gt;&gt;&gt; python_srv_server --- stderr: python_srv_server /usr/lib/python3/dist-packages/setuptools/command/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools. warnings.warn( --- Finished &lt;&lt;&lt; python_srv_server [2.18s] Summary: 1 package finished [2.71s] 1 package had stderr output: python_srv_server pldz@pldz-pc:~/share/ROS2_DEMO/3_Chapter/code$ . install/setup.bash pldz@pldz-pc:~/share/ROS2_DEMO/3_Chapter/code$ ros2 run python_srv_server pythonSrvServerNode [INFO] [1683157866.794236460] [pythonSrvServerNode]: Server is starting ... 3.3.4 创建Python服务通讯客户端功能包并编写节点文件 创建Python功能包时，包名为python_srv_client，节点名为pythonSrvClientNode，直接指定依赖项rclpy和srv_demo：ros2 pkg create python_srv_client --build-type ament_python --node-name pythonSrvClientNode --dependencies rclpy srv_demo 编写节点：主要是统一节点的订阅话题，异步接收返回的结果 import sys import rclpy from rclpy.node import Node # 1. 导入包 from srv_demo.srv import AddInt # 2.定义客户端节点 class pythonSrvClient(Node): def __init__(self): # 2.1 继承node节点，节点名为pythonSrvClientNode super().__init__('pythonSrvClientNode') # 2.2 创建客户端 self.client_ = self.create_client(AddInt, 'mySrvName') # 2.3 等待连接 self.wait_for_connect() # 3. 实现等待函数 def wait_for_connect(self): while not self.client_.wait_for_service(timeout_sec=1.0): self.get_logger().info('Waiting for connect ...') # 4. 实现发送请求函数 def send_request(self, num1, num2): request = AddInt.Request() request.num1 = num1 request.num2 = num2 self.future = self.client_.call_async(request) def main(): rclpy.init() # 5.创建客户端节点 pythonSrvClientNode = pythonSrvClient() pythonSrvClientNode.send_request(200,300) # 6. 等待响应 rclpy.spin_until_future_complete(pythonSrvClientNode,pythonSrvClientNode.future) try: response = pythonSrvClientNode.future.result() except Exception as e: pythonSrvClientNode.get_logger().info('Request error {}'.format(e)) else: pythonSrvClientNode.get_logger().info( 'Response is {}'.format(response.sum)) rclpy.shutdown() if __name__ == '__main__': main() 3.4.5 编译并运行Python服务通讯客户端节点 由于指定了依赖项，直接编译即可: colcon build --packages-select python_srv_client 激活环境: . install/setup.bash 运行所有节点： 3.5 服务通讯小结 创建功能包时，如果能够直接指定节点名和依赖项，可以省去很大部分的配置工作 C/C++手动配置功能包时，packages.xml配置依赖项，CMakeLists.txt配置编译的内容，包括find_package；add_executable；target_include_directories；ament_target_dependencies；install；ament_package这六个部分 Python手动配置功能包时，packages.xml配置可执行的依赖项exec_depend而不是depend,并且在setup.py中主要配置节点的main函数入口 服务通讯的导入本质是创建一个C/C++的功能包，将里面的自定义消息编译成可以使用的.c和.py文件，值得注意的是，生成好的中间文件是存放在 工作空间的install文件夹下，如果这个这个工作空间的install找不到或者不是一个，那是需要再进一步的手动配置的 服务通讯的请求响应是这里是异步实现的，即客户端需要等待服务端返回的结果，才能判断是否完成接收]]></summary></entry><entry><title type="html">2 ROS2话题通讯 - 话题通讯进阶</title><link href="http://localhost:4000/ros2_basic/2023-02-03-2_2_ROS2%E8%AF%9D%E9%A2%98%E9%80%9A%E8%AE%AF%E6%8F%90%E5%8D%87.html" rel="alternate" type="text/html" title="2 ROS2话题通讯 - 话题通讯进阶" /><published>2023-02-03T00:00:00+08:00</published><updated>2023-02-03T00:00:00+08:00</updated><id>http://localhost:4000/ros2_basic/2_2_ROS2%E8%AF%9D%E9%A2%98%E9%80%9A%E8%AE%AF%E6%8F%90%E5%8D%87</id><content type="html" xml:base="http://localhost:4000/ros2_basic/2023-02-03-2_2_ROS2%E8%AF%9D%E9%A2%98%E9%80%9A%E8%AE%AF%E6%8F%90%E5%8D%87.html"><![CDATA[<h1 id="25-自定义话题通讯">2.5 自定义话题通讯</h1>

<blockquote>
  <p>参考内容</p>

  <p><a href="https://docs.ros.org/en/humble/Tutorials/Beginner-Client-Libraries/Custom-ROS2-Interfaces.html">Creating custom msg and srv files</a></p>

  <p><a href="https://www.bilibili.com/video/BV1fe4y1r74D">2.2.4_话题通信_自定义接口消息_接口文件</a></p>
</blockquote>

<h2 id="251-自定义话题通讯的一般流程">2.5.1 自定义话题通讯的一般流程</h2>

<blockquote>
  <p>构建自定义话题其实就是利用<code class="language-plaintext highlighter-rouge">ament_cmake</code>工具构建出该自定义话题的<code class="language-plaintext highlighter-rouge">.c</code>和<code class="language-plaintext highlighter-rouge">.py</code>文件，编译好的自定义话题，也就可以和<code class="language-plaintext highlighter-rouge">std_msgs</code>一样在创建包的时候，手动添加进去，后续即可不用再配置<code class="language-plaintext highlighter-rouge">packages.xml</code>和<code class="language-plaintext highlighter-rouge">CMakeLists.txt</code></p>
</blockquote>

<ul>
  <li>
    <ol>
      <li>创建ROS2功能包，功能包可以只用来作为存放自定义的<code class="language-plaintext highlighter-rouge">msg/srv</code>，不需要节点node的功能包，<strong>且<code class="language-plaintext highlighter-rouge">--build-type</code>必须是<code class="language-plaintext highlighter-rouge">ament_camke</code></strong> ，因为目前来看，Python的自定义的消息或者服务也需要通过cmake编译出来再调用，<strong>功能包必须是下划线的推荐命名方法，而不是大小写的驼峰，否则会报错</strong>，如下所示：</li>
    </ol>
  </li>
</ul>

<p><img src="/assets/pics/ROS2_BASIC/2_right_package_name.png" alt="ROS2功能包命名问题" /></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">---</span> stderr: msgDemoError                         
CMake Error at /opt/ros/humble/share/rosidl_adapter/cmake/rosidl_adapt_interfaces.cmake:59 <span class="o">(</span>message<span class="o">)</span>:
  execute_process<span class="o">(</span>/usr/bin/python3.10 <span class="nt">-m</span> rosidl_adapter <span class="nt">--package-name</span>
  msgDemoError <span class="nt">--arguments-file</span>
  /mnt/hgfs/VMware/ROS2_DEMO/2_Chapter/code/build/msgDemoError/rosidl_adapter__arguments__msgDemoError.json
  <span class="nt">--output-dir</span>
  /mnt/hgfs/VMware/ROS2_DEMO/2_Chapter/code/build/msgDemoError/rosidl_adapter/msgDemoError
  <span class="nt">--output-file</span>
  /mnt/hgfs/VMware/ROS2_DEMO/2_Chapter/code/build/msgDemoError/rosidl_adapter/msgDemoError.idls<span class="o">)</span>
  returned error code 1:

  Error processing <span class="s1">'String name'</span> of <span class="s1">'msgDemoError/Student'</span>: <span class="s1">''</span>msgDemoError<span class="s1">'
  is an invalid package name.  It should have the pattern
  '</span>^<span class="o">(</span>?!.<span class="k">*</span>__<span class="o">)(</span>?!.<span class="k">*</span>_<span class="nv">$)</span><span class="o">[</span>a-z][a-z0-9_]<span class="k">*</span><span class="s1">$''</span>

  Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:

    File <span class="s2">"/usr/lib/python3.10/runpy.py"</span>, line 196, <span class="k">in </span>_run_module_as_main
      <span class="k">return </span>_run_code<span class="o">(</span>code, main_globals, None,
    File <span class="s2">"/usr/lib/python3.10/runpy.py"</span>, line 86, <span class="k">in </span>_run_code
      <span class="nb">exec</span><span class="o">(</span>code, run_globals<span class="o">)</span>
    File <span class="s2">"/opt/ros/humble/local/lib/python3.10/dist-packages/rosidl_adapter/__main__.py"</span>, line 19, <span class="k">in</span> &lt;module&gt;
      sys.exit<span class="o">(</span>main<span class="o">())</span>
    File <span class="s2">"/opt/ros/humble/local/lib/python3.10/dist-packages/rosidl_adapter/main.py"</span>, line 53, <span class="k">in </span>main
      abs_idl_file <span class="o">=</span> convert_to_idl<span class="o">(</span>
    File <span class="s2">"/opt/ros/humble/local/lib/python3.10/dist-packages/rosidl_adapter/__init__.py"</span>, line 19, <span class="k">in </span>convert_to_idl
      <span class="k">return </span>convert_msg_to_idl<span class="o">(</span>
    File <span class="s2">"/opt/ros/humble/local/lib/python3.10/dist-packages/rosidl_adapter/msg/__init__.py"</span>, line 28, <span class="k">in </span>convert_msg_to_idl
      msg <span class="o">=</span> parse_message_string<span class="o">(</span>package_name, input_file.stem, content<span class="o">)</span>
    File <span class="s2">"/opt/ros/humble/local/lib/python3.10/dist-packages/rosidl_adapter/parser.py"</span>, line 520, <span class="k">in </span>parse_message_string
      Type<span class="o">(</span>type_string, <span class="nv">context_package_name</span><span class="o">=</span>pkg_name<span class="o">)</span>,
    File <span class="s2">"/opt/ros/humble/local/lib/python3.10/dist-packages/rosidl_adapter/parser.py"</span>, line 277, <span class="k">in </span>__init__
      super<span class="o">(</span>Type, self<span class="o">)</span>.__init__<span class="o">(</span>
    File <span class="s2">"/opt/ros/humble/local/lib/python3.10/dist-packages/rosidl_adapter/parser.py"</span>, line 201, <span class="k">in </span>__init__
      raise InvalidResourceName<span class="o">(</span>

  rosidl_adapter.parser.InvalidResourceName: <span class="s1">'msgDemoError'</span> is an invalid
  package name.  It should have the pattern
  <span class="s1">'^(?!.*__)(?!.*_$)[a-z][a-z0-9_]*$'</span>

Call Stack <span class="o">(</span>most recent call first<span class="o">)</span>:
  /opt/ros/humble/share/rosidl_cmake/cmake/rosidl_generate_interfaces.cmake:130 <span class="o">(</span>rosidl_adapt_interfaces<span class="o">)</span>
  CMakeLists.txt:16 <span class="o">(</span>rosidl_generate_interfaces<span class="o">)</span>


<span class="nt">---</span>
Failed   <span class="o">&lt;&lt;&lt;</span> msgDemoError <span class="o">[</span>1.53s, exited with code 1]
</code></pre></div></div>

<ul>
  <li>
    <ol>
      <li>在ROS2功能包内创建<code class="language-plaintext highlighter-rouge">msg</code>文件夹，里面存放自定义的<code class="language-plaintext highlighter-rouge">.msg</code>消息文件，并且 <strong><code class="language-plaintext highlighter-rouge">.msg</code>文件必须是大写开头的符合类的命名规则</strong></li>
    </ol>
  </li>
  <li>
    <ol>
      <li>配置<code class="language-plaintext highlighter-rouge">packages.xml</code>文件，都需要配置下面的内容(下面的配置项与.msg文件无关，是默认的固定配置)</li>
    </ol>
  </li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 这一项是针对在msg中可能用到的其他依赖项，例如geomtry_msgs等等，如过没有用到就不添加 --&gt;</span>
<span class="nt">&lt;depend&gt;</span>其他的depend<span class="nt">&lt;/depend&gt;</span>

<span class="c">&lt;!-- 下面三项是必须的 --&gt;</span>
<span class="nt">&lt;build_depend&gt;</span>rosidl_default_generators<span class="nt">&lt;/build_depend&gt;</span>
<span class="nt">&lt;exec_depend&gt;</span>rosidl_default_runtime<span class="nt">&lt;/exec_depend&gt;</span>
<span class="nt">&lt;member_of_group&gt;</span>rosidl_interface_packages<span class="nt">&lt;/member_of_group&gt;</span>
</code></pre></div></div>

<ul>
  <li>
    <ol>
      <li>配置<code class="language-plaintext highlighter-rouge">CMakeLists.txt</code>文件,<code class="language-plaintext highlighter-rouge">find_package</code>和<code class="language-plaintext highlighter-rouge">rosidl_generate_interfaces</code></li>
    </ol>
  </li>
</ul>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 0. 是针对在msg中可能用到的其他依赖项，例如geomtry_msgs等等，则需要添加</span>
<span class="c1"># find_package(geometry_msgs REQUIRED)</span>

<span class="c1"># 1. rosidl_default_generators是必须添加的内容</span>
<span class="nb">find_package</span><span class="p">(</span>rosidl_default_generators REQUIRED<span class="p">)</span>

<span class="c1"># 2. rosidl_generate_interfaces必须配置，里面添加msg文件位置</span>
<span class="nf">rosidl_generate_interfaces</span><span class="p">(</span><span class="si">${</span><span class="nv">PROJECT_NAME</span><span class="si">}</span>
<span class="c1"># 2.1 添加自定义的msg位置，例如存放在功能包的msg文件夹下的xxx.msg</span>
  <span class="s2">"msg/xxx.msg"</span>
<span class="c1"># 2.2 可选，如果xxx.msg依赖了其他的内容,例如依赖了geometry_msgs</span>
  DEPENDENCIES geometry_msgs
<span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>
    <ol>
      <li>编译功能包:<code class="language-plaintext highlighter-rouge">colcon build --packages-select &lt;功能包名&gt;</code></li>
    </ol>
  </li>
  <li>
    <ol>
      <li>此时激活<code class="language-plaintext highlighter-rouge">install</code>目录下的<code class="language-plaintext highlighter-rouge">setup.bash</code>如<code class="language-plaintext highlighter-rouge">. install/setup.bash</code>，可以通过<code class="language-plaintext highlighter-rouge">ros2 interface show &lt;功能包名称&gt;/msg/xxx.msg</code>查看到<code class="language-plaintext highlighter-rouge">xxx.msg</code>内容，此时编译好的<code class="language-plaintext highlighter-rouge">msg</code>的<code class="language-plaintext highlighter-rouge">.c</code>文件存放在<code class="language-plaintext highlighter-rouge">install/&lt;功能包名&gt;/include</code>下，<code class="language-plaintext highlighter-rouge">.py</code>文件则存放在<code class="language-plaintext highlighter-rouge">install/&lt;功能包名&gt;/local/</code></li>
    </ol>
  </li>
</ul>

<h2 id="252-创建自定义话题消息简单例子">2.5.2 创建自定义话题消息简单例子</h2>

<ol>
  <li>
    <p>创建自定义消息功能包<code class="language-plaintext highlighter-rouge">msg_demo</code>，采用<code class="language-plaintext highlighter-rouge">ament_cmake</code>方式：<code class="language-plaintext highlighter-rouge">ros2 pkg create msg_demo --build-type ament_cmake</code></p>
  </li>
  <li>
    <p>在功能包内创建<code class="language-plaintext highlighter-rouge">msg</code>文件夹，其中存放<code class="language-plaintext highlighter-rouge">Demo.msg</code>文件，文件内容如下：其中还依赖<code class="language-plaintext highlighter-rouge">geometry_msgs</code></p>
  </li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">geometry_msgs</span><span class="o">/</span><span class="n">Point</span> <span class="n">center</span>
<span class="n">float64</span> <span class="n">radius</span>
</code></pre></div></div>

<ol>
  <li>此时的功能包内部的目录结构如下：<code class="language-plaintext highlighter-rouge">tree -a</code></li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code/msg_demo<span class="nv">$ </span>tree <span class="nt">-a</span>
<span class="nb">.</span>
├── CMakeLists.txt
├── include
│   └── msg_demo
├── msg
│   └── Demo.msg
├── package.xml
└── src

4 directories, 3 files
</code></pre></div></div>

<ol>
  <li>配置<code class="language-plaintext highlighter-rouge">packages.xml</code>添加依赖项，特别的是该<code class="language-plaintext highlighter-rouge">Demo.msg</code>还需依赖<code class="language-plaintext highlighter-rouge">gemotry_msgs</code>:</li>
</ol>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0"?&gt;</span>
<span class="cp">&lt;?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?&gt;</span>
<span class="nt">&lt;package</span> <span class="na">format=</span><span class="s">"3"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;name&gt;</span>msg_demo<span class="nt">&lt;/name&gt;</span>
  <span class="nt">&lt;version&gt;</span>0.0.0<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;description&gt;</span>TODO: Package description<span class="nt">&lt;/description&gt;</span>
  <span class="nt">&lt;maintainer</span> <span class="na">email=</span><span class="s">"pldz@R7000.com"</span><span class="nt">&gt;</span>pldz<span class="nt">&lt;/maintainer&gt;</span>
  <span class="nt">&lt;license&gt;</span>TODO: License declaration<span class="nt">&lt;/license&gt;</span>

  <span class="nt">&lt;buildtool_depend&gt;</span>ament_cmake<span class="nt">&lt;/buildtool_depend&gt;</span>

  <span class="c">&lt;!-- 自定义Demo.msg中依赖geometry_msgs所以添加到depend --&gt;</span>
  <span class="nt">&lt;depend&gt;</span>geometry_msgs<span class="nt">&lt;/depend&gt;</span>

  <span class="c">&lt;!-- 构建自定义msg的必须依赖项 --&gt;</span>
  <span class="nt">&lt;buildtool_depend&gt;</span>rosidl_default_generators<span class="nt">&lt;/buildtool_depend&gt;</span>
  <span class="nt">&lt;exec_depend&gt;</span>rosidl_default_runtime<span class="nt">&lt;/exec_depend&gt;</span>
  <span class="nt">&lt;member_of_group&gt;</span>rosidl_interface_packages<span class="nt">&lt;/member_of_group&gt;</span>

  <span class="nt">&lt;test_depend&gt;</span>ament_lint_auto<span class="nt">&lt;/test_depend&gt;</span>
  <span class="nt">&lt;test_depend&gt;</span>ament_lint_common<span class="nt">&lt;/test_depend&gt;</span>

  <span class="nt">&lt;export&gt;</span>
    <span class="nt">&lt;build_type&gt;</span>ament_cmake<span class="nt">&lt;/build_type&gt;</span>
  <span class="nt">&lt;/export&gt;</span>
<span class="nt">&lt;/package&gt;</span>

</code></pre></div></div>

<ol>
  <li>配置<code class="language-plaintext highlighter-rouge">CMakeLists.txt</code>文件，添加构建自定义<code class="language-plaintext highlighter-rouge">Demo.msg</code>的依赖：</li>
</ol>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cmake_minimum_required</span><span class="p">(</span>VERSION 3.8<span class="p">)</span>
<span class="nb">project</span><span class="p">(</span>msg_demo<span class="p">)</span>

<span class="nb">if</span><span class="p">(</span>CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES <span class="s2">"Clang"</span><span class="p">)</span>
  <span class="nb">add_compile_options</span><span class="p">(</span>-Wall -Wextra -Wpedantic<span class="p">)</span>
<span class="nb">endif</span><span class="p">()</span>

<span class="c1"># find dependencies</span>
<span class="nb">find_package</span><span class="p">(</span>ament_cmake REQUIRED<span class="p">)</span>
<span class="c1"># uncomment the following section in order to fill in</span>
<span class="c1"># further dependencies manually.</span>
<span class="c1"># find_package(&lt;dependency&gt; REQUIRED)</span>

<span class="c1"># 1. 自定义的Demo.msg依赖geometry_msgs</span>
<span class="nb">find_package</span><span class="p">(</span>geometry_msgs REQUIRED<span class="p">)</span>
<span class="c1"># 2. 必须添加的构建自定义包辅助包的位置</span>
<span class="nb">find_package</span><span class="p">(</span>rosidl_default_generators REQUIRED<span class="p">)</span>

<span class="c1"># 3. 构建自定义msg</span>
<span class="nf">rosidl_generate_interfaces</span><span class="p">(</span><span class="si">${</span><span class="nv">PROJECT_NAME</span><span class="si">}</span>
  <span class="s2">"msg/Demo.msg"</span>                <span class="c1"># Demo.msg的位置    </span>
  DEPENDENCIES geometry_msgs    <span class="c1"># 创建Demo.msg需要的依赖</span>
<span class="p">)</span>

<span class="nb">if</span><span class="p">(</span>BUILD_TESTING<span class="p">)</span>
  <span class="nb">find_package</span><span class="p">(</span>ament_lint_auto REQUIRED<span class="p">)</span>
  <span class="c1"># the following line skips the linter which checks for copyrights</span>
  <span class="c1"># comment the line when a copyright and license is added to all source files</span>
  <span class="nb">set</span><span class="p">(</span>ament_cmake_copyright_FOUND TRUE<span class="p">)</span>
  <span class="c1"># the following line skips cpplint (only works in a git repo)</span>
  <span class="c1"># comment the line when this package is in a git repo and when</span>
  <span class="c1"># a copyright and license is added to all source files</span>
  <span class="nb">set</span><span class="p">(</span>ament_cmake_cpplint_FOUND TRUE<span class="p">)</span>
  <span class="nf">ament_lint_auto_find_test_dependencies</span><span class="p">()</span>
<span class="nb">endif</span><span class="p">()</span>

<span class="nf">ament_package</span><span class="p">()</span>

</code></pre></div></div>

<ol>
  <li>
    <p>构建功能包：<code class="language-plaintext highlighter-rouge">colcon build --packages-select msg_demo</code></p>
  </li>
  <li>
    <p>查看自定义的消息：激活环境：<code class="language-plaintext highlighter-rouge">. install/setup.bash </code>，查看自定义消息<code class="language-plaintext highlighter-rouge">ros2 interface show msg_demo/msg/Demo</code></p>
  </li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code<span class="nv">$ </span>colcon build <span class="nt">--packages-select</span> msg_demo
Starting <span class="o">&gt;&gt;&gt;</span> msg_demo
Finished <span class="o">&lt;&lt;&lt;</span> msg_demo <span class="o">[</span>10.4s]                     

Summary: 1 package finished <span class="o">[</span>10.7s]
pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code<span class="nv">$ </span><span class="nb">.</span> <span class="nb">install</span>/setup.bash 
pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code<span class="nv">$ </span>ros2 interface show msg_demo/msg/Demo 
geometry_msgs/Point center
        float64 x
        float64 y
        float64 z
float64 radius
</code></pre></div></div>

<ol>
  <li>查看<code class="language-plaintext highlighter-rouge">instll</code>下面的文件：其中<code class="language-plaintext highlighter-rouge">.c</code>的class文件在<code class="language-plaintext highlighter-rouge">install/&lt;功能包名&gt;/include/&lt;功能包名&gt;/&lt;功能包名&gt;/msg/**</code>，<code class="language-plaintext highlighter-rouge">.py</code>在<code class="language-plaintext highlighter-rouge">install/&lt;功能包名&gt;/local/lib/python3.10/dist-packages/&lt;功能包名&gt;/msg/**</code></li>
</ol>

<p><img src="/assets/pics/ROS2_BASIC/2_custom_package_path.png" alt="自定义消息的文件位置" /></p>

<h2 id="253-快速创建cc和python自定义话题通讯的studentmsg">2.5.3 快速创建C/C++和Python自定义话题通讯的Student.msg</h2>

<ol>
  <li>
    <p>新建功能包：<code class="language-plaintext highlighter-rouge">ros2 pkg create student_msg --build-type ament_cmake</code></p>
  </li>
  <li>
    <p>创建<code class="language-plaintext highlighter-rouge">msg</code>文件夹和<code class="language-plaintext highlighter-rouge">Student.msg</code>文件，写入如下内容:</p>
  </li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">string</span>   <span class="n">name</span>
<span class="n">int32</span>    <span class="n">exam</span>
<span class="n">float64</span>  <span class="n">score</span>
</code></pre></div></div>

<ol>
  <li>不需要其他依赖项，配置<code class="language-plaintext highlighter-rouge">packages.xml</code>添加下面三项即可：</li>
</ol>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;build_depend&gt;</span>rosidl_default_generators<span class="nt">&lt;/build_depend&gt;</span>
<span class="nt">&lt;exec_depend&gt;</span>rosidl_default_runtime<span class="nt">&lt;/exec_depend&gt;</span>
<span class="nt">&lt;member_of_group&gt;</span>rosidl_interface_packages<span class="nt">&lt;/member_of_group&gt;</span>
</code></pre></div></div>

<ol>
  <li>配置<code class="language-plaintext highlighter-rouge">CMakeLists.txt</code>：</li>
</ol>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">find_package</span><span class="p">(</span>rosidl_default_generators REQUIRED<span class="p">)</span>

<span class="nf">rosidl_generate_interfaces</span><span class="p">(</span><span class="si">${</span><span class="nv">PROJECT_NAME</span><span class="si">}</span>
  <span class="s2">"msg/Student.msg"</span>
<span class="p">)</span>
</code></pre></div></div>

<ol>
  <li>快速构建：<code class="language-plaintext highlighter-rouge">colcon build --packages-select student_msg</code>:</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code<span class="nv">$ </span>colcon build <span class="nt">--packages-select</span> student_msg
Starting <span class="o">&gt;&gt;&gt;</span> student_msg
Finished <span class="o">&lt;&lt;&lt;</span> student_msg <span class="o">[</span>8.93s]                     

Summary: 1 package finished <span class="o">[</span>9.21s]
</code></pre></div></div>

<h1 id="26-使用cc实现自定义话题通讯">2.6 使用C/C++实现自定义话题通讯</h1>

<h2 id="261-创建cc自定义话题发布方功能包并编写节点文件">2.6.1 创建C/C++自定义话题发布方功能包并编写节点文件</h2>

<ol>
  <li>
    <p>创建ROS2功能包,这里为了省的创建node文件直接指定了<code class="language-plaintext highlighter-rouge">cpp_idl_pub</code>，指令如下：<code class="language-plaintext highlighter-rouge">ros2 pkg create cpp_idl_pub --build-type ament_cmake --node-name cppIdlPubNode</code>，</p>
  </li>
  <li>
    <p>配置Vscode：配置Vscode的<code class="language-plaintext highlighter-rouge">settings.json</code>：</p>
  </li>
</ol>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"C_Cpp.default.includePath"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"/opt/ros/humble/include/**"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"./install/student_msg/include/**"</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"python.analysis.extraPaths"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"/opt/ros/humble/local/lib/python3.10/dist-packages/"</span><span class="w">
    </span><span class="p">],</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<ol>
  <li>编写自定义节点文件<code class="language-plaintext highlighter-rouge">cppIdlPubNode.cpp</code>：</li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"rclcpp/rclcpp.hpp"</span><span class="cp">
</span>
<span class="c1">// 1. 添加自定义消息头文件，如果vscode出现下划线警告，则需要配置settings.json添加include路径</span>
<span class="cp">#include</span> <span class="cpf">"student_msg/msg/student.hpp"</span><span class="cp">
</span>
<span class="c1">// C++14中的时间库</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="o">::</span><span class="n">chrono_literals</span><span class="p">;</span>

<span class="c1">// 2. 引入Student.msg生成的Student类</span>
<span class="k">using</span> <span class="n">student_msg</span><span class="o">::</span><span class="n">msg</span><span class="o">::</span><span class="n">Student</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">CppIdlMsgPub</span><span class="o">:</span> <span class="k">public</span> <span class="n">rclcpp</span><span class="o">::</span><span class="n">Node</span>
<span class="p">{</span>
  <span class="nl">public:</span>
      <span class="cm">/* 3. ROS2节点的构造函数，其中包括一个node对象（初始化时候没有给出节点的名称），
      * 和属性exam_（初始化为0,类型为size_t)，以及属性socre_（类型为double_t初始值为60.0） */</span>
      <span class="n">CppIdlMsgPub</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">nodeName</span><span class="p">)</span><span class="o">:</span><span class="n">Node</span><span class="p">(</span><span class="n">nodeName</span><span class="p">),</span> <span class="n">exam_</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">score_</span><span class="p">(</span><span class="mf">60.0</span><span class="p">)</span>
      <span class="p">{</span>
        <span class="c1">// 4. 创建发布者,参数分别为话题名称myStudent，和发布队列的长队为10</span>
        <span class="n">publisher_</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">create_publisher</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"myStudent"</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
        <span class="c1">// 5. 创建定时器，设置发布的频率，并绑定定时执行的事件，这里给到的是CppIdlMsgPub类的函数</span>
        <span class="n">timer_</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">create_wall_timer</span><span class="p">(</span><span class="mx">500ms</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">CppIdlMsgPub</span><span class="o">::</span><span class="n">timer_callback</span><span class="p">,</span> <span class="k">this</span><span class="p">));</span>
      <span class="p">}</span>

  <span class="k">private</span><span class="o">:</span>
     <span class="c1">// 6. 定义回调函数</span>
    <span class="kt">void</span> <span class="nf">timer_callback</span><span class="p">()</span>
    <span class="p">{</span>
      <span class="n">Student</span> <span class="n">stu</span> <span class="o">=</span> <span class="n">Student</span><span class="p">();</span>
      <span class="c1">// 6.1 姓名zhangsan</span>
      <span class="n">stu</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">"zhangsan"</span><span class="p">;</span>
      <span class="c1">// 6.2 考试次数递增</span>
      <span class="n">stu</span><span class="p">.</span><span class="n">exam</span> <span class="o">=</span> <span class="n">exam_</span><span class="o">++</span><span class="p">;</span>
      <span class="c1">// 6.3 分数一直递增</span>
      <span class="n">stu</span><span class="p">.</span><span class="n">score</span> <span class="o">=</span> <span class="n">score_</span><span class="p">;</span>
      <span class="n">score_</span> <span class="o">+=</span> <span class="mf">0.1</span><span class="p">;</span>
      
      <span class="n">RCLCPP_INFO</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">get_logger</span><span class="p">(),</span> <span class="s">"Student: '%s', exam time: %d, socre is : %f"</span><span class="p">,</span> <span class="n">stu</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span><span class="n">stu</span><span class="p">.</span><span class="n">exam</span><span class="p">,</span><span class="n">stu</span><span class="p">.</span><span class="n">score</span><span class="p">);</span>
      <span class="n">publisher_</span><span class="o">-&gt;</span><span class="n">publish</span><span class="p">(</span><span class="n">stu</span><span class="p">);</span>

      
    <span class="p">}</span>

    <span class="c1">// 5. 计时器、发布者和计数器字段的声明</span>
    <span class="n">rclcpp</span><span class="o">::</span><span class="n">TimerBase</span><span class="o">::</span><span class="n">SharedPtr</span> <span class="n">timer_</span><span class="p">;</span>
    <span class="n">rclcpp</span><span class="o">::</span><span class="n">Publisher</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;::</span><span class="n">SharedPtr</span> <span class="n">publisher_</span><span class="p">;</span>
    <span class="kt">size_t</span> <span class="n">exam_</span><span class="p">;</span>
    <span class="n">double_t</span> <span class="n">score_</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
  <span class="n">rclcpp</span><span class="o">::</span><span class="n">init</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
  <span class="c1">// 创建节点，给出构造的节点名为CppIdlMsgPubNode</span>
  <span class="n">rclcpp</span><span class="o">::</span><span class="n">spin</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">CppIdlMsgPub</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"CppIdlMsgPubNode"</span><span class="p">));</span>
  <span class="n">rclcpp</span><span class="o">::</span><span class="n">shutdown</span><span class="p">();</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="262-配置cc自定义话题发布方功能包">2.6.2 配置C/C++自定义话题发布方功能包</h2>

<ol>
  <li>配置<code class="language-plaintext highlighter-rouge">packages.xml</code>文件，添加依赖项有<code class="language-plaintext highlighter-rouge">rclcpp</code>用于构建节点，和<code class="language-plaintext highlighter-rouge">student_msg</code>用于构建<code class="language-plaintext highlighter-rouge">Student.msg</code>：</li>
</ol>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0"?&gt;</span>
<span class="cp">&lt;?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?&gt;</span>
<span class="nt">&lt;package</span> <span class="na">format=</span><span class="s">"3"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;name&gt;</span>cpp_idl_pub<span class="nt">&lt;/name&gt;</span>
  <span class="nt">&lt;version&gt;</span>0.0.0<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;description&gt;</span>TODO: Package description<span class="nt">&lt;/description&gt;</span>
  <span class="nt">&lt;maintainer</span> <span class="na">email=</span><span class="s">"pldz@R7000.com"</span><span class="nt">&gt;</span>pldz<span class="nt">&lt;/maintainer&gt;</span>
  <span class="nt">&lt;license&gt;</span>TODO: License declaration<span class="nt">&lt;/license&gt;</span>

  <span class="nt">&lt;buildtool_depend&gt;</span>ament_cmake<span class="nt">&lt;/buildtool_depend&gt;</span>

  <span class="c">&lt;!-- 添加依赖项  --&gt;</span>
  <span class="nt">&lt;depend&gt;</span>rclcpp<span class="nt">&lt;/depend&gt;</span>
  <span class="nt">&lt;depend&gt;</span>student_msg<span class="nt">&lt;/depend&gt;</span>

  <span class="nt">&lt;test_depend&gt;</span>ament_lint_auto<span class="nt">&lt;/test_depend&gt;</span>
  <span class="nt">&lt;test_depend&gt;</span>ament_lint_common<span class="nt">&lt;/test_depend&gt;</span>

  <span class="nt">&lt;export&gt;</span>
    <span class="nt">&lt;build_type&gt;</span>ament_cmake<span class="nt">&lt;/build_type&gt;</span>
  <span class="nt">&lt;/export&gt;</span>
<span class="nt">&lt;/package&gt;</span>

</code></pre></div></div>

<ol>
  <li>配置<code class="language-plaintext highlighter-rouge">CMakeLists.txt</code>：</li>
</ol>

<div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cmake_minimum_required</span><span class="p">(</span>VERSION 3.8<span class="p">)</span>
<span class="nb">project</span><span class="p">(</span>cpp_idl_pub<span class="p">)</span>

<span class="nb">if</span><span class="p">(</span>CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES <span class="s2">"Clang"</span><span class="p">)</span>
  <span class="nb">add_compile_options</span><span class="p">(</span>-Wall -Wextra -Wpedantic<span class="p">)</span>
<span class="nb">endif</span><span class="p">()</span>

<span class="c1"># find dependencies</span>
<span class="nb">find_package</span><span class="p">(</span>ament_cmake REQUIRED<span class="p">)</span>

<span class="c1"># 1. 添加依赖项</span>
<span class="nb">find_package</span><span class="p">(</span>rclcpp REQUIRED<span class="p">)</span>
<span class="nb">find_package</span><span class="p">(</span>student_msg REQUIRED<span class="p">)</span>
<span class="c1"># uncomment the following section in order to fill in</span>
<span class="c1"># further dependencies manually.</span>
<span class="c1"># find_package(&lt;dependency&gt; REQUIRED)</span>

<span class="c1"># 2. 默认是已经创建了构建节点的文件配置</span>
<span class="nb">add_executable</span><span class="p">(</span>cppIdlPubNode src/cppIdlPubNode.cpp<span class="p">)</span>

<span class="c1"># 3. 默认已经包括&lt;INSTALL_INTERFACE&gt;的路径也不用更改</span>
<span class="nb">target_include_directories</span><span class="p">(</span>cppIdlPubNode PUBLIC
  $&lt;BUILD_INTERFACE:<span class="si">${</span><span class="nv">CMAKE_CURRENT_SOURCE_DIR</span><span class="si">}</span>/include&gt;
  $&lt;INSTALL_INTERFACE:include&gt;<span class="p">)</span>


<span class="c1"># 4. ament工具构建节点的依赖配置</span>
<span class="nf">ament_target_dependencies</span><span class="p">(</span>
  cppIdlPubNode
  rclcpp
  student_msg
<span class="p">)</span>

<span class="nb">target_compile_features</span><span class="p">(</span>cppIdlPubNode PUBLIC c_std_99 cxx_std_17<span class="p">)</span>  <span class="c1"># Require C99 and C++17</span>

<span class="c1"># 5. Install配置，默认ros2 run &lt;包名&gt;的配置</span>
<span class="nb">install</span><span class="p">(</span>TARGETS cppIdlPubNode
  DESTINATION lib/<span class="si">${</span><span class="nv">PROJECT_NAME</span><span class="si">}</span><span class="p">)</span>

<span class="nb">if</span><span class="p">(</span>BUILD_TESTING<span class="p">)</span>
  <span class="nb">find_package</span><span class="p">(</span>ament_lint_auto REQUIRED<span class="p">)</span>
  <span class="c1"># the following line skips the linter which checks for copyrights</span>
  <span class="c1"># comment the line when a copyright and license is added to all source files</span>
  <span class="nb">set</span><span class="p">(</span>ament_cmake_copyright_FOUND TRUE<span class="p">)</span>
  <span class="c1"># the following line skips cpplint (only works in a git repo)</span>
  <span class="c1"># comment the line when this package is in a git repo and when</span>
  <span class="c1"># a copyright and license is added to all source files</span>
  <span class="nb">set</span><span class="p">(</span>ament_cmake_cpplint_FOUND TRUE<span class="p">)</span>
  <span class="nf">ament_lint_auto_find_test_dependencies</span><span class="p">()</span>
<span class="nb">endif</span><span class="p">()</span>

<span class="c1"># 6. 生成包的环境</span>
<span class="nf">ament_package</span><span class="p">()</span>

</code></pre></div></div>

<h2 id="263-编译并运行cc自定义话题发布方功能包">2.6.3 编译并运行C/C++自定义话题发布方功能包</h2>

<ol>
  <li>
    <p>编译： <code class="language-plaintext highlighter-rouge">colcon build --packages-select cpp_idl_pub</code></p>
  </li>
  <li>
    <p>激活环境：<code class="language-plaintext highlighter-rouge">. install/setup.bash</code></p>
  </li>
  <li>
    <p>运行：<code class="language-plaintext highlighter-rouge">ros2 run cpp_idl_pub cppIdlPubNode</code></p>
  </li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code<span class="nv">$ </span>colcon build <span class="nt">--packages-select</span> cpp_idl_pub
Starting <span class="o">&gt;&gt;&gt;</span> cpp_idl_pub
Finished <span class="o">&lt;&lt;&lt;</span> cpp_idl_pub <span class="o">[</span>10.0s]                     

Summary: 1 package finished <span class="o">[</span>10.4s]
pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code<span class="nv">$ </span><span class="nb">.</span> <span class="nb">install</span>/setup.bash
pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code<span class="nv">$ </span>ros2 run cpp_idl_pub cppIdlPubNode 
<span class="o">[</span>INFO] <span class="o">[</span>1683041064.126034476] <span class="o">[</span>CppIdlMsgPubNode]: Student: <span class="s1">'zhangsan'</span>, exam <span class="nb">time</span>: 0, socre is : 60.000000
<span class="o">[</span>INFO] <span class="o">[</span>1683041064.625514370] <span class="o">[</span>CppIdlMsgPubNode]: Student: <span class="s1">'zhangsan'</span>, exam <span class="nb">time</span>: 1, socre is : 60.100000
<span class="o">[</span>INFO] <span class="o">[</span>1683041065.125571561] <span class="o">[</span>CppIdlMsgPubNode]: Student: <span class="s1">'zhangsan'</span>, exam <span class="nb">time</span>: 2, socre is : 60.200000
^C[INFO] <span class="o">[</span>1683041082.271152379] <span class="o">[</span>rclcpp]: signal_handler<span class="o">(</span><span class="nv">signum</span><span class="o">=</span>2<span class="o">)</span>
</code></pre></div></div>

<h2 id="264-创建cc自定义话题订阅方功能包并编辑节点文件">2.6.4 创建C/C++自定义话题订阅方功能包并编辑节点文件</h2>

<ol>
  <li>
    <p>创建ROS2功能包，包名为<code class="language-plaintext highlighter-rouge">cpp_idl_sub</code>，节点名称为<code class="language-plaintext highlighter-rouge">cppIdlSubNode</code>，并直接指定依赖项为<code class="language-plaintext highlighter-rouge">rclcpp</code>和<code class="language-plaintext highlighter-rouge">student_msg</code>，如下所示：<code class="language-plaintext highlighter-rouge">ros2 pkg create cpp_idl_sub --build-type ament_cmake --node-name cppIdlSubNode --dependencies rclcpp student_msg</code></p>
  </li>
  <li>
    <p>编辑节点文件：订阅<code class="language-plaintext highlighter-rouge">Student</code>类型的话题，话题名为<code class="language-plaintext highlighter-rouge">myStudent</code>:</p>
  </li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"rclcpp/rclcpp.hpp"</span><span class="cp">
</span>
<span class="c1">// 1. 添加自定义消息头文件，如果vscode出现下划线警告，则需要配置settings.json添加include路径</span>
<span class="cp">#include</span> <span class="cpf">"student_msg/msg/student.hpp"</span><span class="cp">
</span>
<span class="c1">// 占位符，结合std::bind函数的绑定使用</span>
<span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">_1</span><span class="p">;</span>

<span class="c1">// 2. 引入Student.msg生成的Student类</span>
<span class="k">using</span> <span class="n">student_msg</span><span class="o">::</span><span class="n">msg</span><span class="o">::</span><span class="n">Student</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">CppIdlMsgSub</span><span class="o">:</span> <span class="k">public</span> <span class="n">rclcpp</span><span class="o">::</span><span class="n">Node</span>
<span class="p">{</span>
  <span class="nl">public:</span>
      <span class="cm">/* 3. ROS2节点的构造函数，其中包括一个node对象（初始化时候没有给出节点的名称），
      * 和属性exam_（初始化为0,类型为size_t)，以及属性socre_（类型为double_t初始值为60.0） */</span>
      <span class="n">CppIdlMsgSub</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">nodeName</span><span class="p">)</span><span class="o">:</span><span class="n">Node</span><span class="p">(</span><span class="n">nodeName</span><span class="p">)</span>
      <span class="p">{</span>
      <span class="n">subscription_</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">create_subscription</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;</span><span class="p">(</span>
      <span class="s">"myStudent"</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">CppIdlMsgSub</span><span class="o">::</span><span class="n">topic_callback</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="n">_1</span><span class="p">));</span>
      <span class="p">}</span>

  <span class="k">private</span><span class="o">:</span>
    <span class="c1">// 4. 定义订阅到消息的回调函数</span>
    <span class="kt">void</span> <span class="nf">topic_callback</span><span class="p">(</span><span class="k">const</span> <span class="n">Student</span> <span class="o">&amp;</span> <span class="n">stu</span><span class="p">)</span> <span class="k">const</span>
    <span class="p">{</span>
      <span class="n">RCLCPP_INFO</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">get_logger</span><span class="p">(),</span> <span class="s">"I heard: %s, exam: %d, score: %f"</span><span class="p">,</span> <span class="n">stu</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span><span class="n">stu</span><span class="p">.</span><span class="n">exam</span><span class="p">,</span> <span class="n">stu</span><span class="p">.</span><span class="n">score</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// 5. 计时器、发布者和计数器字段的声明</span>
    <span class="n">rclcpp</span><span class="o">::</span><span class="n">Subscription</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;::</span><span class="n">SharedPtr</span> <span class="n">subscription_</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
  <span class="n">rclcpp</span><span class="o">::</span><span class="n">init</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
  <span class="c1">// 创建节点，给出构造的节点名为CppIdlMsgSubNode</span>
  <span class="n">rclcpp</span><span class="o">::</span><span class="n">spin</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">CppIdlMsgSub</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"CppIdlMsgSubNode"</span><span class="p">));</span>
  <span class="n">rclcpp</span><span class="o">::</span><span class="n">shutdown</span><span class="p">();</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="265-编译并运行cc自定义话题订阅节点">2.6.5 编译并运行C/C++自定义话题订阅节点</h2>

<ol>
  <li>
    <p>由于在创建包时候已经指定了依赖项，可以不用再进行配置<code class="language-plaintext highlighter-rouge">packages.xml</code>和<code class="language-plaintext highlighter-rouge">CMakeLists.txt</code>文件，直接编译<code class="language-plaintext highlighter-rouge">colcon build --packages-select cpp_idl_sub</code></p>
  </li>
  <li>
    <p>激活环境：<code class="language-plaintext highlighter-rouge">. install/setup.bash</code></p>
  </li>
  <li>
    <p>运行：</p>
  </li>
</ol>

<p><img src="/assets/pics/ROS2_BASIC/2_custom_cpp_communication.png" alt="自定义消息C/C++通讯" /></p>

<h1 id="27-使用python实现自定义话题通讯">2.7 使用Python实现自定义话题通讯</h1>

<h2 id="271-创建python自定义话题订阅方节点并编写节点内容">2.7.1 创建Python自定义话题订阅方节点并编写节点内容</h2>

<ol>
  <li>
    <p>创建ROS2 Python发布方功能包，包名为<code class="language-plaintext highlighter-rouge">python_idl_pub</code>,节点名为<code class="language-plaintext highlighter-rouge">pythonIdlPubNode</code>：<code class="language-plaintext highlighter-rouge">ros2 pkg create python_idl_pub --build-type ament_python --node-name pythonIdlPubNode</code></p>
  </li>
  <li>
    <p>配置Vscode环境：在<code class="language-plaintext highlighter-rouge">settings.json</code>中添加Python的依赖项位置，虽然编译不影响报错，但是vscode的警告看着也不习惯：</p>
  </li>
</ol>

<p><img src="/assets/pics/ROS2_BASIC/2_custom_py_package_path.png" alt="Vscode对自定义节点的Python配置" /></p>

<ol>
  <li>编写订阅节点：</li>
</ol>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">rclpy</span>
<span class="kn">from</span> <span class="n">rclpy.node</span> <span class="kn">import</span> <span class="n">Node</span>

<span class="c1"># 1. 导入包，如果vscode下划线警告，则需要配置settings.json
</span><span class="kn">from</span> <span class="n">student_msg.msg</span> <span class="kn">import</span> <span class="n">Student</span>


<span class="k">class</span> <span class="nc">PythonIdlPub</span><span class="p">(</span><span class="n">Node</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nodeName</span><span class="p">):</span>
        <span class="c1"># 1. 初始化父类构造函数，其中节点名需要创建时候指定
</span>        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="n">nodeName</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">exam_</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">score_</span> <span class="o">=</span> <span class="mf">60.0</span>
        <span class="c1"># 2. 声明发布者，发布消息类型为Student，话题名为myStudent,队列大小为10
</span>        <span class="n">self</span><span class="p">.</span><span class="n">publisher_</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">create_publisher</span><span class="p">(</span><span class="n">Student</span><span class="p">,</span> <span class="sh">'</span><span class="s">myStudent</span><span class="sh">'</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
        <span class="c1"># 3. 创建定时器，其中更新频率为0.5秒，并绑定回调函数
</span>        <span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">create_timer</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">timer_callback</span><span class="p">)</span>
        
    <span class="c1"># 4. 定义回调函数
</span>    <span class="k">def</span> <span class="nf">timer_callback</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">stu</span> <span class="o">=</span> <span class="nc">Student</span><span class="p">()</span>
        <span class="n">stu</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">zhangsan</span><span class="sh">"</span>
        <span class="n">stu</span><span class="p">.</span><span class="n">exam</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">exam_</span>
        <span class="n">stu</span><span class="p">.</span><span class="n">score</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">score_</span>

        <span class="n">self</span><span class="p">.</span><span class="n">publisher_</span><span class="p">.</span><span class="nf">publish</span><span class="p">(</span><span class="n">stu</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">get_logger</span><span class="p">().</span><span class="nf">info</span><span class="p">(</span><span class="sh">'</span><span class="s">Publishing: name: {}, exam:{}, score:{}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">stu</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="n">stu</span><span class="p">.</span><span class="n">exam</span><span class="p">,</span><span class="n">stu</span><span class="p">.</span><span class="n">score</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">exam_</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">self</span><span class="p">.</span><span class="n">score_</span> <span class="o">+=</span> <span class="mf">0.1</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">init</span><span class="p">(</span><span class="n">args</span><span class="o">=</span><span class="n">args</span><span class="p">)</span>
    <span class="n">pythonIdlPubNode</span> <span class="o">=</span> <span class="nc">PythonIdlPub</span><span class="p">(</span><span class="sh">"</span><span class="s">pythonIdlPubNode</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">spin</span><span class="p">(</span><span class="n">pythonIdlPubNode</span><span class="p">)</span>
    <span class="c1"># 销毁节点
</span>    <span class="n">pythonIdlPubNode</span><span class="p">.</span><span class="nf">destroy_node</span><span class="p">()</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">shutdown</span><span class="p">()</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="272-配置python自定义订阅方功能包">2.7.2 配置Python自定义订阅方功能包</h2>

<ol>
  <li>配置<code class="language-plaintext highlighter-rouge">packages.xml</code>增加<code class="language-plaintext highlighter-rouge">rclpy</code>和<code class="language-plaintext highlighter-rouge">student_msg</code>两个依赖项，注意Python本身是可执行文件，因此它的为<code class="language-plaintext highlighter-rouge">&lt;exec_depend&gt;</code>与<code class="language-plaintext highlighter-rouge">C/C++</code>的<code class="language-plaintext highlighter-rouge">&lt;depend&gt;</code>关键字不同：</li>
</ol>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0"?&gt;</span>
<span class="cp">&lt;?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?&gt;</span>
<span class="nt">&lt;package</span> <span class="na">format=</span><span class="s">"3"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;name&gt;</span>python_idl_pub<span class="nt">&lt;/name&gt;</span>
  <span class="nt">&lt;version&gt;</span>0.0.0<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;description&gt;</span>TODO: Package description<span class="nt">&lt;/description&gt;</span>
  <span class="nt">&lt;maintainer</span> <span class="na">email=</span><span class="s">"pldz@R7000.com"</span><span class="nt">&gt;</span>pldz<span class="nt">&lt;/maintainer&gt;</span>
  <span class="nt">&lt;license&gt;</span>TODO: License declaration<span class="nt">&lt;/license&gt;</span>

  <span class="nt">&lt;test_depend&gt;</span>ament_copyright<span class="nt">&lt;/test_depend&gt;</span>
  <span class="nt">&lt;test_depend&gt;</span>ament_flake8<span class="nt">&lt;/test_depend&gt;</span>
  <span class="nt">&lt;test_depend&gt;</span>ament_pep257<span class="nt">&lt;/test_depend&gt;</span>
  <span class="nt">&lt;test_depend&gt;</span>python3-pytest<span class="nt">&lt;/test_depend&gt;</span>

  <span class="c">&lt;!-- 添加依赖项 --&gt;</span>
  <span class="nt">&lt;exec_depend&gt;</span>rclpy<span class="nt">&lt;/exec_depend&gt;</span>
  <span class="nt">&lt;exec_depend&gt;</span>student_msg<span class="nt">&lt;/exec_depend&gt;</span>

  <span class="nt">&lt;export&gt;</span>
    <span class="nt">&lt;build_type&gt;</span>ament_python<span class="nt">&lt;/build_type&gt;</span>
  <span class="nt">&lt;/export&gt;</span>
<span class="nt">&lt;/package&gt;</span>

</code></pre></div></div>

<ol>
  <li>配置<code class="language-plaintext highlighter-rouge">setup.py</code>文件，事实上，我们已经创建包的时候已经指定了节点名，其实应该是不用配置生成节点的<code class="language-plaintext highlighter-rouge">main</code>入口的：</li>
</ol>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">setuptools</span> <span class="kn">import</span> <span class="n">setup</span>

<span class="n">package_name</span> <span class="o">=</span> <span class="sh">'</span><span class="s">python_idl_pub</span><span class="sh">'</span>

<span class="nf">setup</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="n">package_name</span><span class="p">,</span>
    <span class="n">version</span><span class="o">=</span><span class="sh">'</span><span class="s">0.0.0</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">packages</span><span class="o">=</span><span class="p">[</span><span class="n">package_name</span><span class="p">],</span>
    <span class="n">data_files</span><span class="o">=</span><span class="p">[</span>
        <span class="p">(</span><span class="sh">'</span><span class="s">share/ament_index/resource_index/packages</span><span class="sh">'</span><span class="p">,</span>
            <span class="p">[</span><span class="sh">'</span><span class="s">resource/</span><span class="sh">'</span> <span class="o">+</span> <span class="n">package_name</span><span class="p">]),</span>
        <span class="p">(</span><span class="sh">'</span><span class="s">share/</span><span class="sh">'</span> <span class="o">+</span> <span class="n">package_name</span><span class="p">,</span> <span class="p">[</span><span class="sh">'</span><span class="s">package.xml</span><span class="sh">'</span><span class="p">]),</span>
    <span class="p">],</span>
    <span class="n">install_requires</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">setuptools</span><span class="sh">'</span><span class="p">],</span>
    <span class="n">zip_safe</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">maintainer</span><span class="o">=</span><span class="sh">'</span><span class="s">pldz</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">maintainer_email</span><span class="o">=</span><span class="sh">'</span><span class="s">pldz@R7000.com</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="sh">'</span><span class="s">TODO: Package description</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">license</span><span class="o">=</span><span class="sh">'</span><span class="s">TODO: License declaration</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">tests_require</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">pytest</span><span class="sh">'</span><span class="p">],</span>
    <span class="c1"># 配置节点的main函数入口
</span>    <span class="n">entry_points</span><span class="o">=</span><span class="p">{</span>
        <span class="sh">'</span><span class="s">console_scripts</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span>
            <span class="sh">'</span><span class="s">pythonIdlPubNode = python_idl_pub.pythonIdlPubNode:main</span><span class="sh">'</span>
        <span class="p">],</span>
    <span class="p">},</span>
<span class="p">)</span>

</code></pre></div></div>

<h2 id="273-编译并运行python自定义话题发布方">2.7.3 编译并运行Python自定义话题发布方</h2>

<ol>
  <li>
    <p>编译：<code class="language-plaintext highlighter-rouge">colcon build --packages-select python_idl_pub</code></p>
  </li>
  <li>
    <p>激活环境：<code class="language-plaintext highlighter-rouge">. install/setup.bash</code></p>
  </li>
  <li>
    <p>运行节点：<code class="language-plaintext highlighter-rouge">ros2 run python_idl_pub pythonIdlPubNode</code></p>
  </li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code<span class="nv">$ </span>ros2 run python_idl_pub pythonIdlPubNode 
<span class="o">[</span>INFO] <span class="o">[</span>1683044269.902750751] <span class="o">[</span>pythonIdlPubNode]: Publishing: name: zhangsan, exam:0, score:60.0
<span class="o">[</span>INFO] <span class="o">[</span>1683044270.393748471] <span class="o">[</span>pythonIdlPubNode]: Publishing: name: zhangsan, exam:1, score:60.1
<span class="o">[</span>INFO] <span class="o">[</span>1683044270.891683074] <span class="o">[</span>pythonIdlPubNode]: Publishing: name: zhangsan, exam:2, score:60.2
</code></pre></div></div>

<h2 id="274-创建python自定义话题订阅方">2.7.4 创建Python自定义话题订阅方</h2>

<ol>
  <li>
    <p>创建Python功能包时，包名为<code class="language-plaintext highlighter-rouge">python_idl_sub</code>，节点名为<code class="language-plaintext highlighter-rouge">pythonIdlSubNode</code>，直接指定依赖项<code class="language-plaintext highlighter-rouge">rclpy</code>和<code class="language-plaintext highlighter-rouge">student_msg</code>：<code class="language-plaintext highlighter-rouge">ros2 pkg create python_idl_sub --build-type ament_python --node-name pythonIdlSubNode --dependencies rclpy student_msg</code></p>
  </li>
  <li>
    <p>编写节点：</p>
  </li>
</ol>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">rclpy</span>
<span class="kn">from</span> <span class="n">rclpy.node</span> <span class="kn">import</span> <span class="n">Node</span>

<span class="c1"># 1. 导入包，如果vscode下划线警告，则需要配置settings.json
</span><span class="kn">from</span> <span class="n">student_msg.msg</span> <span class="kn">import</span> <span class="n">Student</span>


<span class="k">class</span> <span class="nc">PythonIdlSub</span><span class="p">(</span><span class="n">Node</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nodeName</span><span class="p">):</span>
        <span class="c1"># 1. 构造函数，初始化node节点
</span>        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="n">nodeName</span><span class="p">)</span>
        <span class="c1"># 2. 声明订阅者，订阅话题`myTopicNmae`,并绑定回调函数
</span>        <span class="n">self</span><span class="p">.</span><span class="n">subscription</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">create_subscription</span><span class="p">(</span><span class="n">Student</span><span class="p">,</span><span class="sh">'</span><span class="s">myStudent</span><span class="sh">'</span><span class="p">,</span><span class="n">self</span><span class="p">.</span><span class="n">listener_callback</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>

    <span class="c1"># 3. 定义回调函数
</span>    <span class="k">def</span> <span class="nf">listener_callback</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">stu</span><span class="p">:</span><span class="n">Student</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">get_logger</span><span class="p">().</span><span class="nf">info</span><span class="p">(</span><span class="sh">'</span><span class="s">I heard: name:{}, exam:{}, score{}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">stu</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">stu</span><span class="p">.</span><span class="n">exam</span><span class="p">,</span> <span class="n">stu</span><span class="p">.</span><span class="n">score</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">init</span><span class="p">(</span><span class="n">args</span><span class="o">=</span><span class="n">args</span><span class="p">)</span>
    <span class="n">pythonIdlSubNode</span> <span class="o">=</span> <span class="nc">PythonIdlSub</span><span class="p">(</span><span class="sh">"</span><span class="s">pythonIdlSubNode</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">spin</span><span class="p">(</span><span class="n">pythonIdlSubNode</span><span class="p">)</span>
    <span class="n">pythonIdlSubNode</span><span class="p">.</span><span class="nf">destroy_node</span><span class="p">()</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">shutdown</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="275-编译运行python发布方节点">2.7.5 编译运行Python发布方节点</h2>

<ol>
  <li>
    <p>由于指定了依赖项，直接编译即可: <code class="language-plaintext highlighter-rouge">colcon build --packages-select python_idl_sub</code></p>
  </li>
  <li>
    <p>激活环境: <code class="language-plaintext highlighter-rouge">. install/setup.bash</code></p>
  </li>
  <li>
    <p>运行所有节点：</p>
  </li>
</ol>

<p><img src="/assets/pics/ROS2_BASIC/2_multi_custom_communication.png" alt="自定义话题通讯" /></p>

<h2 id="28-话题通讯小结">2.8 话题通讯小结</h2>

<ol>
  <li>
    <p>创建功能包时，如果能够直接指定节点名和依赖项，可以省去很大部分的配置工作</p>
  </li>
  <li>
    <p>C/C++手动配置功能包时，<code class="language-plaintext highlighter-rouge">packages.xml</code>配置依赖项，<code class="language-plaintext highlighter-rouge">CMakeLists.txt</code>配置编译的内容，包括<code class="language-plaintext highlighter-rouge">find_package</code>；<code class="language-plaintext highlighter-rouge">add_executable</code>；<code class="language-plaintext highlighter-rouge">target_include_directories</code>；<code class="language-plaintext highlighter-rouge">ament_target_dependencies</code>；<code class="language-plaintext highlighter-rouge">install</code>；<code class="language-plaintext highlighter-rouge">ament_package</code>这六个部分</p>
  </li>
  <li>
    <p>Python手动配置功能包时，<code class="language-plaintext highlighter-rouge">packages.xml</code>配置可执行的依赖项<code class="language-plaintext highlighter-rouge">exec_depend</code>而不是<code class="language-plaintext highlighter-rouge">depend</code>,并且在<code class="language-plaintext highlighter-rouge">setup.py</code>中主要配置节点的<code class="language-plaintext highlighter-rouge">main</code>函数入口</p>
  </li>
  <li>
    <p>自定义话题通讯，本质是创建一个C/C++的功能包，将里面的自定义消息编译成可以使用的<code class="language-plaintext highlighter-rouge">.c</code>和<code class="language-plaintext highlighter-rouge">.py</code>文件，值得注意的是，生成好的中间文件是存放在 <strong>工作空间</strong>的<code class="language-plaintext highlighter-rouge">install</code>文件夹下，如果这个这个工作空间的<code class="language-plaintext highlighter-rouge">install</code>找不到或者不是一个，那是需要再进一步的手动配置的</p>
  </li>
</ol>]]></content><author><name>pldz9</name></author><category term="ROS2_BASIC" /><summary type="html"><![CDATA[2.5 自定义话题通讯 参考内容 Creating custom msg and srv files 2.2.4_话题通信_自定义接口消息_接口文件 2.5.1 自定义话题通讯的一般流程 构建自定义话题其实就是利用ament_cmake工具构建出该自定义话题的.c和.py文件，编译好的自定义话题，也就可以和std_msgs一样在创建包的时候，手动添加进去，后续即可不用再配置packages.xml和CMakeLists.txt 创建ROS2功能包，功能包可以只用来作为存放自定义的msg/srv，不需要节点node的功能包，且--build-type必须是ament_camke ，因为目前来看，Python的自定义的消息或者服务也需要通过cmake编译出来再调用，功能包必须是下划线的推荐命名方法，而不是大小写的驼峰，否则会报错，如下所示： --- stderr: msgDemoError CMake Error at /opt/ros/humble/share/rosidl_adapter/cmake/rosidl_adapt_interfaces.cmake:59 (message): execute_process(/usr/bin/python3.10 -m rosidl_adapter --package-name msgDemoError --arguments-file /mnt/hgfs/VMware/ROS2_DEMO/2_Chapter/code/build/msgDemoError/rosidl_adapter__arguments__msgDemoError.json --output-dir /mnt/hgfs/VMware/ROS2_DEMO/2_Chapter/code/build/msgDemoError/rosidl_adapter/msgDemoError --output-file /mnt/hgfs/VMware/ROS2_DEMO/2_Chapter/code/build/msgDemoError/rosidl_adapter/msgDemoError.idls) returned error code 1: Error processing 'String name' of 'msgDemoError/Student': ''msgDemoError' is an invalid package name. It should have the pattern '^(?!.*__)(?!.*_$)[a-z][a-z0-9_]*$'' Traceback (most recent call last): File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main return _run_code(code, main_globals, None, File "/usr/lib/python3.10/runpy.py", line 86, in _run_code exec(code, run_globals) File "/opt/ros/humble/local/lib/python3.10/dist-packages/rosidl_adapter/__main__.py", line 19, in &lt;module&gt; sys.exit(main()) File "/opt/ros/humble/local/lib/python3.10/dist-packages/rosidl_adapter/main.py", line 53, in main abs_idl_file = convert_to_idl( File "/opt/ros/humble/local/lib/python3.10/dist-packages/rosidl_adapter/__init__.py", line 19, in convert_to_idl return convert_msg_to_idl( File "/opt/ros/humble/local/lib/python3.10/dist-packages/rosidl_adapter/msg/__init__.py", line 28, in convert_msg_to_idl msg = parse_message_string(package_name, input_file.stem, content) File "/opt/ros/humble/local/lib/python3.10/dist-packages/rosidl_adapter/parser.py", line 520, in parse_message_string Type(type_string, context_package_name=pkg_name), File "/opt/ros/humble/local/lib/python3.10/dist-packages/rosidl_adapter/parser.py", line 277, in __init__ super(Type, self).__init__( File "/opt/ros/humble/local/lib/python3.10/dist-packages/rosidl_adapter/parser.py", line 201, in __init__ raise InvalidResourceName( rosidl_adapter.parser.InvalidResourceName: 'msgDemoError' is an invalid package name. It should have the pattern '^(?!.*__)(?!.*_$)[a-z][a-z0-9_]*$' Call Stack (most recent call first): /opt/ros/humble/share/rosidl_cmake/cmake/rosidl_generate_interfaces.cmake:130 (rosidl_adapt_interfaces) CMakeLists.txt:16 (rosidl_generate_interfaces) --- Failed &lt;&lt;&lt; msgDemoError [1.53s, exited with code 1] 在ROS2功能包内创建msg文件夹，里面存放自定义的.msg消息文件，并且 .msg文件必须是大写开头的符合类的命名规则 配置packages.xml文件，都需要配置下面的内容(下面的配置项与.msg文件无关，是默认的固定配置) &lt;!-- 这一项是针对在msg中可能用到的其他依赖项，例如geomtry_msgs等等，如过没有用到就不添加 --&gt; &lt;depend&gt;其他的depend&lt;/depend&gt; &lt;!-- 下面三项是必须的 --&gt; &lt;build_depend&gt;rosidl_default_generators&lt;/build_depend&gt; &lt;exec_depend&gt;rosidl_default_runtime&lt;/exec_depend&gt; &lt;member_of_group&gt;rosidl_interface_packages&lt;/member_of_group&gt; 配置CMakeLists.txt文件,find_package和rosidl_generate_interfaces # 0. 是针对在msg中可能用到的其他依赖项，例如geomtry_msgs等等，则需要添加 # find_package(geometry_msgs REQUIRED) # 1. rosidl_default_generators是必须添加的内容 find_package(rosidl_default_generators REQUIRED) # 2. rosidl_generate_interfaces必须配置，里面添加msg文件位置 rosidl_generate_interfaces(${PROJECT_NAME} # 2.1 添加自定义的msg位置，例如存放在功能包的msg文件夹下的xxx.msg "msg/xxx.msg" # 2.2 可选，如果xxx.msg依赖了其他的内容,例如依赖了geometry_msgs DEPENDENCIES geometry_msgs ) 编译功能包:colcon build --packages-select &lt;功能包名&gt; 此时激活install目录下的setup.bash如. install/setup.bash，可以通过ros2 interface show &lt;功能包名称&gt;/msg/xxx.msg查看到xxx.msg内容，此时编译好的msg的.c文件存放在install/&lt;功能包名&gt;/include下，.py文件则存放在install/&lt;功能包名&gt;/local/ 2.5.2 创建自定义话题消息简单例子 创建自定义消息功能包msg_demo，采用ament_cmake方式：ros2 pkg create msg_demo --build-type ament_cmake 在功能包内创建msg文件夹，其中存放Demo.msg文件，文件内容如下：其中还依赖geometry_msgs geometry_msgs/Point center float64 radius 此时的功能包内部的目录结构如下：tree -a pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code/msg_demo$ tree -a . ├── CMakeLists.txt ├── include │ └── msg_demo ├── msg │ └── Demo.msg ├── package.xml └── src 4 directories, 3 files 配置packages.xml添加依赖项，特别的是该Demo.msg还需依赖gemotry_msgs: &lt;?xml version="1.0"?&gt; &lt;?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?&gt; &lt;package format="3"&gt; &lt;name&gt;msg_demo&lt;/name&gt; &lt;version&gt;0.0.0&lt;/version&gt; &lt;description&gt;TODO: Package description&lt;/description&gt; &lt;maintainer email="pldz@R7000.com"&gt;pldz&lt;/maintainer&gt; &lt;license&gt;TODO: License declaration&lt;/license&gt; &lt;buildtool_depend&gt;ament_cmake&lt;/buildtool_depend&gt; &lt;!-- 自定义Demo.msg中依赖geometry_msgs所以添加到depend --&gt; &lt;depend&gt;geometry_msgs&lt;/depend&gt; &lt;!-- 构建自定义msg的必须依赖项 --&gt; &lt;buildtool_depend&gt;rosidl_default_generators&lt;/buildtool_depend&gt; &lt;exec_depend&gt;rosidl_default_runtime&lt;/exec_depend&gt; &lt;member_of_group&gt;rosidl_interface_packages&lt;/member_of_group&gt; &lt;test_depend&gt;ament_lint_auto&lt;/test_depend&gt; &lt;test_depend&gt;ament_lint_common&lt;/test_depend&gt; &lt;export&gt; &lt;build_type&gt;ament_cmake&lt;/build_type&gt; &lt;/export&gt; &lt;/package&gt; 配置CMakeLists.txt文件，添加构建自定义Demo.msg的依赖： cmake_minimum_required(VERSION 3.8) project(msg_demo) if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang") add_compile_options(-Wall -Wextra -Wpedantic) endif() # find dependencies find_package(ament_cmake REQUIRED) # uncomment the following section in order to fill in # further dependencies manually. # find_package(&lt;dependency&gt; REQUIRED) # 1. 自定义的Demo.msg依赖geometry_msgs find_package(geometry_msgs REQUIRED) # 2. 必须添加的构建自定义包辅助包的位置 find_package(rosidl_default_generators REQUIRED) # 3. 构建自定义msg rosidl_generate_interfaces(${PROJECT_NAME} "msg/Demo.msg" # Demo.msg的位置 DEPENDENCIES geometry_msgs # 创建Demo.msg需要的依赖 ) if(BUILD_TESTING) find_package(ament_lint_auto REQUIRED) # the following line skips the linter which checks for copyrights # comment the line when a copyright and license is added to all source files set(ament_cmake_copyright_FOUND TRUE) # the following line skips cpplint (only works in a git repo) # comment the line when this package is in a git repo and when # a copyright and license is added to all source files set(ament_cmake_cpplint_FOUND TRUE) ament_lint_auto_find_test_dependencies() endif() ament_package() 构建功能包：colcon build --packages-select msg_demo 查看自定义的消息：激活环境：. install/setup.bash ，查看自定义消息ros2 interface show msg_demo/msg/Demo pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code$ colcon build --packages-select msg_demo Starting &gt;&gt;&gt; msg_demo Finished &lt;&lt;&lt; msg_demo [10.4s] Summary: 1 package finished [10.7s] pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code$ . install/setup.bash pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code$ ros2 interface show msg_demo/msg/Demo geometry_msgs/Point center float64 x float64 y float64 z float64 radius 查看instll下面的文件：其中.c的class文件在install/&lt;功能包名&gt;/include/&lt;功能包名&gt;/&lt;功能包名&gt;/msg/**，.py在install/&lt;功能包名&gt;/local/lib/python3.10/dist-packages/&lt;功能包名&gt;/msg/** 2.5.3 快速创建C/C++和Python自定义话题通讯的Student.msg 新建功能包：ros2 pkg create student_msg --build-type ament_cmake 创建msg文件夹和Student.msg文件，写入如下内容: string name int32 exam float64 score 不需要其他依赖项，配置packages.xml添加下面三项即可： &lt;build_depend&gt;rosidl_default_generators&lt;/build_depend&gt; &lt;exec_depend&gt;rosidl_default_runtime&lt;/exec_depend&gt; &lt;member_of_group&gt;rosidl_interface_packages&lt;/member_of_group&gt; 配置CMakeLists.txt： find_package(rosidl_default_generators REQUIRED) rosidl_generate_interfaces(${PROJECT_NAME} "msg/Student.msg" ) 快速构建：colcon build --packages-select student_msg: pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code$ colcon build --packages-select student_msg Starting &gt;&gt;&gt; student_msg Finished &lt;&lt;&lt; student_msg [8.93s] Summary: 1 package finished [9.21s] 2.6 使用C/C++实现自定义话题通讯 2.6.1 创建C/C++自定义话题发布方功能包并编写节点文件 创建ROS2功能包,这里为了省的创建node文件直接指定了cpp_idl_pub，指令如下：ros2 pkg create cpp_idl_pub --build-type ament_cmake --node-name cppIdlPubNode， 配置Vscode：配置Vscode的settings.json： { "C_Cpp.default.includePath": [ "/opt/ros/humble/include/**", "./install/student_msg/include/**" ], "python.analysis.extraPaths": [ "/opt/ros/humble/local/lib/python3.10/dist-packages/" ], } 编写自定义节点文件cppIdlPubNode.cpp： #include "rclcpp/rclcpp.hpp" // 1. 添加自定义消息头文件，如果vscode出现下划线警告，则需要配置settings.json添加include路径 #include "student_msg/msg/student.hpp" // C++14中的时间库 using namespace std::chrono_literals; // 2. 引入Student.msg生成的Student类 using student_msg::msg::Student; class CppIdlMsgPub: public rclcpp::Node { public: /* 3. ROS2节点的构造函数，其中包括一个node对象（初始化时候没有给出节点的名称）， * 和属性exam_（初始化为0,类型为size_t)，以及属性socre_（类型为double_t初始值为60.0） */ CppIdlMsgPub(const char* nodeName):Node(nodeName), exam_(0), score_(60.0) { // 4. 创建发布者,参数分别为话题名称myStudent，和发布队列的长队为10 publisher_ = this-&gt;create_publisher&lt;Student&gt;("myStudent", 10); // 5. 创建定时器，设置发布的频率，并绑定定时执行的事件，这里给到的是CppIdlMsgPub类的函数 timer_ = this-&gt;create_wall_timer(500ms, std::bind(&amp;CppIdlMsgPub::timer_callback, this)); } private: // 6. 定义回调函数 void timer_callback() { Student stu = Student(); // 6.1 姓名zhangsan stu.name = "zhangsan"; // 6.2 考试次数递增 stu.exam = exam_++; // 6.3 分数一直递增 stu.score = score_; score_ += 0.1; RCLCPP_INFO(this-&gt;get_logger(), "Student: '%s', exam time: %d, socre is : %f", stu.name.c_str(),stu.exam,stu.score); publisher_-&gt;publish(stu); } // 5. 计时器、发布者和计数器字段的声明 rclcpp::TimerBase::SharedPtr timer_; rclcpp::Publisher&lt;Student&gt;::SharedPtr publisher_; size_t exam_; double_t score_; }; int main(int argc, char * argv[]) { rclcpp::init(argc, argv); // 创建节点，给出构造的节点名为CppIdlMsgPubNode rclcpp::spin(std::make_shared&lt;CppIdlMsgPub&gt;("CppIdlMsgPubNode")); rclcpp::shutdown(); return 0; } 2.6.2 配置C/C++自定义话题发布方功能包 配置packages.xml文件，添加依赖项有rclcpp用于构建节点，和student_msg用于构建Student.msg： &lt;?xml version="1.0"?&gt; &lt;?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?&gt; &lt;package format="3"&gt; &lt;name&gt;cpp_idl_pub&lt;/name&gt; &lt;version&gt;0.0.0&lt;/version&gt; &lt;description&gt;TODO: Package description&lt;/description&gt; &lt;maintainer email="pldz@R7000.com"&gt;pldz&lt;/maintainer&gt; &lt;license&gt;TODO: License declaration&lt;/license&gt; &lt;buildtool_depend&gt;ament_cmake&lt;/buildtool_depend&gt; &lt;!-- 添加依赖项 --&gt; &lt;depend&gt;rclcpp&lt;/depend&gt; &lt;depend&gt;student_msg&lt;/depend&gt; &lt;test_depend&gt;ament_lint_auto&lt;/test_depend&gt; &lt;test_depend&gt;ament_lint_common&lt;/test_depend&gt; &lt;export&gt; &lt;build_type&gt;ament_cmake&lt;/build_type&gt; &lt;/export&gt; &lt;/package&gt; 配置CMakeLists.txt： cmake_minimum_required(VERSION 3.8) project(cpp_idl_pub) if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang") add_compile_options(-Wall -Wextra -Wpedantic) endif() # find dependencies find_package(ament_cmake REQUIRED) # 1. 添加依赖项 find_package(rclcpp REQUIRED) find_package(student_msg REQUIRED) # uncomment the following section in order to fill in # further dependencies manually. # find_package(&lt;dependency&gt; REQUIRED) # 2. 默认是已经创建了构建节点的文件配置 add_executable(cppIdlPubNode src/cppIdlPubNode.cpp) # 3. 默认已经包括&lt;INSTALL_INTERFACE&gt;的路径也不用更改 target_include_directories(cppIdlPubNode PUBLIC $&lt;BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include&gt; $&lt;INSTALL_INTERFACE:include&gt;) # 4. ament工具构建节点的依赖配置 ament_target_dependencies( cppIdlPubNode rclcpp student_msg ) target_compile_features(cppIdlPubNode PUBLIC c_std_99 cxx_std_17) # Require C99 and C++17 # 5. Install配置，默认ros2 run &lt;包名&gt;的配置 install(TARGETS cppIdlPubNode DESTINATION lib/${PROJECT_NAME}) if(BUILD_TESTING) find_package(ament_lint_auto REQUIRED) # the following line skips the linter which checks for copyrights # comment the line when a copyright and license is added to all source files set(ament_cmake_copyright_FOUND TRUE) # the following line skips cpplint (only works in a git repo) # comment the line when this package is in a git repo and when # a copyright and license is added to all source files set(ament_cmake_cpplint_FOUND TRUE) ament_lint_auto_find_test_dependencies() endif() # 6. 生成包的环境 ament_package() 2.6.3 编译并运行C/C++自定义话题发布方功能包 编译： colcon build --packages-select cpp_idl_pub 激活环境：. install/setup.bash 运行：ros2 run cpp_idl_pub cppIdlPubNode pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code$ colcon build --packages-select cpp_idl_pub Starting &gt;&gt;&gt; cpp_idl_pub Finished &lt;&lt;&lt; cpp_idl_pub [10.0s] Summary: 1 package finished [10.4s] pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code$ . install/setup.bash pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code$ ros2 run cpp_idl_pub cppIdlPubNode [INFO] [1683041064.126034476] [CppIdlMsgPubNode]: Student: 'zhangsan', exam time: 0, socre is : 60.000000 [INFO] [1683041064.625514370] [CppIdlMsgPubNode]: Student: 'zhangsan', exam time: 1, socre is : 60.100000 [INFO] [1683041065.125571561] [CppIdlMsgPubNode]: Student: 'zhangsan', exam time: 2, socre is : 60.200000 ^C[INFO] [1683041082.271152379] [rclcpp]: signal_handler(signum=2) 2.6.4 创建C/C++自定义话题订阅方功能包并编辑节点文件 创建ROS2功能包，包名为cpp_idl_sub，节点名称为cppIdlSubNode，并直接指定依赖项为rclcpp和student_msg，如下所示：ros2 pkg create cpp_idl_sub --build-type ament_cmake --node-name cppIdlSubNode --dependencies rclcpp student_msg 编辑节点文件：订阅Student类型的话题，话题名为myStudent: #include "rclcpp/rclcpp.hpp" // 1. 添加自定义消息头文件，如果vscode出现下划线警告，则需要配置settings.json添加include路径 #include "student_msg/msg/student.hpp" // 占位符，结合std::bind函数的绑定使用 using std::placeholders::_1; // 2. 引入Student.msg生成的Student类 using student_msg::msg::Student; class CppIdlMsgSub: public rclcpp::Node { public: /* 3. ROS2节点的构造函数，其中包括一个node对象（初始化时候没有给出节点的名称）， * 和属性exam_（初始化为0,类型为size_t)，以及属性socre_（类型为double_t初始值为60.0） */ CppIdlMsgSub(const char* nodeName):Node(nodeName) { subscription_ = this-&gt;create_subscription&lt;Student&gt;( "myStudent", 10, std::bind(&amp;CppIdlMsgSub::topic_callback, this, _1)); } private: // 4. 定义订阅到消息的回调函数 void topic_callback(const Student &amp; stu) const { RCLCPP_INFO(this-&gt;get_logger(), "I heard: %s, exam: %d, score: %f", stu.name.c_str(),stu.exam, stu.score); } // 5. 计时器、发布者和计数器字段的声明 rclcpp::Subscription&lt;Student&gt;::SharedPtr subscription_; }; int main(int argc, char * argv[]) { rclcpp::init(argc, argv); // 创建节点，给出构造的节点名为CppIdlMsgSubNode rclcpp::spin(std::make_shared&lt;CppIdlMsgSub&gt;("CppIdlMsgSubNode")); rclcpp::shutdown(); return 0; } 2.6.5 编译并运行C/C++自定义话题订阅节点 由于在创建包时候已经指定了依赖项，可以不用再进行配置packages.xml和CMakeLists.txt文件，直接编译colcon build --packages-select cpp_idl_sub 激活环境：. install/setup.bash 运行： 2.7 使用Python实现自定义话题通讯 2.7.1 创建Python自定义话题订阅方节点并编写节点内容 创建ROS2 Python发布方功能包，包名为python_idl_pub,节点名为pythonIdlPubNode：ros2 pkg create python_idl_pub --build-type ament_python --node-name pythonIdlPubNode 配置Vscode环境：在settings.json中添加Python的依赖项位置，虽然编译不影响报错，但是vscode的警告看着也不习惯： 编写订阅节点： import rclpy from rclpy.node import Node # 1. 导入包，如果vscode下划线警告，则需要配置settings.json from student_msg.msg import Student class PythonIdlPub(Node): def __init__(self, nodeName): # 1. 初始化父类构造函数，其中节点名需要创建时候指定 super().__init__(nodeName) self.exam_ = 0 self.score_ = 60.0 # 2. 声明发布者，发布消息类型为Student，话题名为myStudent,队列大小为10 self.publisher_ = self.create_publisher(Student, 'myStudent', 10) # 3. 创建定时器，其中更新频率为0.5秒，并绑定回调函数 self.timer = self.create_timer(0.5, self.timer_callback) # 4. 定义回调函数 def timer_callback(self): stu = Student() stu.name = "zhangsan" stu.exam = self.exam_ stu.score = self.score_ self.publisher_.publish(stu) self.get_logger().info('Publishing: name: {}, exam:{}, score:{}'.format(stu.name,stu.exam,stu.score)) self.exam_ += 1 self.score_ += 0.1 def main(args=None): rclpy.init(args=args) pythonIdlPubNode = PythonIdlPub("pythonIdlPubNode") rclpy.spin(pythonIdlPubNode) # 销毁节点 pythonIdlPubNode.destroy_node() rclpy.shutdown() if __name__ == '__main__': main() 2.7.2 配置Python自定义订阅方功能包 配置packages.xml增加rclpy和student_msg两个依赖项，注意Python本身是可执行文件，因此它的为&lt;exec_depend&gt;与C/C++的&lt;depend&gt;关键字不同： &lt;?xml version="1.0"?&gt; &lt;?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?&gt; &lt;package format="3"&gt; &lt;name&gt;python_idl_pub&lt;/name&gt; &lt;version&gt;0.0.0&lt;/version&gt; &lt;description&gt;TODO: Package description&lt;/description&gt; &lt;maintainer email="pldz@R7000.com"&gt;pldz&lt;/maintainer&gt; &lt;license&gt;TODO: License declaration&lt;/license&gt; &lt;test_depend&gt;ament_copyright&lt;/test_depend&gt; &lt;test_depend&gt;ament_flake8&lt;/test_depend&gt; &lt;test_depend&gt;ament_pep257&lt;/test_depend&gt; &lt;test_depend&gt;python3-pytest&lt;/test_depend&gt; &lt;!-- 添加依赖项 --&gt; &lt;exec_depend&gt;rclpy&lt;/exec_depend&gt; &lt;exec_depend&gt;student_msg&lt;/exec_depend&gt; &lt;export&gt; &lt;build_type&gt;ament_python&lt;/build_type&gt; &lt;/export&gt; &lt;/package&gt; 配置setup.py文件，事实上，我们已经创建包的时候已经指定了节点名，其实应该是不用配置生成节点的main入口的： from setuptools import setup package_name = 'python_idl_pub' setup( name=package_name, version='0.0.0', packages=[package_name], data_files=[ ('share/ament_index/resource_index/packages', ['resource/' + package_name]), ('share/' + package_name, ['package.xml']), ], install_requires=['setuptools'], zip_safe=True, maintainer='pldz', maintainer_email='pldz@R7000.com', description='TODO: Package description', license='TODO: License declaration', tests_require=['pytest'], # 配置节点的main函数入口 entry_points={ 'console_scripts': [ 'pythonIdlPubNode = python_idl_pub.pythonIdlPubNode:main' ], }, ) 2.7.3 编译并运行Python自定义话题发布方 编译：colcon build --packages-select python_idl_pub 激活环境：. install/setup.bash 运行节点：ros2 run python_idl_pub pythonIdlPubNode pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code$ ros2 run python_idl_pub pythonIdlPubNode [INFO] [1683044269.902750751] [pythonIdlPubNode]: Publishing: name: zhangsan, exam:0, score:60.0 [INFO] [1683044270.393748471] [pythonIdlPubNode]: Publishing: name: zhangsan, exam:1, score:60.1 [INFO] [1683044270.891683074] [pythonIdlPubNode]: Publishing: name: zhangsan, exam:2, score:60.2 2.7.4 创建Python自定义话题订阅方 创建Python功能包时，包名为python_idl_sub，节点名为pythonIdlSubNode，直接指定依赖项rclpy和student_msg：ros2 pkg create python_idl_sub --build-type ament_python --node-name pythonIdlSubNode --dependencies rclpy student_msg 编写节点： import rclpy from rclpy.node import Node # 1. 导入包，如果vscode下划线警告，则需要配置settings.json from student_msg.msg import Student class PythonIdlSub(Node): def __init__(self, nodeName): # 1. 构造函数，初始化node节点 super().__init__(nodeName) # 2. 声明订阅者，订阅话题`myTopicNmae`,并绑定回调函数 self.subscription = self.create_subscription(Student,'myStudent',self.listener_callback,10) # 3. 定义回调函数 def listener_callback(self, stu:Student): self.get_logger().info('I heard: name:{}, exam:{}, score{}'.format(stu.name, stu.exam, stu.score)) def main(args=None): rclpy.init(args=args) pythonIdlSubNode = PythonIdlSub("pythonIdlSubNode") rclpy.spin(pythonIdlSubNode) pythonIdlSubNode.destroy_node() rclpy.shutdown() if __name__ == '__main__': main() 2.7.5 编译运行Python发布方节点 由于指定了依赖项，直接编译即可: colcon build --packages-select python_idl_sub 激活环境: . install/setup.bash 运行所有节点： 2.8 话题通讯小结 创建功能包时，如果能够直接指定节点名和依赖项，可以省去很大部分的配置工作 C/C++手动配置功能包时，packages.xml配置依赖项，CMakeLists.txt配置编译的内容，包括find_package；add_executable；target_include_directories；ament_target_dependencies；install；ament_package这六个部分 Python手动配置功能包时，packages.xml配置可执行的依赖项exec_depend而不是depend,并且在setup.py中主要配置节点的main函数入口 自定义话题通讯，本质是创建一个C/C++的功能包，将里面的自定义消息编译成可以使用的.c和.py文件，值得注意的是，生成好的中间文件是存放在 工作空间的install文件夹下，如果这个这个工作空间的install找不到或者不是一个，那是需要再进一步的手动配置的]]></summary></entry><entry><title type="html">2 ROS2话题通讯 - 话题通讯基础</title><link href="http://localhost:4000/ros2_basic/2023-02-02-2_1_ROS2%E8%AF%9D%E9%A2%98%E9%80%9A%E8%AE%AF%E5%9F%BA%E7%A1%80.html" rel="alternate" type="text/html" title="2 ROS2话题通讯 - 话题通讯基础" /><published>2023-02-02T00:00:00+08:00</published><updated>2023-02-02T00:00:00+08:00</updated><id>http://localhost:4000/ros2_basic/2_1_ROS2%E8%AF%9D%E9%A2%98%E9%80%9A%E8%AE%AF%E5%9F%BA%E7%A1%80</id><content type="html" xml:base="http://localhost:4000/ros2_basic/2023-02-02-2_1_ROS2%E8%AF%9D%E9%A2%98%E9%80%9A%E8%AE%AF%E5%9F%BA%E7%A1%80.html"><![CDATA[<h1 id="21-ros2话题通讯介绍">2.1 ROS2话题通讯介绍</h1>

<p>话题通信是一种单向通信模型，一方发布数据，一方订阅数据，适用于连续不间断的通讯场景，如小车SLAM导航过程中的位姿信息等等。话题是一个通讯的管道，ROS2的话题发布方和接收方无论是C/C++还是Python都可以发布/订阅相同的话题实现通讯，一个话题的发布方，可以有多个订阅方，如下图所示：</p>

<p><img src="/assets/pics/ROS2_BASIC/2_Topic-MultiplePublisherandMultipleSubscriber.gif" alt="Topic-MultiplePublisherandMultipleSubscriber" /></p>

<blockquote>
  <p>Tips：节点（Node）的概念</p>

  <p>ROS的通信对象的构建都依赖于节点（回想之前快速体验的 <code class="language-plaintext highlighter-rouge">rclcpp::Node</code> 或者是 <code class="language-plaintext highlighter-rouge">from rclpy.node import Node</code> 都是为了创建一个节点所导入的父类），一般情况下一个节点都对应某一个功能模块（例如一个节点负责持续发布SLAM位姿数据等），一个C/C++ 或者Python的文件代码，可以包括多个节点。</p>
</blockquote>

<h1 id="22-ros2常用的消息类型介绍">2.2 ROS2常用的消息类型介绍</h1>

<h2 id="221-std_msgs消息类型">2.2.1 std_msgs消息类型</h2>

<blockquote>
  <p>参考内容</p>

  <p><a href="http://docs.ros.org/en/api/std_msgs/html/index-msg.html">官方文档 std_msgs Msg/Srv Documentation</a></p>

  <p><a href="https://blog.csdn.net/qq_30193419/article/details/111867500">详解常用的ROS内置消息类型</a></p>

  <p><a href="https://blog.csdn.net/sunkman/article/details/117038329">ROS中geometry_msgs消息类型、nav_msg消息</a></p>
</blockquote>

<p><code class="language-plaintext highlighter-rouge">std_msgs</code> 属于ROS的标准数据类型库，主要包括的消息类型有：</p>

<table>
  <thead>
    <tr>
      <th>ROS type</th>
      <th>C++ type</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>bool</td>
      <td>bool</td>
    </tr>
    <tr>
      <td>byte</td>
      <td>uint8_t</td>
    </tr>
    <tr>
      <td>char</td>
      <td>char</td>
    </tr>
    <tr>
      <td>float32</td>
      <td>float</td>
    </tr>
    <tr>
      <td>float64</td>
      <td>double</td>
    </tr>
    <tr>
      <td>int8</td>
      <td>int8_t</td>
    </tr>
    <tr>
      <td>uint8</td>
      <td>uint8_t</td>
    </tr>
    <tr>
      <td>int16</td>
      <td>int16</td>
    </tr>
    <tr>
      <td>uint16</td>
      <td>uint16</td>
    </tr>
    <tr>
      <td>int32</td>
      <td>int32</td>
    </tr>
    <tr>
      <td>uint32</td>
      <td>uint32</td>
    </tr>
    <tr>
      <td>int64</td>
      <td>int64</td>
    </tr>
    <tr>
      <td>uint64</td>
      <td>uint64_t</td>
    </tr>
    <tr>
      <td>string</td>
      <td>std::string</td>
    </tr>
    <tr>
      <td>static array</td>
      <td>std::array&lt;T, N&gt;</td>
    </tr>
  </tbody>
</table>

<p>数组和有条件的字符串的映射</p>

<table>
  <thead>
    <tr>
      <th>ROS type</th>
      <th>C++ type</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>unbounded dynamic array</td>
      <td>std::vector</td>
    </tr>
    <tr>
      <td>bounded dynamic array</td>
      <td>custom_class&lt;T, N&gt;</td>
    </tr>
    <tr>
      <td>bounded string</td>
      <td>std::string</td>
    </tr>
  </tbody>
</table>

<h3 id="222-geometry_msgs消息类型">2.2.2 geometry_msgs消息类型</h3>

<blockquote>
  <p>参考内容</p>

  <p><a href="http://docs.ros.org/en/api/geometry_msgs/html/index-msg.html">官方文档 geometry_msgs Msg/Srv Documentation</a></p>

  <p><a href="https://blog.csdn.net/weixin_44978295/article/details/123773373">ROS中geometry_msgs常用消息类型</a></p>

  <p><a href="https://docs.ros.org/en/humble/p/">ROS2 humble的接口官方API</a></p>
</blockquote>

<p><code class="language-plaintext highlighter-rouge">geometry_msgs</code>：常见的几何信息（如点、向量和姿势）提供ROS消息，其中包括的内容有，具体的话题参数，例如在使用乌龟节点控制乌龟运动的<code class="language-plaintext highlighter-rouge">cmd_vel</code>话题就是采用<code class="language-plaintext highlighter-rouge">geometry_msgs/Twist</code>编写的，具体的用法，可以去查阅官网。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Accel
AccelStamped
AccelWithCovariance
AccelWithCovarianceStamped
Inertia
InertiaStamped
Point
Point32
PointStamped
Polygon
PolygonStamped
Pose
Pose2D
PoseArray
PoseStamped
PoseWithCovariance
PoseWithCovarianceStamped
Quaternion
QuaternionStamped
Transform
TransformStamped
Twist
TwistStamped
TwistWithCovariance
TwistWithCovarianceStamped
Vector3
Vector3Stamped
Wrench
WrenchStamped
</code></pre></div></div>

<h1 id="23-使用cc创建基础消息类型的话题通讯">2.3 使用C/C++创建基础消息类型的话题通讯</h1>

<blockquote>
  <p>参考内容：</p>

  <p><a href="https://docs.ros.org/en/humble/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Cpp-Publisher-And-Subscriber.html">Writing a simple publisher and subscriber (C++)</a></p>

  <p><a href="https://www.bilibili.com/video/BV1wY4y1T7iC">2.2.2_话题通信_原生消息(C++)_01发布方01源码分析</a></p>
</blockquote>

<h2 id="231-创建cc发布话题信息的功能包并配置vscode环境">2.3.1 创建C/C++发布话题信息的功能包并配置VSCode环境</h2>

<blockquote>
  <p>创建发布者功能包时，不添加任何依赖项，回顾之前的项目配置</p>
</blockquote>

<ol>
  <li>创建ROS2 C/C++功能包，其中包名为 <code class="language-plaintext highlighter-rouge">cppBaseMsgPub</code> :<code class="language-plaintext highlighter-rouge">ros2 pkg create cppBaseMsgPub --build-type ament_cmake</code></li>
</ol>

<blockquote>
  <p>Tips：这里补充还是推荐才有下划线割开的功能包命名方法而不是大小写混合，否则会出错
<img src="/assets/pics/ROS2_BASIC/2_right_package_name.png" alt="命名的问题" /></p>
</blockquote>

<blockquote>
  <p>如果尝试命名节点和依赖项，可以直接采用这种方式，节点名为 <code class="language-plaintext highlighter-rouge">cppBaseMsgPubNode</code> ，依赖 <code class="language-plaintext highlighter-rouge">rclcpp</code> 和 <code class="language-plaintext highlighter-rouge">std_msgs</code>：<code class="language-plaintext highlighter-rouge">ros2 pkg create cppBaseMsgPub --build-type ament_cmake --node-name cppBaseMsgPubNode --dependencies rclcpp std_msgs</code></p>
</blockquote>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code<span class="nv">$ </span>ros2 pkg create cppBaseMsgPub <span class="nt">--build-type</span> ament_cmake
going to create a new package
... 手动省略
creating ./cppBaseMsgPub/CMakeLists.txt

<span class="o">[</span>WARNING]: Unknown license <span class="s1">'TODO: License declaration'</span><span class="nb">.</span>  This has been <span class="nb">set </span><span class="k">in </span>the package.xml, but no LICENSE file has been created.
It is recommended to use one of the ament license identitifers:
... 手动省略
MIT-0
</code></pre></div></div>

<ol>
  <li>在工作空间（这个是vscode的概念）下创建<code class="language-plaintext highlighter-rouge">.vsocde</code>文件夹和<code class="language-plaintext highlighter-rouge">settings.json</code>文件，配置VSCode的<code class="language-plaintext highlighter-rouge">settings.json</code>文件，添加路径</li>
</ol>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"C_Cpp.default.includePath"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"/opt/ros/humble/include/**"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"python.analysis.extraPaths"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"/opt/ros/humble/local/lib/python3.10/dist-packages/"</span><span class="p">],</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>此时的文件结构如下：可以看到，如果单纯的指定了包名但是没有指定节点名，不会在<code class="language-plaintext highlighter-rouge">src</code>目录下创建<code class="language-plaintext highlighter-rouge">.cpp</code>文件</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code<span class="nv">$ </span>tree <span class="nt">-a</span>
.<span class="o">(</span>注释：这个就是工作空间<span class="o">)</span>
├── cppBaseMsgPub
│   ├── CMakeLists.txt
│   ├── include
│   │   └── cppBaseMsgPub
│   ├── package.xml
│   └── src
└── .vscode
    └── settings.json

5 directories, 3 files
</code></pre></div></div>

<p>完成之后配置VSCode环境</p>

<h2 id="232-编写ros2发布话题节点cpp文件">2.3.2 编写ROS2发布话题节点CPP文件</h2>

<ol>
  <li>编写发布者代码：根据官网提供的案例，在包的<code class="language-plaintext highlighter-rouge">src</code>目录下，创建<code class="language-plaintext highlighter-rouge">cppBaseMsgPubNode.cpp</code>文件，对<code class="language-plaintext highlighter-rouge">cppBaseMsgPubNode.cpp</code>进行发布者内容编写：总的来说，主要包括创建构造发布节点，计数属性，然后绑定发布函数到定时器上</li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"rclcpp/rclcpp.hpp"</span><span class="cp">
#include</span> <span class="cpf">"std_msgs/msg/string.hpp"</span><span class="cp">
</span>
<span class="c1">// C++14中的时间库</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="o">::</span><span class="n">chrono_literals</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">CppBaseMsgPub</span><span class="o">:</span> <span class="k">public</span> <span class="n">rclcpp</span><span class="o">::</span><span class="n">Node</span>
<span class="p">{</span>
  <span class="nl">public:</span>
      <span class="cm">/* 1. ROS2节点的构造函数，其中包括一个node对象（初始化时候没有给出节点的名称），
      * 和属性count_(默认初始化为0) */</span>
      <span class="n">CppBaseMsgPub</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">nodeName</span><span class="p">)</span><span class="o">:</span><span class="n">Node</span><span class="p">(</span><span class="n">nodeName</span><span class="p">),</span> <span class="n">count_</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
      <span class="p">{</span>
        <span class="c1">// 2. 创建发布者,参数分别为话题名称myTopicName，和发布队列的长队为10</span>
        <span class="n">publisher_</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">create_publisher</span><span class="o">&lt;</span><span class="n">std_msgs</span><span class="o">::</span><span class="n">msg</span><span class="o">::</span><span class="n">String</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"myTopicName"</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
        <span class="c1">// 3. 创建定时器，设置发布的频率，并绑定定时执行的事件，这里给到的是CppBaseMsgPub类的函数</span>
        <span class="n">timer_</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">create_wall_timer</span><span class="p">(</span><span class="mx">500ms</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">CppBaseMsgPub</span><span class="o">::</span><span class="n">timer_callback</span><span class="p">,</span> <span class="k">this</span><span class="p">));</span>
      <span class="p">}</span>

  <span class="k">private</span><span class="o">:</span>
     <span class="c1">// 4. 定义回调函数</span>
    <span class="kt">void</span> <span class="nf">timer_callback</span><span class="p">()</span>
    <span class="p">{</span>
      <span class="k">auto</span> <span class="n">message</span> <span class="o">=</span> <span class="n">std_msgs</span><span class="o">::</span><span class="n">msg</span><span class="o">::</span><span class="n">String</span><span class="p">();</span>
      <span class="n">message</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="s">"Hello, world! "</span> <span class="o">+</span> <span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">count_</span><span class="o">++</span><span class="p">);</span>
      <span class="n">RCLCPP_INFO</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">get_logger</span><span class="p">(),</span> <span class="s">"Cpp Publish: '%s'"</span><span class="p">,</span> <span class="n">message</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
      <span class="n">publisher_</span><span class="o">-&gt;</span><span class="n">publish</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">// 5. 计时器、发布者和计数器字段的声明</span>
    <span class="n">rclcpp</span><span class="o">::</span><span class="n">TimerBase</span><span class="o">::</span><span class="n">SharedPtr</span> <span class="n">timer_</span><span class="p">;</span>
    <span class="n">rclcpp</span><span class="o">::</span><span class="n">Publisher</span><span class="o">&lt;</span><span class="n">std_msgs</span><span class="o">::</span><span class="n">msg</span><span class="o">::</span><span class="n">String</span><span class="o">&gt;::</span><span class="n">SharedPtr</span> <span class="n">publisher_</span><span class="p">;</span>
    <span class="kt">size_t</span> <span class="n">count_</span><span class="p">;</span>

<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
  <span class="n">rclcpp</span><span class="o">::</span><span class="n">init</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
  <span class="c1">// 创建节点，给出构造的节点名为cppBaseMsgPubNode</span>
  <span class="n">rclcpp</span><span class="o">::</span><span class="n">spin</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">CppBaseMsgPub</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"cppBaseMsgPubNode"</span><span class="p">));</span>
  <span class="n">rclcpp</span><span class="o">::</span><span class="n">shutdown</span><span class="p">();</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="233-配置cc发布话题功能包并编译">2.3.3 配置C/C++发布话题功能包并编译</h2>

<ol>
  <li>配置<code class="language-plaintext highlighter-rouge">package.xml</code>：<code class="language-plaintext highlighter-rouge">package.xml</code>主要对C/C++的功能包依赖项和发布信息进行配置，由于在节点<code class="language-plaintext highlighter-rouge">cppBaseMsgPubNode.cpp</code>中主要用到了<code class="language-plaintext highlighter-rouge">rclcpp</code>和<code class="language-plaintext highlighter-rouge">std_msgs</code>两个依赖，因此<code class="language-plaintext highlighter-rouge">package.xml</code>的配置主要如下：</li>
</ol>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0"?&gt;</span>
<span class="cp">&lt;?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?&gt;</span>
<span class="nt">&lt;package</span> <span class="na">format=</span><span class="s">"3"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;name&gt;</span>cppBaseMsgPub<span class="nt">&lt;/name&gt;</span>
  <span class="nt">&lt;version&gt;</span>0.0.0<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;description&gt;</span>TODO: Package description<span class="nt">&lt;/description&gt;</span>
  <span class="nt">&lt;maintainer</span> <span class="na">email=</span><span class="s">"pldz@R7000.com"</span><span class="nt">&gt;</span>pldz<span class="nt">&lt;/maintainer&gt;</span>
  <span class="nt">&lt;license&gt;</span>TODO: License declaration<span class="nt">&lt;/license&gt;</span>

  <span class="nt">&lt;buildtool_depend&gt;</span>ament_cmake<span class="nt">&lt;/buildtool_depend&gt;</span>

  <span class="nt">&lt;test_depend&gt;</span>ament_lint_auto<span class="nt">&lt;/test_depend&gt;</span>
  <span class="nt">&lt;test_depend&gt;</span>ament_lint_common<span class="nt">&lt;/test_depend&gt;</span>

  <span class="c">&lt;!-- 添加依赖项 --&gt;</span>
  <span class="nt">&lt;depend&gt;</span>rclcpp<span class="nt">&lt;/depend&gt;</span>
  <span class="nt">&lt;depend&gt;</span>std_msgs<span class="nt">&lt;/depend&gt;</span>

  <span class="nt">&lt;export&gt;</span>
    <span class="nt">&lt;build_type&gt;</span>ament_cmake<span class="nt">&lt;/build_type&gt;</span>
  <span class="nt">&lt;/export&gt;</span>
<span class="nt">&lt;/package&gt;</span>
</code></pre></div></div>

<ol>
  <li>配置<code class="language-plaintext highlighter-rouge">CmakeLists.txt</code>：主要包括的内容有五部分，并且需要按照顺序进行配置好</li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">find_package</span><span class="p">()</span>                  <span class="c1">// 1. 列出依赖项，通俗的说是项目编译所需要的全部依赖项名称，节点和项目是两个概念，一个项目可以有多个节点</span>
<span class="n">add_executable</span><span class="p">()</span>                <span class="c1">// 2. 可执行文件的路径，通俗来说是编译节点的main函数入口</span>
<span class="n">target_include_directories</span><span class="p">()</span>    <span class="c1">// 3. 编译节点所需要的include的位置</span>
<span class="n">ament_target_dependencies</span><span class="p">()</span>     <span class="c1">// 4. 编译节点所需要的依赖项，这一步的目的是连接编译该节点所需要的依赖项</span>
<span class="n">install</span><span class="p">()</span>                       <span class="c1">// 5. 通俗来说，是将编译好的节点给拷贝到ROS功能包的目录，使得能够通过指令ros2 run &lt;包名&gt; &lt;节点名&gt;的配置，默认这一步的目的就是将build文件夹的内容拷贝到install的lib文件夹下</span>
<span class="n">ament_package</span><span class="p">()</span>                 <span class="c1">// 6. 生成ament工具的环境，缺少这一步，无法在install文件夹下生成setup.bash文件等等</span>
</code></pre></div></div>

<p>因此该项目的<code class="language-plaintext highlighter-rouge">CmakeLists.txt</code>如下所示：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cmake_minimum_required<span class="o">(</span>VERSION 3.8<span class="o">)</span>
project<span class="o">(</span>cppBaseMsgPub<span class="o">)</span>

<span class="k">if</span><span class="o">(</span>CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES <span class="s2">"Clang"</span><span class="o">)</span>
  add_compile_options<span class="o">(</span><span class="nt">-Wall</span> <span class="nt">-Wextra</span> <span class="nt">-Wpedantic</span><span class="o">)</span>
endif<span class="o">()</span>

<span class="c"># find dependencies</span>
find_package<span class="o">(</span>ament_cmake REQUIRED<span class="o">)</span>

<span class="c"># uncomment the following section in order to fill in</span>
<span class="c"># further dependencies manually.</span>
<span class="c"># find_package(&lt;dependency&gt; REQUIRED)</span>

<span class="c"># 1. 添加依赖项列表</span>
find_package<span class="o">(</span>rclcpp REQUIRED<span class="o">)</span>
find_package<span class="o">(</span>std_msgs REQUIRED<span class="o">)</span>

<span class="c"># 2. 生成节点的主函数入口和节点名称</span>
add_executable<span class="o">(</span>cppBaseMsgPubNode src/cppBaseMsgPubNode.cpp<span class="o">)</span>


<span class="c"># 3. Include路径配置，这里其实没有用上，可以不用配置</span>
target_include_directories<span class="o">(</span>cppBaseMsgPubNode PUBLIC
  <span class="nv">$&lt;</span>BUILD_INTERFACE:<span class="k">${</span><span class="nv">CMAKE_CURRENT_SOURCE_DIR</span><span class="k">}</span>/include&gt;
  <span class="nv">$&lt;</span>INSTALL_INTERFACE:include&gt;<span class="o">)</span>

<span class="c"># 4. ament工具的编译所需要的依赖</span>
ament_target_dependencies<span class="o">(</span>
  cppBaseMsgPubNode
  <span class="s2">"rclcpp"</span>
  <span class="s2">"std_msgs"</span>
<span class="o">)</span>

<span class="c"># 5. 安装规则</span>
<span class="nb">install</span><span class="o">(</span>TARGETS cppBaseMsgPubNode
  DESTINATION lib/<span class="k">${</span><span class="nv">PROJECT_NAME</span><span class="k">}</span><span class="o">)</span>

<span class="k">if</span><span class="o">(</span>BUILD_TESTING<span class="o">)</span>
  find_package<span class="o">(</span>ament_lint_auto REQUIRED<span class="o">)</span>
  <span class="c"># the following line skips the linter which checks for copyrights</span>
  <span class="c"># comment the line when a copyright and license is added to all source files</span>
  <span class="nb">set</span><span class="o">(</span>ament_cmake_copyright_FOUND TRUE<span class="o">)</span>
  <span class="c"># the following line skips cpplint (only works in a git repo)</span>
  <span class="c"># comment the line when this package is in a git repo and when</span>
  <span class="c"># a copyright and license is added to all source files</span>
  <span class="nb">set</span><span class="o">(</span>ament_cmake_cpplint_FOUND TRUE<span class="o">)</span>
  ament_lint_auto_find_test_dependencies<span class="o">()</span>
endif<span class="o">()</span>

<span class="c"># 6. 配置ament环境，生成功能包</span>
ament_package<span class="o">()</span>

</code></pre></div></div>

<ol>
  <li>编译功能包：<code class="language-plaintext highlighter-rouge">colcon build</code>：</li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code<span class="nv">$ </span>colcon build
WARNING: Package name <span class="s2">"cppBaseMsgPub"</span> does not follow the naming conventions. It should start with a lower <span class="k">case</span> letter and only contain lower <span class="k">case</span> letters, digits, underscores, and dashes.
Starting <span class="o">&gt;&gt;&gt;</span> cppBaseMsgPub
... 手动省略
Summary: 1 package finished <span class="o">[</span>4.44s]
  1 package had stderr output: cppBaseMsgPub
</code></pre></div></div>
<ol>
  <li>运行节点：激活功能包环境<code class="language-plaintext highlighter-rouge">source ./install/setup.bash</code>，然后运行<code class="language-plaintext highlighter-rouge">ros2 run cppBaseMsgPub cppBaseMsgPubNode </code></li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code<span class="nv">$ </span><span class="nb">source</span> ./install/setup.bash 
pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code<span class="nv">$ </span>ros2 run cppBaseMsgPub cppBaseMsgPubNode 
<span class="o">[</span>INFO] <span class="o">[</span>1683015931.213646661] <span class="o">[</span>cppBaseMsgPubNode]: Cpp Publish: <span class="s1">'Hello, world! 0'</span>
<span class="o">[</span>INFO] <span class="o">[</span>1683015931.713349843] <span class="o">[</span>cppBaseMsgPubNode]: Cpp Publish: <span class="s1">'Hello, world! 1'</span>
<span class="o">[</span>INFO] <span class="o">[</span>1683015932.213429705] <span class="o">[</span>cppBaseMsgPubNode]: Cpp Publish: <span class="s1">'Hello, world! 2'</span>
^C[INFO] <span class="o">[</span>1683015932.588202160] <span class="o">[</span>rclcpp]: signal_handler<span class="o">(</span><span class="nv">signum</span><span class="o">=</span>2<span class="o">)</span>
pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code<span class="nv">$ </span>
</code></pre></div></div>

<h2 id="234-创建cc订阅话题的功能包">2.3.4 创建C/C++订阅话题的功能包</h2>

<ol>
  <li>由于上面操作过一遍从功能包开始的配置节点依赖项，这里直接提前在创建功能包的时候直接指定依赖项，省去后续的配置，取名订阅话题的功能包为<code class="language-plaintext highlighter-rouge">cppBaseMsgSub</code>，节点名称为<code class="language-plaintext highlighter-rouge">cppBaseMsgSubNode</code>，如<code class="language-plaintext highlighter-rouge">ros2 pkg create cppBaseMsgSub --build-type ament_cmake --node-name cppBaseMsgSubNode --dependencies rclcpp std_msgs</code></li>
</ol>

<blockquote>
  <p>Tips：这里补充还是推荐才有下划线割开的功能包命名方法而不是大小写混合，否则会出错
<img src="/assets/pics/ROS2_BASIC/2_right_package_name.png" alt="命名的问题" /></p>
</blockquote>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code<span class="nv">$ </span>ros2 pkg create cppBaseMsgSub <span class="nt">--build-type</span> ament_cmake <span class="nt">--node-name</span> cppBaseMsgSubNode <span class="nt">--dependencies</span> rclcpp std_msgs
going to create a new package
package name: cppBaseMsgSub
... 手动省略
MIT
MIT-0
</code></pre></div></div>

<ol>
  <li>2.3.1节在工作空间下配置过vscode的<code class="language-plaintext highlighter-rouge">settings.json</code>这里就不再配置vscode了</li>
</ol>

<h2 id="235-编写ros2订阅话题节点cpp文件">2.3.5 编写ROS2订阅话题节点CPP文件</h2>

<ol>
  <li>直接在<code class="language-plaintext highlighter-rouge">cppBaseMsgSubNode.cpp</code>文件进行编辑，创建订阅节点，订阅话题<code class="language-plaintext highlighter-rouge">myTopicName</code>与之前的发布话题类型和名称一致即可：</li>
</ol>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">"rclcpp/rclcpp.hpp"</span><span class="cp">
#include</span> <span class="cpf">"std_msgs/msg/string.hpp"</span><span class="cp">
</span>
<span class="c1">// 占位符，结合std::bind函数的绑定使用</span>
<span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">_1</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">CppBaseMsgSub</span><span class="o">:</span> <span class="k">public</span> <span class="n">rclcpp</span><span class="o">::</span><span class="n">Node</span>
<span class="p">{</span>
  <span class="nl">public:</span>
    <span class="cm">/* 1. ROS2节点的构造函数 */</span>
    <span class="n">CppBaseMsgSub</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">nodeName</span><span class="p">)</span><span class="o">:</span><span class="n">Node</span><span class="p">(</span><span class="n">nodeName</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="c1">// 2.声明订阅话题类型，并绑定回调函数</span>
      <span class="n">subscription_</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">create_subscription</span><span class="o">&lt;</span><span class="n">std_msgs</span><span class="o">::</span><span class="n">msg</span><span class="o">::</span><span class="n">String</span><span class="o">&gt;</span><span class="p">(</span>
      <span class="s">"myTopicName"</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">CppBaseMsgSub</span><span class="o">::</span><span class="n">topic_callback</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="n">_1</span><span class="p">));</span>
    <span class="p">}</span>

  <span class="k">private</span><span class="o">:</span>
    <span class="c1">// 3. 定义订阅到消息的回调函数</span>
    <span class="kt">void</span> <span class="nf">topic_callback</span><span class="p">(</span><span class="k">const</span> <span class="n">std_msgs</span><span class="o">::</span><span class="n">msg</span><span class="o">::</span><span class="n">String</span> <span class="o">&amp;</span> <span class="n">msg</span><span class="p">)</span> <span class="k">const</span>
    <span class="p">{</span>
      <span class="n">RCLCPP_INFO</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">get_logger</span><span class="p">(),</span> <span class="s">"I heard: '%s'"</span><span class="p">,</span> <span class="n">msg</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="c1">// 4. 计时器、发布者和计数器字段的声明</span>
    <span class="n">rclcpp</span><span class="o">::</span><span class="n">Subscription</span><span class="o">&lt;</span><span class="n">std_msgs</span><span class="o">::</span><span class="n">msg</span><span class="o">::</span><span class="n">String</span><span class="o">&gt;::</span><span class="n">SharedPtr</span> <span class="n">subscription_</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
  <span class="n">rclcpp</span><span class="o">::</span><span class="n">init</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
  <span class="c1">// 初始化订阅节点</span>
  <span class="n">rclcpp</span><span class="o">::</span><span class="n">spin</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">CppBaseMsgSub</span><span class="o">&gt;</span><span class="p">(</span><span class="s">"cppBaseMsgSubNode"</span><span class="p">));</span>
  <span class="n">rclcpp</span><span class="o">::</span><span class="n">shutdown</span><span class="p">();</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="236-配置cc订阅话题功能包并编译">2.3.6 配置C/C++订阅话题功能包并编译</h2>

<ol>
  <li>由于是直接在创建包的时候指定了依赖项，可以直接编译<code class="language-plaintext highlighter-rouge">colcon build</code>，运行查看效果：</li>
</ol>

<p><img src="/assets/pics/ROS2_BASIC/2_basic_build_result.png" alt="C/C++订阅和发布基础消息" /></p>

<h1 id="24-使用python创建基础消息类型的话题通讯">2.4 使用Python创建基础消息类型的话题通讯</h1>

<h2 id="241-创建python发布话题功能包并编写节点文件">2.4.1 创建Python发布话题功能包并编写节点文件</h2>

<ol>
  <li>创建Python发布者功能包，其中功能包名称为<code class="language-plaintext highlighter-rouge">pythonBaseMsgPub</code>，不指定节点名和依赖项，后续手动配置<code class="language-plaintext highlighter-rouge">packages.xml</code>和<code class="language-plaintext highlighter-rouge">setup.py</code>：<code class="language-plaintext highlighter-rouge">ros2 pkg create pythonBaseMsgPub --build-type ament_python</code>，目前文件结构如下所示：</li>
</ol>

<p><img src="/assets/pics/ROS2_BASIC/2_create_basic_python_package.png" alt="创建Python功能包" /></p>

<blockquote>
  <p>Tips：这里补充还是推荐才有下划线割开的功能包命名方法而不是大小写混合，否则会出错
<img src="/assets/pics/ROS2_BASIC/2_right_package_name.png" alt="命名的问题" /></p>
</blockquote>

<ol>
  <li>在<code class="language-plaintext highlighter-rouge">pythonBaseMsgPub/pythonBaseMsgPub</code>文件夹下创建<code class="language-plaintext highlighter-rouge">pythonBaseMsgPubNode.py</code>文件，内容如下所示</li>
</ol>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">rclpy</span>
<span class="kn">from</span> <span class="n">rclpy.node</span> <span class="kn">import</span> <span class="n">Node</span>

<span class="kn">from</span> <span class="n">std_msgs.msg</span> <span class="kn">import</span> <span class="n">String</span>


<span class="k">class</span> <span class="nc">PythonBaseMsgPub</span><span class="p">(</span><span class="n">Node</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nodeName</span><span class="p">):</span>
        <span class="c1"># 1. 初始化父类构造函数，其中节点名需要创建时候指定,计数属性count_从0开始
</span>        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="n">nodeName</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">count_</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="c1"># 2. 声明发布者，发布消息类型为String，话题名为myTopicName,队列大小为10
</span>        <span class="n">self</span><span class="p">.</span><span class="n">publisher_</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">create_publisher</span><span class="p">(</span><span class="n">String</span><span class="p">,</span> <span class="sh">'</span><span class="s">myTopicName</span><span class="sh">'</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
        <span class="c1"># 3. 创建定时器，其中更新频率为0.5秒，并绑定回调函数
</span>        <span class="n">self</span><span class="p">.</span><span class="n">timer</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">create_timer</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">timer_callback</span><span class="p">)</span>
        
    <span class="c1"># 4. 定义回调函数
</span>    <span class="k">def</span> <span class="nf">timer_callback</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="nc">String</span><span class="p">()</span>
        <span class="n">msg</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Hello World: %d</span><span class="sh">'</span> <span class="o">%</span> <span class="n">self</span><span class="p">.</span><span class="n">count_</span>
        <span class="n">self</span><span class="p">.</span><span class="n">publisher_</span><span class="p">.</span><span class="nf">publish</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">get_logger</span><span class="p">().</span><span class="nf">info</span><span class="p">(</span><span class="sh">'</span><span class="s">Publishing: </span><span class="sh">"</span><span class="s">%s</span><span class="sh">"'</span> <span class="o">%</span> <span class="n">msg</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">count_</span> <span class="o">+=</span> <span class="mi">1</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">init</span><span class="p">(</span><span class="n">args</span><span class="o">=</span><span class="n">args</span><span class="p">)</span>
    <span class="n">pythonBaseMsgPubNode</span> <span class="o">=</span> <span class="nc">PythonBaseMsgPub</span><span class="p">(</span><span class="sh">"</span><span class="s">pythonBaseMsgPubNode</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">spin</span><span class="p">(</span><span class="n">pythonBaseMsgPubNode</span><span class="p">)</span>
    <span class="c1"># 销毁节点
</span>    <span class="n">pythonBaseMsgPubNode</span><span class="p">.</span><span class="nf">destroy_node</span><span class="p">()</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">shutdown</span><span class="p">()</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="242-配置python项目并运行">2.4.2 配置Python项目并运行</h2>

<ol>
  <li>配置Python项目的<code class="language-plaintext highlighter-rouge">packages.xml</code>：主要是添加可执行的依赖项<code class="language-plaintext highlighter-rouge">rclpy</code>和<code class="language-plaintext highlighter-rouge">std_msgs</code></li>
</ol>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0"?&gt;</span>
<span class="cp">&lt;?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?&gt;</span>
<span class="nt">&lt;package</span> <span class="na">format=</span><span class="s">"3"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;name&gt;</span>pythonBaseMsgPub<span class="nt">&lt;/name&gt;</span>
  <span class="nt">&lt;version&gt;</span>0.0.0<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;description&gt;</span>TODO: Package description<span class="nt">&lt;/description&gt;</span>
  <span class="nt">&lt;maintainer</span> <span class="na">email=</span><span class="s">"pldz@R7000.com"</span><span class="nt">&gt;</span>pldz<span class="nt">&lt;/maintainer&gt;</span>
  <span class="nt">&lt;license&gt;</span>TODO: License declaration<span class="nt">&lt;/license&gt;</span>

  <span class="c">&lt;!-- 与C/C++不同的是,Python文件是一个可执行的脚本,因此依赖项的关键字为exec_depend --&gt;</span>
  <span class="nt">&lt;exec_depend&gt;</span>rclpy<span class="nt">&lt;/exec_depend&gt;</span>
  <span class="nt">&lt;exec_depend&gt;</span>std_msgs<span class="nt">&lt;/exec_depend&gt;</span>

  <span class="nt">&lt;test_depend&gt;</span>ament_copyright<span class="nt">&lt;/test_depend&gt;</span>
  <span class="nt">&lt;test_depend&gt;</span>ament_flake8<span class="nt">&lt;/test_depend&gt;</span>
  <span class="nt">&lt;test_depend&gt;</span>ament_pep257<span class="nt">&lt;/test_depend&gt;</span>
  <span class="nt">&lt;test_depend&gt;</span>python3-pytest<span class="nt">&lt;/test_depend&gt;</span>

  <span class="nt">&lt;export&gt;</span>
    <span class="nt">&lt;build_type&gt;</span>ament_python<span class="nt">&lt;/build_type&gt;</span>
  <span class="nt">&lt;/export&gt;</span>
<span class="nt">&lt;/package&gt;</span>

</code></pre></div></div>

<ol>
  <li>配置<code class="language-plaintext highlighter-rouge">setup.py</code>文件指定节点的<code class="language-plaintext highlighter-rouge">main</code>函数入口：</li>
</ol>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">setuptools</span> <span class="kn">import</span> <span class="n">setup</span>

<span class="n">package_name</span> <span class="o">=</span> <span class="sh">'</span><span class="s">pythonBaseMsgPub</span><span class="sh">'</span>

<span class="nf">setup</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="n">package_name</span><span class="p">,</span>
    <span class="n">version</span><span class="o">=</span><span class="sh">'</span><span class="s">0.0.0</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">packages</span><span class="o">=</span><span class="p">[</span><span class="n">package_name</span><span class="p">],</span>
    <span class="n">data_files</span><span class="o">=</span><span class="p">[</span>
        <span class="p">(</span><span class="sh">'</span><span class="s">share/ament_index/resource_index/packages</span><span class="sh">'</span><span class="p">,</span>
            <span class="p">[</span><span class="sh">'</span><span class="s">resource/</span><span class="sh">'</span> <span class="o">+</span> <span class="n">package_name</span><span class="p">]),</span>
        <span class="p">(</span><span class="sh">'</span><span class="s">share/</span><span class="sh">'</span> <span class="o">+</span> <span class="n">package_name</span><span class="p">,</span> <span class="p">[</span><span class="sh">'</span><span class="s">package.xml</span><span class="sh">'</span><span class="p">]),</span>
    <span class="p">],</span>
    <span class="n">install_requires</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">setuptools</span><span class="sh">'</span><span class="p">],</span>
    <span class="n">zip_safe</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="n">maintainer</span><span class="o">=</span><span class="sh">'</span><span class="s">pldz</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">maintainer_email</span><span class="o">=</span><span class="sh">'</span><span class="s">pldz@R7000.com</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="sh">'</span><span class="s">TODO: Package description</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">license</span><span class="o">=</span><span class="sh">'</span><span class="s">TODO: License declaration</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">tests_require</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">pytest</span><span class="sh">'</span><span class="p">],</span>
    <span class="c1"># 指定编译节点的main函数入口
</span>    <span class="n">entry_points</span><span class="o">=</span><span class="p">{</span>
        <span class="sh">'</span><span class="s">console_scripts</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span>
            <span class="sh">'</span><span class="s">pythonBaseMsgPubNode = pythonBaseMsgPub.pythonBaseMsgPubNode:main</span><span class="sh">'</span><span class="p">,</span>
        <span class="p">],</span>
    <span class="p">},</span>
<span class="p">)</span>

</code></pre></div></div>

<ol>
  <li>编译：<code class="language-plaintext highlighter-rouge">colcon build</code></li>
</ol>

<h2 id="243-创建python订阅话题功能包并编写节点">2.4.3 创建Python订阅话题功能包并编写节点</h2>

<ol>
  <li>创建功能包<code class="language-plaintext highlighter-rouge">pythonBaseMsgSub</code>，并直接给出节点名<code class="language-plaintext highlighter-rouge">pythonBaseMsgSubNode</code>和依赖项<code class="language-plaintext highlighter-rouge">rclpy</code>和<code class="language-plaintext highlighter-rouge">std_msgs</code>，如下所示：<code class="language-plaintext highlighter-rouge">ros2 pkg create pythonBaseMsgSub --build-type ament_python --node-name pythonBaseMsgSubNode --dependencies rclpy std_msgs</code></li>
</ol>

<blockquote>
  <p>Tips：这里补充还是推荐才有下划线割开的功能包命名方法而不是大小写混合，否则会出错
<img src="/assets/pics/ROS2_BASIC/2_right_package_name.png" alt="命名的问题" /></p>
</blockquote>

<ol>
  <li>编写订阅者节点：</li>
</ol>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">rclpy</span>
<span class="kn">from</span> <span class="n">rclpy.node</span> <span class="kn">import</span> <span class="n">Node</span>

<span class="kn">from</span> <span class="n">std_msgs.msg</span> <span class="kn">import</span> <span class="n">String</span>


<span class="k">class</span> <span class="nc">PythonBaseMsgSub</span><span class="p">(</span><span class="n">Node</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">nodeName</span><span class="p">):</span>
        <span class="c1"># 1. 构造函数，初始化node节点
</span>        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="n">nodeName</span><span class="p">)</span>
        <span class="c1"># 2. 声明订阅者，订阅话题`myTopicNmae`,并绑定回调函数
</span>        <span class="n">self</span><span class="p">.</span><span class="n">subscription</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">create_subscription</span><span class="p">(</span><span class="n">String</span><span class="p">,</span><span class="sh">'</span><span class="s">myTopicName</span><span class="sh">'</span><span class="p">,</span><span class="n">self</span><span class="p">.</span><span class="n">listener_callback</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>

    <span class="c1"># 3. 定义回调函数
</span>    <span class="k">def</span> <span class="nf">listener_callback</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">get_logger</span><span class="p">().</span><span class="nf">info</span><span class="p">(</span><span class="sh">'</span><span class="s">I heard: </span><span class="sh">"</span><span class="s">%s</span><span class="sh">"'</span> <span class="o">%</span> <span class="n">msg</span><span class="p">.</span><span class="n">data</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">init</span><span class="p">(</span><span class="n">args</span><span class="o">=</span><span class="n">args</span><span class="p">)</span>
    <span class="n">pythonBaseMsgSubNode</span> <span class="o">=</span> <span class="nc">PythonBaseMsgSub</span><span class="p">(</span><span class="sh">"</span><span class="s">pythonBaseMsgSubNode</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">spin</span><span class="p">(</span><span class="n">pythonBaseMsgSubNode</span><span class="p">)</span>
    <span class="n">pythonBaseMsgSubNode</span><span class="p">.</span><span class="nf">destroy_node</span><span class="p">()</span>
    <span class="n">rclpy</span><span class="p">.</span><span class="nf">shutdown</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="244-编译运行节点">2.4.4 编译运行节点</h2>

<ol>
  <li>
    <p>由于指定了依赖项和节点名，不需要多余的进行<code class="language-plaintext highlighter-rouge">packages.xml</code>和<code class="language-plaintext highlighter-rouge">setup.py</code>的配置</p>
  </li>
  <li>
    <p>编译<code class="language-plaintext highlighter-rouge">colcon build</code>，联合C/C++的一起运行，可以看到话题通讯是多对多的</p>
  </li>
</ol>

<p><img src="/assets/pics/ROS2_BASIC/2_basic_multi_communication_result.png" alt="话题通讯多对多" /></p>]]></content><author><name>pldz9</name></author><category term="ROS2_BASIC" /><summary type="html"><![CDATA[2.1 ROS2话题通讯介绍 话题通信是一种单向通信模型，一方发布数据，一方订阅数据，适用于连续不间断的通讯场景，如小车SLAM导航过程中的位姿信息等等。话题是一个通讯的管道，ROS2的话题发布方和接收方无论是C/C++还是Python都可以发布/订阅相同的话题实现通讯，一个话题的发布方，可以有多个订阅方，如下图所示： Tips：节点（Node）的概念 ROS的通信对象的构建都依赖于节点（回想之前快速体验的 rclcpp::Node 或者是 from rclpy.node import Node 都是为了创建一个节点所导入的父类），一般情况下一个节点都对应某一个功能模块（例如一个节点负责持续发布SLAM位姿数据等），一个C/C++ 或者Python的文件代码，可以包括多个节点。 2.2 ROS2常用的消息类型介绍 2.2.1 std_msgs消息类型 参考内容 官方文档 std_msgs Msg/Srv Documentation 详解常用的ROS内置消息类型 ROS中geometry_msgs消息类型、nav_msg消息 std_msgs 属于ROS的标准数据类型库，主要包括的消息类型有： ROS type C++ type bool bool byte uint8_t char char float32 float float64 double int8 int8_t uint8 uint8_t int16 int16 uint16 uint16 int32 int32 uint32 uint32 int64 int64 uint64 uint64_t string std::string static array std::array&lt;T, N&gt; 数组和有条件的字符串的映射 ROS type C++ type unbounded dynamic array std::vector bounded dynamic array custom_class&lt;T, N&gt; bounded string std::string 2.2.2 geometry_msgs消息类型 参考内容 官方文档 geometry_msgs Msg/Srv Documentation ROS中geometry_msgs常用消息类型 ROS2 humble的接口官方API geometry_msgs：常见的几何信息（如点、向量和姿势）提供ROS消息，其中包括的内容有，具体的话题参数，例如在使用乌龟节点控制乌龟运动的cmd_vel话题就是采用geometry_msgs/Twist编写的，具体的用法，可以去查阅官网。 Accel AccelStamped AccelWithCovariance AccelWithCovarianceStamped Inertia InertiaStamped Point Point32 PointStamped Polygon PolygonStamped Pose Pose2D PoseArray PoseStamped PoseWithCovariance PoseWithCovarianceStamped Quaternion QuaternionStamped Transform TransformStamped Twist TwistStamped TwistWithCovariance TwistWithCovarianceStamped Vector3 Vector3Stamped Wrench WrenchStamped 2.3 使用C/C++创建基础消息类型的话题通讯 参考内容： Writing a simple publisher and subscriber (C++) 2.2.2_话题通信_原生消息(C++)_01发布方01源码分析 2.3.1 创建C/C++发布话题信息的功能包并配置VSCode环境 创建发布者功能包时，不添加任何依赖项，回顾之前的项目配置 创建ROS2 C/C++功能包，其中包名为 cppBaseMsgPub :ros2 pkg create cppBaseMsgPub --build-type ament_cmake Tips：这里补充还是推荐才有下划线割开的功能包命名方法而不是大小写混合，否则会出错 如果尝试命名节点和依赖项，可以直接采用这种方式，节点名为 cppBaseMsgPubNode ，依赖 rclcpp 和 std_msgs：ros2 pkg create cppBaseMsgPub --build-type ament_cmake --node-name cppBaseMsgPubNode --dependencies rclcpp std_msgs pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code$ ros2 pkg create cppBaseMsgPub --build-type ament_cmake going to create a new package ... 手动省略 creating ./cppBaseMsgPub/CMakeLists.txt [WARNING]: Unknown license 'TODO: License declaration'. This has been set in the package.xml, but no LICENSE file has been created. It is recommended to use one of the ament license identitifers: ... 手动省略 MIT-0 在工作空间（这个是vscode的概念）下创建.vsocde文件夹和settings.json文件，配置VSCode的settings.json文件，添加路径 { "C_Cpp.default.includePath": ["/opt/ros/humble/include/**"], "python.analysis.extraPaths": ["/opt/ros/humble/local/lib/python3.10/dist-packages/"], } 此时的文件结构如下：可以看到，如果单纯的指定了包名但是没有指定节点名，不会在src目录下创建.cpp文件 pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code$ tree -a .(注释：这个就是工作空间) ├── cppBaseMsgPub │ ├── CMakeLists.txt │ ├── include │ │ └── cppBaseMsgPub │ ├── package.xml │ └── src └── .vscode └── settings.json 5 directories, 3 files 完成之后配置VSCode环境 2.3.2 编写ROS2发布话题节点CPP文件 编写发布者代码：根据官网提供的案例，在包的src目录下，创建cppBaseMsgPubNode.cpp文件，对cppBaseMsgPubNode.cpp进行发布者内容编写：总的来说，主要包括创建构造发布节点，计数属性，然后绑定发布函数到定时器上 #include "rclcpp/rclcpp.hpp" #include "std_msgs/msg/string.hpp" // C++14中的时间库 using namespace std::chrono_literals; class CppBaseMsgPub: public rclcpp::Node { public: /* 1. ROS2节点的构造函数，其中包括一个node对象（初始化时候没有给出节点的名称）， * 和属性count_(默认初始化为0) */ CppBaseMsgPub(const char* nodeName):Node(nodeName), count_(0) { // 2. 创建发布者,参数分别为话题名称myTopicName，和发布队列的长队为10 publisher_ = this-&gt;create_publisher&lt;std_msgs::msg::String&gt;("myTopicName", 10); // 3. 创建定时器，设置发布的频率，并绑定定时执行的事件，这里给到的是CppBaseMsgPub类的函数 timer_ = this-&gt;create_wall_timer(500ms, std::bind(&amp;CppBaseMsgPub::timer_callback, this)); } private: // 4. 定义回调函数 void timer_callback() { auto message = std_msgs::msg::String(); message.data = "Hello, world! " + std::to_string(count_++); RCLCPP_INFO(this-&gt;get_logger(), "Cpp Publish: '%s'", message.data.c_str()); publisher_-&gt;publish(message); } // 5. 计时器、发布者和计数器字段的声明 rclcpp::TimerBase::SharedPtr timer_; rclcpp::Publisher&lt;std_msgs::msg::String&gt;::SharedPtr publisher_; size_t count_; }; int main(int argc, char * argv[]) { rclcpp::init(argc, argv); // 创建节点，给出构造的节点名为cppBaseMsgPubNode rclcpp::spin(std::make_shared&lt;CppBaseMsgPub&gt;("cppBaseMsgPubNode")); rclcpp::shutdown(); return 0; } 2.3.3 配置C/C++发布话题功能包并编译 配置package.xml：package.xml主要对C/C++的功能包依赖项和发布信息进行配置，由于在节点cppBaseMsgPubNode.cpp中主要用到了rclcpp和std_msgs两个依赖，因此package.xml的配置主要如下： &lt;?xml version="1.0"?&gt; &lt;?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?&gt; &lt;package format="3"&gt; &lt;name&gt;cppBaseMsgPub&lt;/name&gt; &lt;version&gt;0.0.0&lt;/version&gt; &lt;description&gt;TODO: Package description&lt;/description&gt; &lt;maintainer email="pldz@R7000.com"&gt;pldz&lt;/maintainer&gt; &lt;license&gt;TODO: License declaration&lt;/license&gt; &lt;buildtool_depend&gt;ament_cmake&lt;/buildtool_depend&gt; &lt;test_depend&gt;ament_lint_auto&lt;/test_depend&gt; &lt;test_depend&gt;ament_lint_common&lt;/test_depend&gt; &lt;!-- 添加依赖项 --&gt; &lt;depend&gt;rclcpp&lt;/depend&gt; &lt;depend&gt;std_msgs&lt;/depend&gt; &lt;export&gt; &lt;build_type&gt;ament_cmake&lt;/build_type&gt; &lt;/export&gt; &lt;/package&gt; 配置CmakeLists.txt：主要包括的内容有五部分，并且需要按照顺序进行配置好 find_package() // 1. 列出依赖项，通俗的说是项目编译所需要的全部依赖项名称，节点和项目是两个概念，一个项目可以有多个节点 add_executable() // 2. 可执行文件的路径，通俗来说是编译节点的main函数入口 target_include_directories() // 3. 编译节点所需要的include的位置 ament_target_dependencies() // 4. 编译节点所需要的依赖项，这一步的目的是连接编译该节点所需要的依赖项 install() // 5. 通俗来说，是将编译好的节点给拷贝到ROS功能包的目录，使得能够通过指令ros2 run &lt;包名&gt; &lt;节点名&gt;的配置，默认这一步的目的就是将build文件夹的内容拷贝到install的lib文件夹下 ament_package() // 6. 生成ament工具的环境，缺少这一步，无法在install文件夹下生成setup.bash文件等等 因此该项目的CmakeLists.txt如下所示： cmake_minimum_required(VERSION 3.8) project(cppBaseMsgPub) if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang") add_compile_options(-Wall -Wextra -Wpedantic) endif() # find dependencies find_package(ament_cmake REQUIRED) # uncomment the following section in order to fill in # further dependencies manually. # find_package(&lt;dependency&gt; REQUIRED) # 1. 添加依赖项列表 find_package(rclcpp REQUIRED) find_package(std_msgs REQUIRED) # 2. 生成节点的主函数入口和节点名称 add_executable(cppBaseMsgPubNode src/cppBaseMsgPubNode.cpp) # 3. Include路径配置，这里其实没有用上，可以不用配置 target_include_directories(cppBaseMsgPubNode PUBLIC $&lt;BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include&gt; $&lt;INSTALL_INTERFACE:include&gt;) # 4. ament工具的编译所需要的依赖 ament_target_dependencies( cppBaseMsgPubNode "rclcpp" "std_msgs" ) # 5. 安装规则 install(TARGETS cppBaseMsgPubNode DESTINATION lib/${PROJECT_NAME}) if(BUILD_TESTING) find_package(ament_lint_auto REQUIRED) # the following line skips the linter which checks for copyrights # comment the line when a copyright and license is added to all source files set(ament_cmake_copyright_FOUND TRUE) # the following line skips cpplint (only works in a git repo) # comment the line when this package is in a git repo and when # a copyright and license is added to all source files set(ament_cmake_cpplint_FOUND TRUE) ament_lint_auto_find_test_dependencies() endif() # 6. 配置ament环境，生成功能包 ament_package() 编译功能包：colcon build： pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code$ colcon build WARNING: Package name "cppBaseMsgPub" does not follow the naming conventions. It should start with a lower case letter and only contain lower case letters, digits, underscores, and dashes. Starting &gt;&gt;&gt; cppBaseMsgPub ... 手动省略 Summary: 1 package finished [4.44s] 1 package had stderr output: cppBaseMsgPub 运行节点：激活功能包环境source ./install/setup.bash，然后运行ros2 run cppBaseMsgPub cppBaseMsgPubNode pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code$ source ./install/setup.bash pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code$ ros2 run cppBaseMsgPub cppBaseMsgPubNode [INFO] [1683015931.213646661] [cppBaseMsgPubNode]: Cpp Publish: 'Hello, world! 0' [INFO] [1683015931.713349843] [cppBaseMsgPubNode]: Cpp Publish: 'Hello, world! 1' [INFO] [1683015932.213429705] [cppBaseMsgPubNode]: Cpp Publish: 'Hello, world! 2' ^C[INFO] [1683015932.588202160] [rclcpp]: signal_handler(signum=2) pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code$ 2.3.4 创建C/C++订阅话题的功能包 由于上面操作过一遍从功能包开始的配置节点依赖项，这里直接提前在创建功能包的时候直接指定依赖项，省去后续的配置，取名订阅话题的功能包为cppBaseMsgSub，节点名称为cppBaseMsgSubNode，如ros2 pkg create cppBaseMsgSub --build-type ament_cmake --node-name cppBaseMsgSubNode --dependencies rclcpp std_msgs Tips：这里补充还是推荐才有下划线割开的功能包命名方法而不是大小写混合，否则会出错 pldz@pldz-pc:~/share/ROS2_DEMO/2_Chapter/code$ ros2 pkg create cppBaseMsgSub --build-type ament_cmake --node-name cppBaseMsgSubNode --dependencies rclcpp std_msgs going to create a new package package name: cppBaseMsgSub ... 手动省略 MIT MIT-0 2.3.1节在工作空间下配置过vscode的settings.json这里就不再配置vscode了 2.3.5 编写ROS2订阅话题节点CPP文件 直接在cppBaseMsgSubNode.cpp文件进行编辑，创建订阅节点，订阅话题myTopicName与之前的发布话题类型和名称一致即可： #include "rclcpp/rclcpp.hpp" #include "std_msgs/msg/string.hpp" // 占位符，结合std::bind函数的绑定使用 using std::placeholders::_1; class CppBaseMsgSub: public rclcpp::Node { public: /* 1. ROS2节点的构造函数 */ CppBaseMsgSub(const char* nodeName):Node(nodeName) { // 2.声明订阅话题类型，并绑定回调函数 subscription_ = this-&gt;create_subscription&lt;std_msgs::msg::String&gt;( "myTopicName", 10, std::bind(&amp;CppBaseMsgSub::topic_callback, this, _1)); } private: // 3. 定义订阅到消息的回调函数 void topic_callback(const std_msgs::msg::String &amp; msg) const { RCLCPP_INFO(this-&gt;get_logger(), "I heard: '%s'", msg.data.c_str()); } // 4. 计时器、发布者和计数器字段的声明 rclcpp::Subscription&lt;std_msgs::msg::String&gt;::SharedPtr subscription_; }; int main(int argc, char * argv[]) { rclcpp::init(argc, argv); // 初始化订阅节点 rclcpp::spin(std::make_shared&lt;CppBaseMsgSub&gt;("cppBaseMsgSubNode")); rclcpp::shutdown(); return 0; } 2.3.6 配置C/C++订阅话题功能包并编译 由于是直接在创建包的时候指定了依赖项，可以直接编译colcon build，运行查看效果： 2.4 使用Python创建基础消息类型的话题通讯 2.4.1 创建Python发布话题功能包并编写节点文件 创建Python发布者功能包，其中功能包名称为pythonBaseMsgPub，不指定节点名和依赖项，后续手动配置packages.xml和setup.py：ros2 pkg create pythonBaseMsgPub --build-type ament_python，目前文件结构如下所示： Tips：这里补充还是推荐才有下划线割开的功能包命名方法而不是大小写混合，否则会出错 在pythonBaseMsgPub/pythonBaseMsgPub文件夹下创建pythonBaseMsgPubNode.py文件，内容如下所示 import rclpy from rclpy.node import Node from std_msgs.msg import String class PythonBaseMsgPub(Node): def __init__(self, nodeName): # 1. 初始化父类构造函数，其中节点名需要创建时候指定,计数属性count_从0开始 super().__init__(nodeName) self.count_ = 0 # 2. 声明发布者，发布消息类型为String，话题名为myTopicName,队列大小为10 self.publisher_ = self.create_publisher(String, 'myTopicName', 10) # 3. 创建定时器，其中更新频率为0.5秒，并绑定回调函数 self.timer = self.create_timer(0.5, self.timer_callback) # 4. 定义回调函数 def timer_callback(self): msg = String() msg.data = 'Hello World: %d' % self.count_ self.publisher_.publish(msg) self.get_logger().info('Publishing: "%s"' % msg.data) self.count_ += 1 def main(args=None): rclpy.init(args=args) pythonBaseMsgPubNode = PythonBaseMsgPub("pythonBaseMsgPubNode") rclpy.spin(pythonBaseMsgPubNode) # 销毁节点 pythonBaseMsgPubNode.destroy_node() rclpy.shutdown() if __name__ == '__main__': main() 2.4.2 配置Python项目并运行 配置Python项目的packages.xml：主要是添加可执行的依赖项rclpy和std_msgs &lt;?xml version="1.0"?&gt; &lt;?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?&gt; &lt;package format="3"&gt; &lt;name&gt;pythonBaseMsgPub&lt;/name&gt; &lt;version&gt;0.0.0&lt;/version&gt; &lt;description&gt;TODO: Package description&lt;/description&gt; &lt;maintainer email="pldz@R7000.com"&gt;pldz&lt;/maintainer&gt; &lt;license&gt;TODO: License declaration&lt;/license&gt; &lt;!-- 与C/C++不同的是,Python文件是一个可执行的脚本,因此依赖项的关键字为exec_depend --&gt; &lt;exec_depend&gt;rclpy&lt;/exec_depend&gt; &lt;exec_depend&gt;std_msgs&lt;/exec_depend&gt; &lt;test_depend&gt;ament_copyright&lt;/test_depend&gt; &lt;test_depend&gt;ament_flake8&lt;/test_depend&gt; &lt;test_depend&gt;ament_pep257&lt;/test_depend&gt; &lt;test_depend&gt;python3-pytest&lt;/test_depend&gt; &lt;export&gt; &lt;build_type&gt;ament_python&lt;/build_type&gt; &lt;/export&gt; &lt;/package&gt; 配置setup.py文件指定节点的main函数入口： from setuptools import setup package_name = 'pythonBaseMsgPub' setup( name=package_name, version='0.0.0', packages=[package_name], data_files=[ ('share/ament_index/resource_index/packages', ['resource/' + package_name]), ('share/' + package_name, ['package.xml']), ], install_requires=['setuptools'], zip_safe=True, maintainer='pldz', maintainer_email='pldz@R7000.com', description='TODO: Package description', license='TODO: License declaration', tests_require=['pytest'], # 指定编译节点的main函数入口 entry_points={ 'console_scripts': [ 'pythonBaseMsgPubNode = pythonBaseMsgPub.pythonBaseMsgPubNode:main', ], }, ) 编译：colcon build 2.4.3 创建Python订阅话题功能包并编写节点 创建功能包pythonBaseMsgSub，并直接给出节点名pythonBaseMsgSubNode和依赖项rclpy和std_msgs，如下所示：ros2 pkg create pythonBaseMsgSub --build-type ament_python --node-name pythonBaseMsgSubNode --dependencies rclpy std_msgs Tips：这里补充还是推荐才有下划线割开的功能包命名方法而不是大小写混合，否则会出错 编写订阅者节点： import rclpy from rclpy.node import Node from std_msgs.msg import String class PythonBaseMsgSub(Node): def __init__(self, nodeName): # 1. 构造函数，初始化node节点 super().__init__(nodeName) # 2. 声明订阅者，订阅话题`myTopicNmae`,并绑定回调函数 self.subscription = self.create_subscription(String,'myTopicName',self.listener_callback,10) # 3. 定义回调函数 def listener_callback(self, msg): self.get_logger().info('I heard: "%s"' % msg.data) def main(args=None): rclpy.init(args=args) pythonBaseMsgSubNode = PythonBaseMsgSub("pythonBaseMsgSubNode") rclpy.spin(pythonBaseMsgSubNode) pythonBaseMsgSubNode.destroy_node() rclpy.shutdown() if __name__ == '__main__': main() 2.4.4 编译运行节点 由于指定了依赖项和节点名，不需要多余的进行packages.xml和setup.py的配置 编译colcon build，联合C/C++的一起运行，可以看到话题通讯是多对多的]]></summary></entry></feed>